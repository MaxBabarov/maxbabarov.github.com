window.illustrations = [{"name":"Affix","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Affix/Affix","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** className applied to Affix component */\n  className?: string,\n  /** id applied to Affix component */\n  testId?: string,\n  /** theme object for Affix */\n  theme: ThemeT,\n  /** the content that will be affixed */\n  children?: Array<any> | Object | string,\n  /** pixels used as a reference when calculating position of scroll */\n  offsetTop: number,\n  /** target element of the affix  */\n  target: any,\n  /** a class to be applied to the affix's root element when it's affixed */\n  affixClassName: string,\n};\n\n\ntype State = {\n  isAffixed: boolean\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n  offsetTop: number\n};\n\nconst defaultProps = {\n  theme: {},\n  offsetTop: 0\n};\n\n/**\n * This component toggles a fixed position.\n */\nexport default class Affix extends React.Component {\n  props: Props;\n  state: State;\n\n  onScroll: () => void;\n  scrollTop: number;\n  node: Object;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Affix';\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAffixed: false };\n    this.onScroll = this.onScroll.bind(this);\n  }\n\n  componentDidMount() {\n    this.registerScrollEventListener();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.target !== this.props.target) {\n      if (prevProps.target !== null) this.removeRegisteredScrollEventListener();\n      this.registerScrollEventListener();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeRegisteredScrollEventListener();\n  }\n\n  onScroll() {\n    const { node } = this;\n    const { isAffixed } = this.state;\n    const { target, offsetTop, affixClassName } = this.props;\n\n    if (isAffixed) {\n      if (target.scrollTop < this.scrollTop) {\n        this.setState({ isAffixed: false });\n      }\n    } else {\n      const offset = this.getOffset();\n      if (offset <= offsetTop) {\n        const top = target.getBoundingClientRect().top + offsetTop;\n\n        this.scrollTop = target.scrollTop - (offset - offsetTop);\n\n        if (!affixClassName) {\n          node.style.top = `${top}px`;\n        }\n\n        this.setState({ isAffixed: true });\n      }\n    }\n  }\n\n  getOffset() {\n    const { node } = this;\n    const { target } = this.props;\n    return node.getBoundingClientRect().top - target.getBoundingClientRect().top;\n  }\n\n  removeRegisteredScrollEventListener() {\n    const { target } = this.props;\n    if (target) target.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  registerScrollEventListener() {\n    const { target } = this.props;\n    if (target) target.addEventListener('scroll', this.onScroll, true);\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      theme,\n      testId,\n      affixClassName,\n      ...props\n      } = this.props;\n\n    // unnecesary props\n    delete props.offsetTop;\n    delete props.count;\n    delete props.stretch;\n\n    const themeClassName:Array<string> = classNames({\n      [theme.affix]: this.state.isAffixed,\n      [theme.affixTop]: !this.state.isAffixed,\n      [affixClassName]: this.state.isAffixed && !!affixClassName\n    });\n\n    return (\n      <div\n        ref={(node) => { this.node = node; }}\n        className={classNames(className, themeClassName)}\n        data-test-id={testId}\n        data-anypoint-component={Affix.displayName}\n        {...props}\n      >\n        <div>{children}</div>\n      </div>\n    );\n  }\n}\n","description":"This component toggles a fixed position.","displayName":"Affix","methods":[{"name":"onScroll","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getOffset","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"removeRegisteredScrollEventListener","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"registerScrollEventListener","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Affix component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Affix component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Affix","defaultValue":{"value":"{}","computed":false}},"children":{"flowType":{"name":"union","raw":"Array<any> | Object | string","elements":[{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"},{"name":"Object"},{"name":"string"}]},"required":false,"description":"the content that will be affixed"},"offsetTop":{"flowType":{"name":"number"},"required":true,"description":"pixels used as a reference when calculating position of scroll","defaultValue":{"value":"0","computed":false}},"target":{"flowType":{"name":"any"},"required":true,"description":"target element of the affix"},"affixClassName":{"flowType":{"name":"string"},"required":true,"description":"a class to be applied to the affix's root element when it's affixed"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Affix/examples/1_Affix_usage.js","requirePath":"../src/components/Affix/examples/1_Affix_usage.js","description":"","source":"import React from 'react';\nimport { Affix } from '../../';\nimport { Modal } from '../../Modal';\nimport { ModalHeader } from '../../ModalHeader';\nimport { ModalBody } from '../../ModalBody';\nimport { ModalFooter } from '../../ModalFooter';\nimport { Tabs } from '../../Tabs';\nimport { TabList } from '../../TabList';\nimport { Tab } from '../../Tab';\nimport { TabPanel } from '../../TabPanel';\nimport { Button } from '../../Button';\n\n/**\n * @component ../../Affix\n */\n\nexport default class YourApp extends React.Component { // eslint-disable-line\n  constructor(props) {\n    super(props);\n    this.onRef = this.onRef.bind(this);\n\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = {\n      open: false,\n      container: null\n    };\n  }\n\n  onRef(node) {\n    if (node == null) return;\n    if (node !== this.state.container) this.setState({ container: node });\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      // the className 'affix usage-1' is defined in /src/app/app.css\n      return (\n        <Modal\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader onClose={this.handleDismiss}>\n            <h2>Affix Demo</h2>\n          </ModalHeader>\n          <ModalBody onRef={this.onRef}>\n            <Tabs type=\"secondary\" align=\"left\">\n              <div style={{ width: '90px' }}>\n                <Affix offsetTop={19} target={this.state.container} affixClassName=\"affix usage-1\" >\n                  <TabList>\n                    <Tab>Sign in</Tab>\n                    <Tab>Register</Tab>\n                  </TabList>\n                </Affix>\n              </div>\n              <TabPanel>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n              </TabPanel>\n              <TabPanel>This can not be scrolled</TabPanel>\n            </Tabs>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              kind=\"tertiary\"\n              onClick={this.handleDismiss}\n              noFill\n            >Cancel</Button>\n            <Button\n              onClick={this.handleDismiss}\n              kind=\"primary\"\n            >Ok</Button>\n          </ModalFooter>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Affix a TabList that is close to the modal top border</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n }\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Affix a TabList that is close to the modal top border</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Affix/examples/2_Affix_usage.js","requirePath":"../src/components/Affix/examples/2_Affix_usage.js","description":"","source":"import React from 'react';\nimport { Affix } from '../../';\nimport { Modal } from '../../Modal';\nimport { ModalHeader } from '../../ModalHeader';\nimport { ModalBody } from '../../ModalBody';\nimport { ModalFooter } from '../../ModalFooter';\nimport { Label } from '../../Label';\nimport { TextField } from '../../TextField';\nimport { Tabs } from '../../Tabs';\nimport { TabList } from '../../TabList';\nimport { Tab } from '../../Tab';\nimport { TabPanel } from '../../TabPanel';\nimport { Button } from '../../Button';\n\n/**\n * @component ../../Affix\n */\n\nconst margin = { marginBottom: 30 };\nexport default class YourApp extends React.Component { // eslint-disable-line\n  constructor(props) {\n    super(props);\n    this.onRef = this.onRef.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = {\n      open: false,\n      container: null\n    };\n  }\n\n  onRef(node) {\n    if (node == null) return;\n    if (node !== this.state.container) this.setState({ container: node });\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      // the className 'affix usage-2' is defined in /src/app/app.css\n      return (\n        <Modal\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader onClose={this.handleDismiss}>\n            <h2>Affix Demo</h2>\n          </ModalHeader>\n          <ModalBody onRef={this.onRef}>\n            <div>\n              <Label>TextField1</Label>\n              <TextField style={margin} />\n              <Label>TextField2</Label>\n              <TextField style={margin} />\n            </div>\n            <Tabs type=\"secondary\" align=\"left\">\n              <div style={{ width: '90px' }}>\n                <Affix offsetTop={20} target={this.state.container} affixClassName=\"affix usage-2\" >\n                  <TabList>\n                    <Tab>Sign in</Tab>\n                    <Tab>Register</Tab>\n                  </TabList>\n                </Affix>\n              </div>\n\n              <TabPanel>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n                <p>This is a very long text</p>\n                <p>You can scroll this and the sidebar will stay fixed!</p>\n              </TabPanel>\n              <TabPanel>This can not be scrolled</TabPanel>\n            </Tabs>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              kind=\"tertiary\"\n              onClick={this.handleDismiss}\n              noFill\n            >Cancel</Button>\n            <Button\n              onClick={this.handleDismiss}\n              kind=\"primary\"\n            >Ok</Button>\n          </ModalFooter>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Affix a TabList that is not close to the modal top border</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Affix a TabList that is not close to the modal top border</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"}]},{"name":"BarChart","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/BarChart/BarChart","source":"/* @flow */\nimport React from 'react';\nimport {\n  VictoryAxis,\n  VictoryChart,\n  VictoryContainer,\n} from 'victory';\nimport shallowequal from 'shallowequal';\nimport {\n  deriveMutations,\n  getBarOffset,\n} from './helpers';\nimport {\n  BasicTooltip,\n  createReactionBus,\n  defaultNumberFormatter,\n  InteractiveBar,\n  InteractiveGroup,\n} from '../Chart';\nimport EmptyResult from '../EmptyResult';\nimport styles from './BarChart.css'; // eslint-disable-line\nimport WrappedBar from './WrappedBar';\nimport Spinner from '../Spinner';\n\ntype AxisPropT = {\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n};\n\ntype SeriesPropT = {\n  color: string,\n  label: string,\n  name: string,\n  previousAccessor: (datum: Object) => number,\n  value: (datum: Object) => number,\n  tooltipFormat: (datum: Object) => string,\n};\n\n/**\n * See src/components/BarChart/index.js for the public API documentaion. See\n * getDerivedProps for additional information on derived props used\n * in presentational component.\n */\nexport type Props = {\n  activeSeries: Array<boolean>,\n  barPadding: number,\n  barWidth: number,\n  className?: string,\n  data: Array<Object>,\n  flyoutComponent?: any,\n  focusedIndex: ?number,\n  focusedSeries: ?number,\n  height: number | string,\n  isAxisInverted: boolean,\n  isCategorical: boolean,\n  isLoading: boolean,\n  isOverlayShown: boolean,\n  isStacked: boolean,\n  isTimeSeries: boolean,\n  onHover: Function,\n  padding: {\n    top: number,\n    left: number,\n    right: number,\n    bottom: number,\n  },\n  plotHeight: number,\n  plotWidth: number,\n  reactionBus: Object,\n  series: Array<SeriesPropT>,\n  showChart: boolean,\n  showLegend: boolean,\n  testId?: string,\n  theme: Object,\n  tickDivisor: number,\n  tickValues: Array<number | string>,\n  tooltipComponent?: any,\n  tooltipRows: Array<Object>,\n  tooltipTitle: string,\n  width: string | number,\n  xAxis: AxisPropT,\n  yAxis: AxisPropT,\n};\n\ntype State = {\n  plotHeight: number,\n  plotWidth: number,\n}\n\ntype DefaultProps = {\n  showChart: boolean,\n};\n\nexport const defaultProps = {\n  showChart: false,\n};\n\n/**\n * Describe the purpose of BarChart here\n */\nexport default class BarChart extends React.Component {\n  props: Props;\n  state: State;\n\n  computeTickValues: () => void;\n  handleHover: () => void;\n  handlePlotAreaChange: () => void;\n  focusSeries: () => void;\n  focusIndex: () => void;\n  reactionBus: Object;\n\n  static defaultProps: DefaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n\n    /** Our shared tests want us to handle receiving no props rather than throw errors... */\n    const { height, reactionBus, width } = props;\n\n    /** See docs/react-mutations-design.md for additional usage info */\n    this.reactionBus = createReactionBus({\n      deriveMutations,\n      master: reactionBus,\n    });\n\n    this.state = {\n      plotHeight: +height,\n      plotWidth: +width,\n    };\n\n    this.handleHover = this.handleHover.bind(this);\n    this.handlePlotAreaChange = this.handlePlotAreaChange.bind(this);\n    this.focusSeries = this.focusSeries.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.reactionBus !== nextProps.reactionBus) {\n      this.reactionBus.destroy();\n      this.reactionBus = createReactionBus({\n        deriveMutations,\n        master: nextProps.reactionBus,\n      });\n    }\n\n    if (this.props.focusedIndex !== nextProps.focusedIndex) {\n      /**\n       * We set isLocal to true so that actions derived from props only flow downstream,\n       * respecting the integrity of the flow of data.\n       */\n      this.focusIndex(nextProps.focusedIndex, { isLocal: true });\n    }\n\n    if (this.props.focusedSeries !== nextProps.focusedSeries) {\n      this.focusSeries(nextProps.focusedSeries);\n    }\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    let focusedIndex; // eslint-disable-line no-unused-vars\n    let focusedSeries; // eslint-disable-line no-unused-vars\n    let nextPropsToCompare;\n    let propsToCompare;\n\n    /**\n     * We pluck focusedIndex here because changes to focusedIndex are handled\n     * manually and should not trigger a React render.\n     */\n    ({\n      focusedIndex,\n      focusedSeries,\n      ...nextPropsToCompare,\n    } = nextProps);\n    ({\n      focusedIndex,\n      focusedSeries,\n      ...propsToCompare\n    } = this.props);\n    return (\n      !shallowequal(propsToCompare, nextPropsToCompare) ||\n      !shallowequal(this.state, nextState)\n    );\n  }\n\n  handleHover(hoveredIndex: ?number) {\n    const { onHover } = this.props;\n    this.focusIndex(hoveredIndex);\n    if (onHover) {\n      onHover(hoveredIndex);\n    }\n  }\n\n  handlePlotAreaChange(plotArea: { height: number, width: number }) {\n    if (plotArea.width !== this.state.plotWidth) {\n      this.setState({\n        plotHeight: plotArea.height,\n        plotWidth: plotArea.width,\n      });\n    }\n  }\n\n  focusIndex(index: ?number, options: { isLocal?: boolean } = {}) {\n    const { isLocal } = options;\n    const action = {\n      type: 'FOCUS_INDEX',\n      payload: {\n        index,\n      }\n    };\n\n    if (isLocal) {\n      this.reactionBus.dispatchLocal(action);\n    } else {\n      this.reactionBus.dispatch(action);\n    }\n  }\n\n  focusSeries(seriesIndex: ?number) {\n    const { activeSeries } = this.props;\n    this.reactionBus.dispatchLocal({\n      type: 'FOCUS_SERIES',\n      payload: {\n        index: seriesIndex,\n        activeSeries,\n      }\n    });\n  }\n\n  render() {\n    /** Our shared tests want us to handle receiving no props rather than throw errors... */\n    const {\n      activeSeries,\n      barPadding,\n      barWidth,\n      reactionBus, // eslint-disable-line no-unused-vars\n      data,\n      flyoutComponent,\n      focusedIndex, // eslint-disable-line no-unused-vars\n      focusedSeries, // eslint-disable-line no-unused-vars\n      height,\n      isAxisInverted,\n      isLoading,\n      isOverlayShown,\n      isCategorical, // eslint-disable-line no-unused-vars\n      isTimeSeries,\n      onHover, // eslint-disable-line no-unused-vars\n      padding,\n      series,\n      isStacked,\n      showChart,\n      theme,\n      testId,\n      tickDivisor,\n      tickValues,\n      tooltipComponent,\n      className,\n      tooltipRows,\n      tooltipTitle,\n      width,\n      xAxis,\n      yAxis, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    return (\n      <div\n        className={className}\n        data-test-id={testId}\n        data-anypoint-component=\"BarChart\"\n        style={{ width, height }}\n        {...props}\n      >\n        {showChart\n          ? (\n            <div style={{ height }}>\n              <VictoryChart\n                containerComponent={<VictoryContainer\n                  responsive\n                />}\n                domainPadding={isAxisInverted\n                  ? { y: barPadding }\n                  : { x: barPadding }}\n                height={height}\n                padding={padding}\n                width={width}\n                theme={theme}\n              >\n                <VictoryAxis\n                  scale={isTimeSeries ? 'time' : 'linear'}\n                  style={{\n                    tickLabels: {\n                      fill: !isTimeSeries\n                      ? tickValue => ((tickValue - 1) % tickDivisor === 0\n                        ? theme.axis.style.tickLabels.fill\n                        : 'transparent')\n                      : null\n                    }\n                  }}\n                  tickValues={tickValues}\n                />\n                <VictoryAxis\n                  dependentAxis\n                  tickFormat={defaultNumberFormatter}\n                />\n                {data.length && !isLoading && series\n                  ? (<InteractiveGroup\n                    reactionBus={this.reactionBus}\n                    data={data}\n                    flyoutComponent={flyoutComponent}\n                    horizontal={isAxisInverted}\n                    isAxisInverted={isAxisInverted}\n                    isAnchoredX={!isAxisInverted}\n                    isAnchoredY={isAxisInverted}\n                    isOverlayShown={isOverlayShown}\n                    onHover={this.handleHover}\n                    onPlotAreaChange={this.handlePlotAreaChange}\n                    tooltipComponent={tooltipComponent || (\n                      <BasicTooltip\n                        rows={tooltipRows}\n                        title={tooltipTitle}\n                      />)}\n                    tooltipHeight={BasicTooltip.getBaseHeight(series.length)}\n                    xValue={isAxisInverted ? () => 0 : xAxis.value}\n                    yValue={isAxisInverted ? xAxis.value : () => 0}\n                  >\n                    {series.map((s, index) => (\n                      <InteractiveBar\n                        data={data}\n                        dataComponent={<WrappedBar\n                          accessor={s.value}\n                          isStacked={isStacked}\n                          previousAccessor={s.previousAccessor}\n                          xOffset={getBarOffset({ activeSeries, barWidth, index, isStacked })}\n                        />}\n                        horizontal={isAxisInverted}\n                        key={index}\n                        mutation$={this.reactionBus.mutation$}\n                        name={s.name}\n                        style={{\n                          data: {\n                            width: barWidth,\n                            fill: s.color,\n                          }\n                        }}\n                        x={xAxis.value}\n                        y={s.value}\n                      />\n                    ))}\n                  </InteractiveGroup>) : null }\n              </VictoryChart>\n              <div display-if={!(data.length) || isLoading} className={styles.chartOverlay}>\n                <EmptyResult\n                  display-if={!data.length && !isLoading}\n                />\n                <Spinner display-if={isLoading} size=\"m\" />\n              </div>\n            </div>\n          ) : null}\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of BarChart here","methods":[{"name":"handleHover","docblock":null,"modifiers":[],"params":[{"name":"hoveredIndex","type":{"name":"number","nullable":true}}],"returns":null},{"name":"handlePlotAreaChange","docblock":null,"modifiers":[],"params":[{"name":"plotArea","type":{"name":"signature","type":"object","raw":"{ height: number, width: number }","signature":{"properties":[{"key":"height","value":{"name":"number","required":true}},{"key":"width","value":{"name":"number","required":true}}]}}}],"returns":null},{"name":"focusIndex","docblock":null,"modifiers":[],"params":[{"name":"index","type":{"name":"number","nullable":true}},{"name":"options","type":null}],"returns":null},{"name":"focusSeries","docblock":null,"modifiers":[],"params":[{"name":"seriesIndex","type":{"name":"number","nullable":true}}],"returns":null}],"props":{"activeSeries":{"flowType":{"name":"Array","elements":[{"name":"boolean"}],"raw":"Array<boolean>"},"required":true,"description":""},"barPadding":{"flowType":{"name":"number"},"required":true,"description":""},"barWidth":{"flowType":{"name":"number"},"required":true,"description":""},"className":{"flowType":{"name":"string"},"required":false,"description":""},"data":{"flowType":{"name":"Array","elements":[{"name":"Object"}],"raw":"Array<Object>"},"required":true,"description":""},"flyoutComponent":{"flowType":{"name":"any"},"required":false,"description":""},"focusedIndex":{"flowType":{"name":"number","nullable":true},"required":true,"description":""},"focusedSeries":{"flowType":{"name":"number","nullable":true},"required":true,"description":""},"height":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":true,"description":""},"isAxisInverted":{"flowType":{"name":"boolean"},"required":true,"description":""},"isCategorical":{"flowType":{"name":"boolean"},"required":true,"description":""},"isLoading":{"flowType":{"name":"boolean"},"required":true,"description":""},"isOverlayShown":{"flowType":{"name":"boolean"},"required":true,"description":""},"isStacked":{"flowType":{"name":"boolean"},"required":true,"description":""},"isTimeSeries":{"flowType":{"name":"boolean"},"required":true,"description":""},"onHover":{"flowType":{"name":"Function"},"required":true,"description":""},"padding":{"flowType":{"name":"signature","type":"object","raw":"{\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n}","signature":{"properties":[{"key":"top","value":{"name":"number","required":true}},{"key":"left","value":{"name":"number","required":true}},{"key":"right","value":{"name":"number","required":true}},{"key":"bottom","value":{"name":"number","required":true}}]}},"required":true,"description":""},"plotHeight":{"flowType":{"name":"number"},"required":true,"description":""},"plotWidth":{"flowType":{"name":"number"},"required":true,"description":""},"reactionBus":{"flowType":{"name":"Object"},"required":true,"description":""},"series":{"flowType":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  color: string,\n  label: string,\n  name: string,\n  previousAccessor: (datum: Object) => number,\n  value: (datum: Object) => number,\n  tooltipFormat: (datum: Object) => string,\n}","signature":{"properties":[{"key":"color","value":{"name":"string","required":true}},{"key":"label","value":{"name":"string","required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"previousAccessor","value":{"name":"signature","type":"function","raw":"(datum: Object) => number","signature":{"arguments":[{"name":"datum","type":{"name":"Object"}}],"return":{"name":"number"}},"required":true}},{"key":"value","value":{"name":"signature","type":"function","raw":"(datum: Object) => number","signature":{"arguments":[{"name":"datum","type":{"name":"Object"}}],"return":{"name":"number"}},"required":true}},{"key":"tooltipFormat","value":{"name":"signature","type":"function","raw":"(datum: Object) => string","signature":{"arguments":[{"name":"datum","type":{"name":"Object"}}],"return":{"name":"string"}},"required":true}}]}}],"raw":"Array<SeriesPropT>"},"required":true,"description":""},"showChart":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"false","computed":false}},"showLegend":{"flowType":{"name":"boolean"},"required":true,"description":""},"testId":{"flowType":{"name":"string"},"required":false,"description":""},"theme":{"flowType":{"name":"Object"},"required":true,"description":""},"tickDivisor":{"flowType":{"name":"number"},"required":true,"description":""},"tickValues":{"flowType":{"name":"Array","elements":[{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]}],"raw":"Array<number | string>"},"required":true,"description":""},"tooltipComponent":{"flowType":{"name":"any"},"required":false,"description":""},"tooltipRows":{"flowType":{"name":"Array","elements":[{"name":"Object"}],"raw":"Array<Object>"},"required":true,"description":""},"tooltipTitle":{"flowType":{"name":"string"},"required":true,"description":""},"width":{"flowType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"required":true,"description":""},"xAxis":{"flowType":{"name":"signature","type":"object","raw":"{\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n}","signature":{"properties":[{"key":"label","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Function","required":true}},{"key":"tooltipFormat","value":{"name":"Function","required":true}}]}},"required":true,"description":""},"yAxis":{"flowType":{"name":"signature","type":"object","raw":"{\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n}","signature":{"properties":[{"key":"label","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Function","required":true}},{"key":"tooltipFormat","value":{"name":"Function","required":true}}]}},"required":true,"description":""}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/BarChart/examples/1_BarChart_usage.js","requirePath":"../src/components/BarChart/examples/1_BarChart_usage.js","description":"","source":"import React from 'react';\nimport { BarChart } from '../../';\n\n/**\n * @component ../../BarChart\n */\nconst data = [\n   { name: 'api1', upload: 200, download: 50, http_404: 100, http_300: 400, http_200: 123 },\n   { name: 'api2', upload: 100, download: 300, http_404: 44, http_300: 234, http_200: 223 },\n   { name: 'api3', upload: 300, download: 200, http_404: 22, http_300: 134, http_200: 153 },\n   { name: 'api4', upload: 400, download: 100, http_404: 15, http_300: 543, http_200: 423 },\n   { name: 'api5', upload: 400, download: 100, http_404: 10, http_300: 200, http_200: 323 },\n   { name: 'api6', upload: 400, download: 100, http_404: 5, http_300: 124, http_200: 422 },\n];\n\nconst dimension = {\n  label: 'API Version',\n  value: d => d.name,\n};\n\nconst series = [\n  {\n    key: 'http_404',\n    label: 'Errors',\n    value: 'http_404',\n  },\n  {\n    key: 'http_300',\n    label: 'Redirects',\n    value: d => d.http_300\n  },\n  {\n    key: 'http_200',\n    label: 'Successes',\n    value: d => d.http_200,\n  }\n];\n\nexport default class YourApp extends Component { //eslint-disable-line\n  render() {\n    return (\n      <div style={{ width: '100%' }}>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={data}\n            xAxis=\"name\"\n            yAxis={d => d.upload}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={data}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={data}\n            isAxisInverted\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={data}\n            isStacked\n            xAxis={dimension}\n            series={series}\n            yAxis={{\n              // Uncomment to try other options.\n              // tooltipFormat: '2%',\n              // tooltipFormat: 'b',\n              // tooltipFormat: 'X',\n              // tooltipFormat: d => d > 400 ? 'Big' : 'Small',\n              tooltipFormat: '.1',\n              value: d => d * 2,\n            }}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={data}\n            isAxisInverted\n            isStacked\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={[]}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            data={[]}\n            isLoading\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                width: \"100%\"\n            }}>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={data} xAxis=\"name\" yAxis={d => d.upload} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={data} xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={data} isAxisInverted xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart\n                    data={data}\n                    isStacked\n                    xAxis={dimension}\n                    series={series}\n                    yAxis={{\n                        tooltipFormat: \".1\",\n                        value: d => d * 2\n                    }} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={data} isAxisInverted isStacked xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={[]} xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart data={[]} isLoading xAxis={dimension} series={series} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/BarChart/examples/2_BarChart_synced_interactions.js","requirePath":"../src/components/BarChart/examples/2_BarChart_synced_interactions.js","description":"","source":"import React from 'react';\nimport { BarChart } from '../../';\n/**\n * @component ../../BarChart\n */\n\nconst data = [];\n\nfor (let i = 0; i < 50; i++) { // eslint-disable-line\n  data.push({\n    x: `api${i}`,\n    foo: Math.random() * 20,\n    bar: Math.random() * 40,\n  });\n}\n\nexport default class YourApp extends Component { //eslint-disable-line\n  constructor(props) {\n    super(props);\n\n    /**\n     * We know this will be the master ActionMediator so only needs to be created once\n     * in constructor. If it was in a slave configuration, we would need to update in\n     * in componentWillReceiveProps or anytime a new master becomes available that it\n     * should subscribe to.\n     */\n    this.reactionBus = Chart.createReactionBus(); // eslint-disable-line\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            reactionBus={this.reactionBus}\n            data={data}\n            xAxis=\"x\"\n            yAxis={d => d.foo}\n          />\n        </div>\n        <div style={{ height: 250 }}>\n          <BarChart\n            reactionBus={this.reactionBus}\n            data={data}\n            xAxis=\"x\"\n            yAxis={d => d.bar}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart reactionBus={this.reactionBus} data={data} xAxis=\"x\" yAxis={d => d.foo} />\n            </div>\n            <div\n                style={{\n                    height: 250\n                }}>\n                <BarChart reactionBus={this.reactionBus} data={data} xAxis=\"x\" yAxis={d => d.bar} />\n            </div>\n        </div>\n    );\n}"}]},{"name":"Button","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Button/Button","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype KindT = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\ntype Props = {\n  /** if no label prop, children used. text/elements inside the button */\n  children: any,\n  /** determine the style of the button */\n  kind: KindT,\n  /** theme object for the button */\n  theme: ThemeT,\n  /** style applied to profile photo wrapper */\n  testId: string,\n  /** If true, use hollow inverted button styles */\n  noFill?: boolean,\n  /** Pass in your onClick handler here */\n  onClick?: () => void,\n  /** className applied to button */\n  className?: string,\n  /** If true, button will be disbaled and click handlers will not fire */\n  disabled?: boolean,\n  /** If true, button is disabled and a spinner will be shown */\n  isLoading?: boolean,\n};\n\ntype DefaultProps = {\n  kind: string,\n  noFill: boolean,\n  disabled: boolean,\n  isLoading: boolean,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  kind: 'primary',\n  noFill: false,\n  disabled: false,\n  isLoading: false,\n  theme: {},\n};\n\n\n/**\n * This component generates a button element. It should be used for primary and secondary\n * type actions in the UI\n */\n\nexport default class Button extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Button';\n\n  getClassNames() {\n    const { className, kind, noFill, disabled, isLoading, theme } = this.props;\n    const classType = theme[kind];\n\n    const propBasedClasses = {\n      [theme.noFill]: noFill, /* if noFill === true */\n      [classType]: classType,  /* user defined classes */\n      [theme.disabled]: disabled || isLoading,\n    };\n\n    const classes = classNames(\n      'button', /* component name */\n      theme.button, /* localized styles */\n      className, /* user specified classNames */\n      propBasedClasses /* prop based classnames */\n    );\n\n    return classes;\n  }\n\n  render() {\n    const {\n      onClick,\n      disabled,\n      isLoading,\n      testId,\n      children,\n      ...others\n    } = this.props;\n\n    const props = {\n      ...others,\n      disabled,\n      'data-test-id': testId,\n      'data-anypoint-component': Button.displayName,\n      'className': this.getClassNames(),\n      'onClick': (disabled || isLoading) ? undefined : onClick,\n    };\n\n    // unnecesary props\n    delete props.noFill;\n    delete props.theme;\n\n    return <button {...props}>{ children }</button>;\n  }\n}\n","description":"This component generates a button element. It should be used for primary and secondary\ntype actions in the UI","displayName":"Button","methods":[{"name":"getClassNames","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"flowType":{"name":"any"},"required":true,"description":"if no label prop, children used. text/elements inside the button"},"kind":{"flowType":{"name":"union","raw":"'primary' | 'secondary' | 'tertiary' | 'danger'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'tertiary'"},{"name":"literal","value":"'danger'"}]},"required":true,"description":"determine the style of the button","defaultValue":{"value":"'primary'","computed":false}},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for the button","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"style applied to profile photo wrapper"},"noFill":{"flowType":{"name":"boolean"},"required":false,"description":"If true, use hollow inverted button styles","defaultValue":{"value":"false","computed":false}},"onClick":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Pass in your onClick handler here"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to button"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"If true, button will be disbaled and click handlers will not fire","defaultValue":{"value":"false","computed":false}},"isLoading":{"flowType":{"name":"boolean"},"required":false,"description":"If true, button is disabled and a spinner will be shown","defaultValue":{"value":"false","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Button/examples/1_ButtonUsage.js","requirePath":"../src/components/Button/examples/1_ButtonUsage.js","description":"","source":"import React, { Component } from 'react';\nimport { Button } from '../../';\n\n/**\n * @component ../../Button\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { clickCount: 0, noFill: 0 };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNoFill = this.handleNoFill.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ clickCount: this.state.clickCount + 1 });\n  }\n\n  handleNoFill() {\n    this.setState({ noFill: this.state.noFill + 1 });\n  }\n\n  render() {\n    return (\n      <div style={{ display: 'flex', height: 40, justifyContent: 'space-between', marginRight: 40 }}>\n        <Button kind=\"primary\" onClick={this.handleClick} id=\"primary-button\">\n          <span>Button Clicked {this.state.clickCount}</span>\n        </Button>\n        <Button kind=\"secondary\" noFill onClick={this.handleNoFill} id=\"primary-button\">\n          <span>No Fill Button Clicked {this.state.noFill}</span>\n        </Button>\n        <Button kind=\"danger\">\n          <span>Danger Button</span>\n        </Button>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                height: 40,\n                justifyContent: \"space-between\",\n                marginRight: 40\n            }}>\n            <Button kind=\"primary\" onClick={this.handleClick} id=\"primary-button\">\n                <span>Button Clicked{this.state.clickCount}</span>\n            </Button>\n            <Button kind=\"secondary\" noFill onClick={this.handleNoFill} id=\"primary-button\">\n                <span>No Fill Button Clicked{this.state.noFill}</span>\n            </Button>\n            <Button kind=\"danger\">\n                <span>Danger Button</span>\n            </Button>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Button/examples/2_All_Button_Examples.js","requirePath":"../src/components/Button/examples/2_All_Button_Examples.js","description":"","source":"import React, { Component } from 'react';\nimport { Button } from '../../';\n\n/**\n * @component ../../Button\n */\n\nexport default class YourApp extends Component {\n\n  render() {\n    return (\n      <div>\n        <h2>Normal Buttons</h2>\n        <div style={{ display: 'flex', height: 40, justifyContent: 'space-between', margin: '0 40px 20px 0' }}>\n          <Button kind=\"primary\">\n            Primary\n          </Button>\n          <Button kind=\"secondary\">\n            Secondary\n          </Button>\n          <Button kind=\"tertiary\">\n            Tertiary\n          </Button>\n          <Button kind=\"danger\">\n            Danger\n          </Button>\n        </div>\n        <h3>Normal Buttons Disabled</h3>\n        <div style={{ display: 'flex', height: 40, justifyContent: 'space-between', margin: '0 40px 20px 0' }}>\n          <Button kind=\"primary\" disabled>\n            Primary\n          </Button>\n          <Button kind=\"secondary\" disabled>\n            Secondary\n          </Button>\n          <Button kind=\"tertiary\" disabled>\n            Tertiary\n          </Button>\n          <Button kind=\"danger\" disabled>\n            Danger\n          </Button>\n        </div>\n        <h2>Buttons No Fill</h2>\n        <div style={{ display: 'flex', height: 40, justifyContent: 'space-between', margin: '0 40px 20px 0' }}>\n          <Button kind=\"primary\" noFill>\n            Primary\n          </Button>\n          <Button kind=\"secondary\" noFill>\n            Secondary\n          </Button>\n          <Button kind=\"tertiary\" noFill>\n            Tertiary\n          </Button>\n          <Button kind=\"danger\" noFill>\n            Danger\n          </Button>\n        </div>\n        <h2>Buttons No Fill Disabled</h2>\n        <div style={{ display: 'flex', height: 40, justifyContent: 'space-between', margin: '0 40px 20px 0' }}>\n          <Button kind=\"primary\" noFill disabled>\n            Primary\n          </Button>\n          <Button kind=\"secondary\" noFill disabled>\n            Secondary\n          </Button>\n          <Button kind=\"tertiary\" noFill disabled>\n            Tertiary\n          </Button>\n          <Button kind=\"danger\" noFill disabled>\n            Danger\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Normal Buttons</h2>\n            <div\n                style={{\n                    display: \"flex\",\n                    height: 40,\n                    justifyContent: \"space-between\",\n                    margin: \"0 40px 20px 0\"\n                }}>\n                <Button kind=\"primary\">Primary</Button>\n                <Button kind=\"secondary\">Secondary</Button>\n                <Button kind=\"tertiary\">Tertiary</Button>\n                <Button kind=\"danger\">Danger</Button>\n            </div>\n            <h3>Normal Buttons Disabled</h3>\n            <div\n                style={{\n                    display: \"flex\",\n                    height: 40,\n                    justifyContent: \"space-between\",\n                    margin: \"0 40px 20px 0\"\n                }}>\n                <Button kind=\"primary\" disabled>Primary</Button>\n                <Button kind=\"secondary\" disabled>Secondary</Button>\n                <Button kind=\"tertiary\" disabled>Tertiary</Button>\n                <Button kind=\"danger\" disabled>Danger</Button>\n            </div>\n            <h2>Buttons No Fill</h2>\n            <div\n                style={{\n                    display: \"flex\",\n                    height: 40,\n                    justifyContent: \"space-between\",\n                    margin: \"0 40px 20px 0\"\n                }}>\n                <Button kind=\"primary\" noFill>Primary</Button>\n                <Button kind=\"secondary\" noFill>Secondary</Button>\n                <Button kind=\"tertiary\" noFill>Tertiary</Button>\n                <Button kind=\"danger\" noFill>Danger</Button>\n            </div>\n            <h2>Buttons No Fill Disabled</h2>\n            <div\n                style={{\n                    display: \"flex\",\n                    height: 40,\n                    justifyContent: \"space-between\",\n                    margin: \"0 40px 20px 0\"\n                }}>\n                <Button kind=\"primary\" noFill disabled>Primary</Button>\n                <Button kind=\"secondary\" noFill disabled>Secondary</Button>\n                <Button kind=\"tertiary\" noFill disabled>Tertiary</Button>\n                <Button kind=\"danger\" noFill disabled>Danger</Button>\n            </div>\n        </div>\n    );\n}"}]},{"name":"Checkbox","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Checkbox/Checkbox","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype KindT = 'primary' | 'danger';\n\ntype Props = {\n  /** Set the text to display with the checkbox */\n  label: string,\n  /** If using within a form, this will be the name of the form field */\n  name: string,\n  /** theme object for Checkbox */\n  theme: ThemeT,\n  /** className applied to Checkbox component */\n  className?: string,\n  /** Set style for checkbox */\n  kind: KindT,\n  /** if true, checkbox will be disabled */\n  disabled?: boolean,\n  /** True for checked, false for not checked */\n  checked: boolean,\n  /** If true, show a bar in the checkbox (for Select all operations) */\n  indeterminate?: boolean,\n  /** Your event handler for when checkbox value is changed */\n  onChange: () => void,\n  /** if true, the input is focused */\n  isFocused?: boolean,\n  /** Autofocus attribute for input */\n  autoFocus: boolean,\n  /** tab index of the control */\n  tabindex?: number | string,\n  /** id applied to Checkbox component */\n  testId?: string,\n};\n\ntype State = {\n  checked: boolean,\n  isDirty: boolean,\n  isPending: boolean,\n  autoFocusState: boolean\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n  kind: string,\n  name: string,\n  disabled: boolean,\n  checked: boolean,\n  indeterminate: boolean,\n  onChange: () => void,\n  autoFocus: boolean,\n};\n\nconst defaultProps = {\n  theme: {},\n  kind: 'primary',\n  name: '',\n  disabled: false,\n  checked: false,\n  indeterminate: false,\n  onChange: () => {},\n  autoFocus: false,\n};\n\nconst formatInputName = function (name) {\n  return name.replace(/\\s+/g, '_').replace(/[\\W]+/g, '').toLowerCase();\n};\n\nexport default class Checkbox extends React.Component {\n  props: Props;\n  state: State;\n\n  name: string;\n  handleFocus: () => void;\n  handleBlur: () => void;\n  handleClick: () => void;\n  handleKeyDown: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Checkbox';\n\n  constructor(props: Props) {\n    super(props);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.state = {\n      checked: props.checked,\n      isDirty: false,\n      isPending: false,\n      autoFocusState: this.props.autoFocus\n    };\n    if (props.name) {\n      this.name = formatInputName(props.name);\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { checked } = this.props;\n\n    if (nextProps.checked !== checked) {\n      this.setState({ checked: nextProps.checked });\n    }\n  }\n\n  handleFocus() {\n    this.setState({\n      autoFocusState: true\n    });\n  }\n\n  handleBlur() {\n    this.setState({\n      autoFocusState: false\n    });\n  }\n\n  handleClick() {\n    if (this.props.disabled) {\n      return;\n    }\n    const checked = !this.state.checked;\n\n    const newState = {\n      checked,\n      isDirty: true,\n    };\n    this.setState(newState, () => {\n      this.props.onChange({ value: checked, state: this.state });\n    });\n  }\n\n  handleKeyDown(e: any) {\n    if (e.which === 32) { // space bar\n      this.handleClick();\n      e.preventDefault();\n    }\n  }\n\n  render() {\n    const { label, name, indeterminate, testId, className, isFocused,\n      kind, disabled, tabindex, theme } = this.props;\n\n    const { checked, autoFocusState } = this.state;\n    let tabIndexValue;\n    if (typeof tabindex !== 'undefined' && !disabled) {\n      tabIndexValue = tabindex;\n    }\n    let isFocusedStatus;\n    switch (isFocused) {\n      case true:\n        isFocusedStatus = isFocused;\n        break;\n      case false:\n        isFocusedStatus = isFocused;\n        break;\n      default:\n        isFocusedStatus = autoFocusState;\n    }\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n    return (\n      <span\n        className={classNames(\n          className,\n          theme.checkbox,\n          theme[kind],\n          disabled && theme.disabled,\n          indeterminate && theme.indeterminate,\n          isFocusedStatus ? theme['is-focused'] : ''\n        )}\n        data-test-id={testId}\n        data-anypoint-component={Checkbox.displayName}\n        onKeyDown={this.handleKeyDown}\n      >\n        <span className=\"checkbox-wrappe\">\n          <input\n            className=\"checkbox-input\"\n            id={name}\n            type=\"checkbox\"\n            checked={checked}\n            name={name}\n            disabled={disabled}\n            autoFocus={autoFocusState}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            tabIndex={tabIndexValue}\n            readOnly\n          />\n          <label onClick={this.handleClick} htmlFor={name}>\n            <span display-if={indeterminate} className={theme.bar} />\n            {label}\n          </label>\n        </span>\n      </span>\n    );\n  }\n}\n","description":"","displayName":"Checkbox","methods":[{"name":"handleFocus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleBlur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleClick","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleKeyDown","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null}],"props":{"label":{"flowType":{"name":"string"},"required":true,"description":"Set the text to display with the checkbox"},"name":{"flowType":{"name":"string"},"required":true,"description":"If using within a form, this will be the name of the form field","defaultValue":{"value":"''","computed":false}},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Checkbox","defaultValue":{"value":"{}","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Checkbox component"},"kind":{"flowType":{"name":"union","raw":"'primary' | 'danger'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'danger'"}]},"required":true,"description":"Set style for checkbox","defaultValue":{"value":"'primary'","computed":false}},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"if true, checkbox will be disabled","defaultValue":{"value":"false","computed":false}},"checked":{"flowType":{"name":"boolean"},"required":true,"description":"True for checked, false for not checked","defaultValue":{"value":"false","computed":false}},"indeterminate":{"flowType":{"name":"boolean"},"required":false,"description":"If true, show a bar in the checkbox (for Select all operations)","defaultValue":{"value":"false","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Your event handler for when checkbox value is changed","defaultValue":{"value":"() => {}","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input is focused"},"autoFocus":{"flowType":{"name":"boolean"},"required":true,"description":"Autofocus attribute for input","defaultValue":{"value":"false","computed":false}},"tabindex":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":false,"description":"tab index of the control"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Checkbox component"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Checkbox/examples/1_Checkbox_usage.js","requirePath":"../src/components/Checkbox/examples/1_Checkbox_usage.js","description":"","source":"import React from 'react';\nimport { Checkbox } from '../../';\n\n/**\n * @component ../../Checkbox\n */\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3>Normal Checkbox</h3>\n        <Checkbox\n          name=\"firstCheckbox\"\n          label=\"Do you want free cookies?\"\n          autoFocus\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3>Normal Checkbox</h3>\n            <Checkbox name=\"firstCheckbox\" label=\"Do you want free cookies?\" autoFocus />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Checkbox/examples/2_Checkbox_usage.js","requirePath":"../src/components/Checkbox/examples/2_Checkbox_usage.js","description":"","source":"import React from 'react';\nimport { Checkbox } from '../../';\n\n/**\n * @component ../../Checkbox\n */\nconst margin = { marginBottom: 20 };\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3>Normal</h3>\n        <div style={margin}>\n          <div style={margin}>\n            <Checkbox\n              name=\"checked\"\n              label=\"Checked\"\n              isFocused\n              checked\n            />\n          </div>\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"uncheked\"\n            label=\"Unchecked\"\n            checked={false}\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"indeterminate\"\n            label=\"Indeterminate\"\n            indeterminate\n          />\n        </div>\n        <h3>Disabled</h3>\n        <div style={margin}>\n          <Checkbox\n            name=\"checked2\"\n            label=\"Checked\"\n            checked\n            disabled\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"uncheked2\"\n            label=\"Unchecked\"\n            checked={false}\n            disabled\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"indeterminate2\"\n            label=\"Indeterminate\"\n            indeterminate\n            disabled\n          />\n        </div>\n        <h3>Danger</h3>\n        <div style={margin}>\n          <Checkbox\n            name=\"checked3\"\n            label=\"Checked\"\n            checked\n            kind=\"danger\"\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"uncheked3\"\n            label=\"Unchecked\"\n            checked={false}\n            kind=\"danger\"\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"indeterminate3\"\n            label=\"Indeterminate\"\n            indeterminate\n            kind=\"danger\"\n          />\n        </div>\n        <h3>Danger & Disabled</h3>\n        <div style={margin}>\n          <Checkbox\n            name=\"checked4\"\n            label=\"Checked\"\n            checked\n            disabled\n            kind=\"danger\"\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"uncheked4\"\n            label=\"Unchecked\"\n            checked={false}\n            disabled\n            kind=\"danger\"\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"indeterminate4\"\n            label=\"Indeterminate\"\n            indeterminate\n            disabled\n            kind=\"danger\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3>Normal</h3>\n            <div style={margin}>\n                <div style={margin}>\n                    <Checkbox name=\"checked\" label=\"Checked\" isFocused checked />\n                </div>\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"uncheked\" label=\"Unchecked\" checked={false} />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"indeterminate\" label=\"Indeterminate\" indeterminate />\n            </div>\n            <h3>Disabled</h3>\n            <div style={margin}>\n                <Checkbox name=\"checked2\" label=\"Checked\" checked disabled />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"uncheked2\" label=\"Unchecked\" checked={false} disabled />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"indeterminate2\" label=\"Indeterminate\" indeterminate disabled />\n            </div>\n            <h3>Danger</h3>\n            <div style={margin}>\n                <Checkbox name=\"checked3\" label=\"Checked\" checked kind=\"danger\" />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"uncheked3\" label=\"Unchecked\" checked={false} kind=\"danger\" />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"indeterminate3\" label=\"Indeterminate\" indeterminate kind=\"danger\" />\n            </div>\n            <h3>Danger & Disabled</h3>\n            <div style={margin}>\n                <Checkbox name=\"checked4\" label=\"Checked\" checked disabled kind=\"danger\" />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"uncheked4\" label=\"Unchecked\" checked={false} disabled kind=\"danger\" />\n            </div>\n            <div style={margin}>\n                <Checkbox\n                    name=\"indeterminate4\"\n                    label=\"Indeterminate\"\n                    indeterminate\n                    disabled\n                    kind=\"danger\" />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Checkbox/examples/3_Checkbox_usage.js","requirePath":"../src/components/Checkbox/examples/3_Checkbox_usage.js","description":"","source":"import React from 'react';\nimport { Checkbox } from '../../';\nimport { TextField } from '../../TextField';\n\n/**\n * @component ../../Checkbox\n */\nconst margin = { marginBottom: 20 };\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Tab Index (press tab to jump from one field to the next)</h2>\n        <div style={margin}>\n          <div style={margin}>\n            <TextField\n              placeholder=\"First Name\"\n              tabindex={1}  // eslint-disable-line\n            />\n          </div>\n        </div>\n        <div style={margin}>\n          <div style={margin}>\n            <TextField\n              placeholder=\"Last Name\"\n              tabindex={2}  // eslint-disable-line\n            />\n          </div>\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"checked5\"\n            label=\"Checked\"\n            checked\n            tabindex={3}  // eslint-disable-line\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"disabled5\"\n            label=\"Disabled\"\n            disabled\n            tabindex={4}  // eslint-disable-line\n          />\n        </div>\n        <div style={margin}>\n          <Checkbox\n            name=\"unchecked5\"\n            label=\"Unchecked\"\n            tabindex={5}  // eslint-disable-line\n          />\n        </div>\n        <div style={margin}>\n          <div style={margin}>\n            <TextField\n              placeholder=\"Email\"\n              tabindex={6} // eslint-disable-line\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Tab Index (press tab to jump from one field to the next)</h2>\n            <div style={margin}>\n                <div style={margin}>\n                    <TextField placeholder=\"First Name\" tabindex={1} />\n                </div>\n            </div>\n            <div style={margin}>\n                <div style={margin}>\n                    <TextField placeholder=\"Last Name\" tabindex={2} />\n                </div>\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"checked5\" label=\"Checked\" checked tabindex={3} />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"disabled5\" label=\"Disabled\" disabled tabindex={4} />\n            </div>\n            <div style={margin}>\n                <Checkbox name=\"unchecked5\" label=\"Unchecked\" tabindex={5} />\n            </div>\n            <div style={margin}>\n                <div style={margin}>\n                    <TextField placeholder=\"Email\" tabindex={6} />\n                </div>\n            </div>\n        </div>\n    );\n}"}]},{"name":"Column","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Column/Column","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport View from 'react-flexbox';\nimport { formatVerticalFlex, formatHorizontalFlex } from '../../utils/formatFlexAlign';\nimport type { AlignT } from '../../utils/align.type';\n\ntype Props = {\n  /**\n   Flexbox alignment. This prop takes in a string with two values:<br />\n   <pre>horizontalAlignment verticalAlignment</pre>\n   <h4>horizontalCases</h4>\n   <pre>'left', 'right', 'center', 'space-around', 'space-between'</pre>\n   <h4>verticalCases</h4>\n   <pre>'top', 'bottom', 'center', 'stretch', 'space-around', 'space-between'</pre>\n   */\n  align?: AlignT,\n  /** className applied to Column component */\n  className?: string,\n  /** id applied to Column component */\n  testId?: string,\n  /** style of the Column container */\n  style?: Object,\n  /** wrap of Row box, can be boolen */\n  wrap?: bool,\n  /** boolean, sets flex to '0 0 auto' */\n  auto?: bool,\n  /** output debug information and background highlighting */\n  debug?: bool,\n  /** Column contents */\n  children?: any,\n  /** theme object for Column */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  debug: bool,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  debug: false,\n  theme: {},\n};\n\nfunction mixingDebugMode() {\n  /* add outlines for flexbox debugging */\n  const debugStyle = {\n    background: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n    outline: '3px solid #F2BE24',\n  };\n  return debugStyle;\n}\n\n\n/**\n * Describe the purpose of Column here\n */\nexport default class Column extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Column';\n\n  getFlexAlignment(): Array<AlignT> {\n    const { align } = this.props;\n    /* default alignment for Row  */\n    const defaultAlignment = ['left', 'top'];\n    const alignment = (align) ? align.split(' ') : defaultAlignment;\n    const horizontal = alignment[0];\n    const vertical = alignment[1];\n    return [formatHorizontalFlex(horizontal), formatVerticalFlex(vertical)];\n  }\n\n  getFlexStyle() {\n    const { style } = this.props;\n    const horizontal = this.getFlexAlignment()[0];\n    const vertical = this.getFlexAlignment()[1];\n\n    // Do mapping specifically for column style\n    const defaultflexBasis = (style && style.flexBasis) ? style.flexBasis : 'initial';\n    const columnVert = (vertical === 'stretch') ? 'space-between' : vertical;\n    const alignmentStyle = {\n      alignItems: horizontal,\n      justifyContent: columnVert,\n      flexBasis: defaultflexBasis,\n    };\n    return alignmentStyle;\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      theme,\n      testId,\n      children,\n      wrap,\n      auto,\n      debug,\n      ...other\n    } = this.props;\n\n    const emptyObject = {};\n    const flexStyle = this.getFlexStyle();\n    const wrapStyle = (wrap) ? { flexWrap: 'wrap' } : emptyObject;\n    const debugMode = (debug) ? mixingDebugMode() : emptyObject;\n    const mergeStyles = { ...flexStyle, ...wrapStyle, ...style, ...debugMode };\n\n    // unnecesary props\n    delete other.align;\n\n    return (\n      <View\n        {...other}\n        className={classNames(className, theme.column, 'flex-column')}\n        data-test-id={testId}\n        data-anypoint-component={Column.displayName}\n        style={mergeStyles}\n        auto={auto}\n        column\n      >\n        {children}\n      </View>\n    );\n  }\n}\n","description":"Describe the purpose of Column here","displayName":"Column","methods":[{"name":"getFlexAlignment","docblock":null,"modifiers":[],"params":[],"returns":{"type":{"name":"Array","elements":[{"name":"AlignT"}],"raw":"Array<AlignT>"}}},{"name":"getFlexStyle","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"align":{"flowType":{"name":"AlignT"},"required":false,"description":"Flexbox alignment. This prop takes in a string with two values:<br />\n   <pre>horizontalAlignment verticalAlignment</pre>\n   <h4>horizontalCases</h4>\n   <pre>'left', 'right', 'center', 'space-around', 'space-between'</pre>\n   <h4>verticalCases</h4>\n   <pre>'top', 'bottom', 'center', 'stretch', 'space-around', 'space-between'</pre>"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Column component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Column component"},"style":{"flowType":{"name":"Object"},"required":false,"description":"style of the Column container"},"wrap":{"flowType":{"name":"boolean"},"required":false,"description":"wrap of Row box, can be boolen"},"auto":{"flowType":{"name":"boolean"},"required":false,"description":"boolean, sets flex to '0 0 auto'"},"debug":{"flowType":{"name":"boolean"},"required":false,"description":"output debug information and background highlighting","defaultValue":{"value":"false","computed":false}},"children":{"flowType":{"name":"any"},"required":false,"description":"Column contents"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Column","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Column/examples/1_column_usage.js","requirePath":"../src/components/Column/examples/1_column_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Column } from '../../';\n/**\n * @component ../../Column\n */\nconst columnStyle = { border: '3px solid #17BC65', padding: 10, height: 300 };\nconst childStyle = { border: '3px solid #48C1ED', padding: 10 };\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <Column align=\"center center\" style={columnStyle}>\n          <div style={childStyle}>Things inside a column is stacked</div>\n          <div style={childStyle}>Column Child 2</div>\n          <div style={childStyle}>Column Child 3</div>\n          <div style={childStyle}>Column Child 4</div>\n        </Column>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Column align=\"center center\" style={columnStyle}>\n                <div style={childStyle}>Things inside a column is stacked</div>\n                <div style={childStyle}>Column Child 2</div>\n                <div style={childStyle}>Column Child 3</div>\n                <div style={childStyle}>Column Child 4</div>\n            </Column>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Column/examples/2_column_usage.js","requirePath":"../src/components/Column/examples/2_column_usage.js","description":"","source":"import React, { Component } from 'react';\nimport Column from '../../Column';\n/**\n * @component ../../Column\n */\nexport default class YourApp extends Component { // eslint-disable-line\n  render() {\n    return (\n      <div style={{ padding: '0 0 30px 0' }}>\n        <h3>Column for layout</h3>\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'stretch' }}>\n          <Column style={{ border: '3px solid #48C1ED', padding: 10, width: '20%' }}>\n            <h6>Left Column</h6>\n            <span>Nav item 1</span>\n            <span>Nav item 2</span>\n            <span>Nav item 3</span>\n          </Column>\n          <Column width=\"55%\" align=\"center top\" style={{ border: '3px solid #48C1ED', padding: 10, width: '55%' }}>\n            <h6>Middle Column</h6>\n            <span>Lorem ipsum dolor sit amet, consectetur adipiscing</span>\n            <span>Pellentesque diam orci, sodales in blandit uthdgd</span>\n          </Column>\n\n          <Column align=\"left top\" style={{ border: '3px solid #48C1ED', padding: 10, width: '25%' }}>\n            <h6>Left Column</h6>\n            <span>Widget 1</span>\n            <span>Widget 2</span>\n            <span>Widget 3</span>\n          </Column>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                padding: \"0 0 30px 0\"\n            }}>\n            <h3>Column for layout</h3>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"stretch\"\n                }}>\n                <Column\n                    style={{\n                        border: \"3px solid #48C1ED\",\n                        padding: 10,\n                        width: \"20%\"\n                    }}>\n                    <h6>Left Column</h6>\n                    <span>Nav item 1</span>\n                    <span>Nav item 2</span>\n                    <span>Nav item 3</span>\n                </Column>\n                <Column\n                    width=\"55%\"\n                    align=\"center top\"\n                    style={{\n                        border: \"3px solid #48C1ED\",\n                        padding: 10,\n                        width: \"55%\"\n                    }}>\n                    <h6>Middle Column</h6>\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing</span>\n                    <span>Pellentesque diam orci, sodales in blandit uthdgd</span>\n                </Column>\n                <Column\n                    align=\"left top\"\n                    style={{\n                        border: \"3px solid #48C1ED\",\n                        padding: 10,\n                        width: \"25%\"\n                    }}>\n                    <h6>Left Column</h6>\n                    <span>Widget 1</span>\n                    <span>Widget 2</span>\n                    <span>Widget 3</span>\n                </Column>\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Column/examples/3_column_usage.js","requirePath":"../src/components/Column/examples/3_column_usage.js","description":"","source":"import React, { Component } from 'react';\nimport Column from '../../Column';\n/**\n * @component ../../Column\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div style={{ padding: '0 0 30px 0' }}>\n        <h3>Column and Row in Column</h3>\n        <div style={{ background: '#eee' }}>\n          <Column align=\"center center\" style={{ height: 300 }} >\n            <Column\n              align=\"left center\"\n              style={{ color: 'red', width: 200 }}\n              debug\n            >\n              <div\n                style={{\n                  display: 'flex',\n                  width: '100%',\n                  justifyContent: 'space-around',\n                  alignItems: 'center',\n                  background: 'rgb(104, 110, 47)',\n                  outline: 'rgb(242, 190, 36) solid 3px'\n                }}\n              >\n                <div>Stuff </div>\n                <div>In </div>\n                <div>a</div>\n                <div>Row</div>\n              </div>\n            </Column>\n            <Column\n              auto\n              align=\"center top\"\n              style={{ color: 'red', width: 200 }}\n              debug\n            >\n              Column with param - auto\n            </Column>\n            <div>Stacked</div>\n            <div>Stacked</div>\n          </Column>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                padding: \"0 0 30px 0\"\n            }}>\n            <h3>Column and Row in Column</h3>\n            <div\n                style={{\n                    background: \"#eee\"\n                }}>\n                <Column\n                    align=\"center center\"\n                    style={{\n                        height: 300\n                    }}>\n                    <Column\n                        align=\"left center\"\n                        style={{\n                            color: \"red\",\n                            width: 200\n                        }}\n                        debug>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                width: \"100%\",\n                                justifyContent: \"space-around\",\n                                alignItems: \"center\",\n                                background: \"rgb(104, 110, 47)\",\n                                outline: \"rgb(242, 190, 36) solid 3px\"\n                            }}>\n                            <div>Stuff</div>\n                            <div>In</div>\n                            <div>a</div>\n                            <div>Row</div>\n                        </div>\n                    </Column>\n                    <Column\n                        auto\n                        align=\"center top\"\n                        style={{\n                            color: \"red\",\n                            width: 200\n                        }}\n                        debug>Column with param - auto</Column>\n                    <div>Stacked</div>\n                    <div>Stacked</div>\n                </Column>\n            </div>\n        </div>\n    );\n}"}]},{"name":"ContextMenu","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ContextMenu/ContextMenu","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport Popover from '../Popover';\n\ntype Props = {\n  /** className applied to ContextMenu component */\n  className?: string,\n  /** id applied to ContextMenu component */\n  testId?: string,\n  /** options applied to ContextMenu component */\n  options: Array<any>,\n  /** type for show options on ContextMenu component */\n  triggerOn: Array<string>,\n  /** position for show option on ContextMenu component */\n  popupPosition: string,\n  /** anchor position for show option on ContextMenu component */\n  anchorPosition: string,\n  /** content for ContextMenu component */\n  children: any,\n  appendToBody: boolean,\n  /** theme object for ContextMenu */\n  theme: ThemeT,\n};\n\ntype State = {\n  isSiblingMenuOpen: boolean\n};\n\ntype DefaultProps = {\n  children: any,\n  options: Array<any>,\n  triggerOn: Array<string>,\n  popupPosition: string,\n  anchorPosition: string,\n  appendToBody: boolean,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  children: null,\n  options: [],\n  triggerOn: ['hover', 'click'],\n  popupPosition: 'tl',\n  anchorPosition: 'bl',\n  appendToBody: true,\n  theme: {},\n};\n\n/**\n * Describe the purpose of ContextMenu here\n */\nexport default class ContextMenu extends React.Component {\n  props: Props;\n  state: State;\n\n  renderOptions: any;\n  siblingMenuToggleRef: any;\n  handleToggleSiblingMenu: () => void;\n  handleClickOutside: () => void;\n  renderOptions: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'ContextMenu';\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { isSiblingMenuOpen: false };\n    this.handleToggleSiblingMenu = this.handleToggleSiblingMenu.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.renderOptions = this.renderOptions.bind(this);\n  }\n\n  handleClickOutside(e: any) {\n    if (e.target !== this.siblingMenuToggleRef &&\n      !this.siblingMenuToggleRef.contains(e.target)) {\n      this.handleToggleSiblingMenu();\n    }\n  }\n\n  handleToggleSiblingMenu() {\n    if (this.props.triggerOn.indexOf('click') !== -1) {\n      const isSiblingMenuOpen = !this.state.isSiblingMenuOpen;\n      this.setState({ isSiblingMenuOpen });\n      if (isSiblingMenuOpen) {\n        document.body.addEventListener('click', this.handleClickOutside, false);\n      } else {\n        document.body.removeEventListener('click', this.handleClickOutside, false);\n      }\n    }\n  }\n\n  renderOptions(options: Array<Object>) {\n    const { className, theme, testId } = this.props;\n    const classes = classNames(theme.menu, className);\n\n    return (\n      <ul className={classes}>\n        {options.map((option, index) => {\n          const testIdProp = testId &&\n            `${testId}-${option.label ? option.label.replace(/\\s+/g, '-').toLowerCase() :\n              `option-${index}`}`;\n          const optionClassName = classNames(theme.button, option.disabled && theme.disabled);\n          const optionAction = () => {\n            option.onClick();\n            if (!this.props.appendToBody) {\n              this.setState({ isSiblingMenuOpen: false });\n            }\n          };\n          const button = option.href ? (\n            <a\n              className={optionClassName}\n              data-test-id={testIdProp}\n              {...option}\n              href={!option.disabled ? option.href : undefined}\n            >\n              {option.label}\n            </a>\n            ) : (\n              <button\n                className={optionClassName}\n                data-test-id={testIdProp}\n                {...option}\n                onClick={!option.disabled ? optionAction : undefined}\n              >\n                {option.label}\n              </button>\n            );\n\n          return (\n            <li className={theme.option} key={index}>{button}</li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      children,\n      options,\n      triggerOn,\n      popupPosition,\n      anchorPosition,\n      appendToBody,\n      ...props\n    } = this.props;\n\n    const optionsContent = this.renderOptions(options);\n    const content = (\n      <div data-test-id={testId && `content-${testId}`}>\n        {children}\n      </div>\n    );\n\n    return (\n      <div\n        className={classNames(className, theme.contextMenu)}\n        data-test-id={testId}\n        data-anypoint-component={ContextMenu.displayName}\n      >\n        {\n          appendToBody\n          ?\n            <Popover\n              content={optionsContent}\n              closeOnClickInside\n              triggerOn={triggerOn}\n              popupPosition={popupPosition}\n              anchorPosition={anchorPosition}\n              {...props}\n            >\n              {content}\n            </Popover>\n          :\n            <div\n              className={\n                classNames(\n                  theme.menuSibling,\n                  ...(popupPosition.split('').map((p, i) => theme[`menu-sibling-popup-position-${p}-${i}`])),\n                  ...(anchorPosition.split('').map((p, i) => theme[`menu-sibling-anchor-position-${p}-${i}`])),\n                  this.state.isSiblingMenuOpen ? theme['menu-sibling-state-is-open'] : null,\n                  ...(triggerOn.map(h => theme[`menu-sibling-handle-${h}`]))\n                )\n              }\n              data-test-id={testId && `${testId}-menu-sibling`}\n            >\n\n              <button\n                className={theme['menu-sibling-toggle']}\n                onClick={this.handleToggleSiblingMenu}\n                ref={r => (this.siblingMenuToggleRef = r)}\n                data-test-id={testId && `${testId}-menu-sibling-toggle`}\n              >\n                {content}\n              </button>\n              <div\n                className={theme['menu-sibling-options']}\n                data-test-id={testId && `${testId}-menu-sibling-options`}\n              >\n                {optionsContent}\n              </div>\n            </div>\n        }\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of ContextMenu here","displayName":"ContextMenu","methods":[{"name":"handleClickOutside","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null},{"name":"handleToggleSiblingMenu","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderOptions","docblock":null,"modifiers":[],"params":[{"name":"options","type":{"name":"Array","elements":[{"name":"Object"}],"raw":"Array<Object>","alias":"Array"}}],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to ContextMenu component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to ContextMenu component"},"options":{"flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"},"required":true,"description":"options applied to ContextMenu component","defaultValue":{"value":"[]","computed":false}},"triggerOn":{"flowType":{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>"},"required":true,"description":"type for show options on ContextMenu component","defaultValue":{"value":"['hover', 'click']","computed":false}},"popupPosition":{"flowType":{"name":"string"},"required":true,"description":"position for show option on ContextMenu component","defaultValue":{"value":"'tl'","computed":false}},"anchorPosition":{"flowType":{"name":"string"},"required":true,"description":"anchor position for show option on ContextMenu component","defaultValue":{"value":"'bl'","computed":false}},"children":{"flowType":{"name":"any"},"required":true,"description":"content for ContextMenu component","defaultValue":{"value":"null","computed":false}},"appendToBody":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"true","computed":false}},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for ContextMenu","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ContextMenu/examples/1_ContextMenu_usage.js","requirePath":"../src/components/ContextMenu/examples/1_ContextMenu_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { ContextMenu } from '../../';\nimport { Column } from '../../Column';\nimport { Row } from '../../Row';\n\n/**\n * @component ../../ContextMenu\n */\nconst right = { textAlign: 'right' };\nconst columnStyle = { padding: 10, height: 100 };\nconst options = [\n  { label: 'action 1', href: 'http://www.google.com', target: '_blank' },\n  { label: 'action 2', onClick: () => { alert('Clicked to action 2'); } },\n  { label: 'action 3', onClick: () => { alert('Clicked to action 2'); } },\n  { label: 'Disabled action', onClick: () => { alert('Clicked to action 2'); }, disabled: 'disabled' }\n];\n\nexport default class YourApp extends Component {\n\n  render() {\n    return (\n      <Row>\n        <Column align=\"center center\" style={columnStyle}>\n          <ContextMenu options={options}>Hover Me</ContextMenu>\n        </Column>\n        <Column align=\"center center\" style={columnStyle}>\n          <ContextMenu\n            triggerOn={['click']}\n            popupPosition=\"br\"\n            anchorPosition=\"tr\"\n            options={options}\n            testId=\"test\"\n          >\n            <div style={right}>Click Me</div>\n          </ContextMenu>\n        </Column>\n      </Row>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <Row>\n            <Column align=\"center center\" style={columnStyle}>\n                <ContextMenu options={options}>Hover Me</ContextMenu>\n            </Column>\n            <Column align=\"center center\" style={columnStyle}>\n                <ContextMenu\n                    triggerOn={[\"click\"]}\n                    popupPosition=\"br\"\n                    anchorPosition=\"tr\"\n                    options={options}\n                    testId=\"test\">\n                    <div style={right}>Click Me</div>\n                </ContextMenu>\n            </Column>\n        </Row>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ContextMenu/examples/2_ContextMenu_usage.js","requirePath":"../src/components/ContextMenu/examples/2_ContextMenu_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { ContextMenu } from '../../';\nimport { Column } from '../../Column';\nimport { Row } from '../../Row';\nimport { Select } from '../../Select';\n\n/**\n * @component ../../ContextMenu\n */\n\nconst columnStyle = { padding: 10 };\nconst exampleSquareStyle = {\n  width: '190px',\n  height: '120px',\n  backgroundColor: '#F4F5F6',\n  textAlign: 'center',\n};\nconst options = [\n  { label: 'action 1', href: 'http://www.google.com', target: '_blank' },\n  { label: 'action 2', onClick: () => { alert('Clicked to action 2'); } },\n  { label: 'action 3', onClick: () => { alert('Clicked to action 2'); } },\n  { label: 'Disabled action', onClick: () => { alert('Clicked to action 2'); }, disabled: 'disabled' }\n];\n\nconst xAxis = [\n  { value: 'l', label: 'l' },\n  { value: 'r', label: 'r' },\n  { value: 'c', label: 'c' },\n];\nconst yAxis = [\n  { value: 't', label: 't' },\n  { value: 'b', label: 'b' },\n  { value: 'c', label: 'c' }\n];\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorPosition: {\n        x: 'c',\n        y: 'c',\n      },\n      popupPosition: {\n        x: 'c',\n        y: 'c',\n      }\n    };\n  }\n\n  setAnchorPosition(x, y) {\n    const { anchorPosition } = this.state;\n    anchorPosition.x = x || anchorPosition.x;\n    anchorPosition.y = y || anchorPosition.y;\n    this.setState({ anchorPosition });\n  }\n\n  setPopupPosition(x, y) {\n    const { popupPosition } = this.state;\n    popupPosition.x = x || popupPosition.x;\n    popupPosition.y = y || popupPosition.y;\n    this.setState({ popupPosition });\n  }\n\n  render() {\n    const { anchorPosition, popupPosition } = this.state;\n    const anchorPositionString = `${anchorPosition.y}${anchorPosition.x}`;\n    const popupPositionString = `${popupPosition.y}${popupPosition.x}`;\n    return (\n      <div>\n        <h3>Demo for different position with appendToBody(default) and without</h3>\n        <Row>\n          <Column align=\"center center\" style={columnStyle}>\n            <ContextMenu\n              popupPosition={popupPositionString}\n              anchorPosition={anchorPositionString}\n              options={options}\n              testId=\"test\"\n            >\n              <Row>\n                <Column align=\"center center\" style={exampleSquareStyle}>\n                  appendToBody = true\n                  (default)\n                </Column>\n              </Row>\n            </ContextMenu>\n          </Column>\n          <Column align=\"center center\" style={columnStyle}>\n            <ContextMenu\n              popupPosition={popupPositionString}\n              anchorPosition={anchorPositionString}\n              options={options}\n              appendToBody={false}\n              testId=\"test\"\n            >\n              <Row>\n                <Column align=\"center center\" style={exampleSquareStyle}>\n                  appendToBody = false\n                </Column>\n              </Row>\n            </ContextMenu>\n          </Column>\n        </Row>\n        <Row>\n          <Column align=\"center center\" style={columnStyle}>\n            <Row>\n              Anchor position (<strong>{anchorPositionString}</strong>):\n              <Select\n                options={yAxis}\n                value={anchorPosition.y}\n                onChange={v => this.setAnchorPosition(null, v.value)}\n              />\n              <Select\n                options={xAxis}\n                value={anchorPosition.x}\n                onChange={v => this.setAnchorPosition(v.value)}\n              />\n            </Row>\n          </Column>\n        </Row>\n        <Row>\n          <Column align=\"center center\" style={columnStyle}>\n            <Row>\n              Popup position (<strong>{popupPositionString}</strong>):\n              <Select\n                options={yAxis}\n                value={popupPosition.y}\n                onChange={v => this.setPopupPosition(null, v.value)}\n              />\n              <Select\n                options={xAxis}\n                value={popupPosition.x}\n                onChange={v => this.setPopupPosition(v.value)}\n              />\n            </Row>\n          </Column>\n        </Row>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        anchorPosition,\n        popupPosition\n    } = this.state;\n\n    const anchorPositionString = `${anchorPosition.y}${anchorPosition.x}`;\n    const popupPositionString = `${popupPosition.y}${popupPosition.x}`;\n\n    return (\n        <div>\n            <h3>Demo for different position with appendToBody(default) and without</h3>\n            <Row>\n                <Column align=\"center center\" style={columnStyle}>\n                    <ContextMenu\n                        popupPosition={popupPositionString}\n                        anchorPosition={anchorPositionString}\n                        options={options}\n                        testId=\"test\">\n                        <Row>\n                            <Column align=\"center center\" style={exampleSquareStyle}>appendToBody = true\n                                                  (default)</Column>\n                        </Row>\n                    </ContextMenu>\n                </Column>\n                <Column align=\"center center\" style={columnStyle}>\n                    <ContextMenu\n                        popupPosition={popupPositionString}\n                        anchorPosition={anchorPositionString}\n                        options={options}\n                        appendToBody={false}\n                        testId=\"test\">\n                        <Row>\n                            <Column align=\"center center\" style={exampleSquareStyle}>appendToBody = false</Column>\n                        </Row>\n                    </ContextMenu>\n                </Column>\n            </Row>\n            <Row>\n                <Column align=\"center center\" style={columnStyle}>\n                    <Row>Anchor position (<strong>{anchorPositionString}</strong>):<Select\n                            options={yAxis}\n                            value={anchorPosition.y}\n                            onChange={v => this.setAnchorPosition(null, v.value)} />\n                        <Select\n                            options={xAxis}\n                            value={anchorPosition.x}\n                            onChange={v => this.setAnchorPosition(v.value)} />\n                    </Row>\n                </Column>\n            </Row>\n            <Row>\n                <Column align=\"center center\" style={columnStyle}>\n                    <Row>Popup position (<strong>{popupPositionString}</strong>):<Select\n                            options={yAxis}\n                            value={popupPosition.y}\n                            onChange={v => this.setPopupPosition(null, v.value)} />\n                        <Select\n                            options={xAxis}\n                            value={popupPosition.x}\n                            onChange={v => this.setPopupPosition(v.value)} />\n                    </Row>\n                </Column>\n            </Row>\n        </div>\n    );\n}"}]},{"name":"Detail","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Detail/Detail","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport Tooltip from '../Tooltip';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Button from '../Button';\nimport deleteIcon from './deleteIcon';\n\ntype Props = {\n  /** className applied to Detail component */\n  className?: string,\n  /** className applied to header of Detail component */\n  headerClass?: string,\n  /** id applied to Detail component */\n  testId?: string,\n  /** title of Detail component */\n  title: string,\n  /** Icon for primary action */\n  primaryActionIcon?: Object,\n  /** Action for primary Icon */\n  primaryAction?: any,\n  /** Actions for Detail component */\n  actions?: Array<any>,\n  /** Contents of the detail pane after top section */\n  children: any,\n  /** theme object for Detail */\n  theme: ThemeT,\n};\n\ntype State = {\n  icon: any,\n  action: any\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nconst emptyFunction = () => {};\n\n/**\n * Describe the purpose of Detail here\n */\nexport default class Detail extends React.Component {\n  props: Props;\n  state: State;\n\n  header: {\n    contains: any\n  };\n\n  overlay: {\n    contains: any\n  };\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Detail';\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      icon: undefined,\n      action: undefined,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.outsideClickHandler);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.outsideClickHandler);\n  }\n\n  outsideClickHandler = (e: Event) => {\n    const { target } = e;\n    const { action } = this.state;\n\n    // dismiss the confirm overlay when clicked outside\n    if (action && !(this.overlay.contains(target) || this.header.contains(target))) {\n      this.setState({\n        action: undefined,\n      });\n    }\n  }\n\n  handleHeaderClick = (e: any) => {\n    const { primaryAction } = this.props;\n    if (!e.isDefaultPrevented() && primaryAction) {\n      primaryAction();\n    }\n  }\n\n  handleCancelClick = () => {\n    this.setState({\n      action: undefined\n    });\n  }\n\n  confirmAndPerformAction(icon: any, action: any) {\n    return () => this.setState({\n      icon,\n      action: () => {\n        action();\n        this.setState({\n          action: undefined,\n        });\n      }\n    });\n  }\n\n  renderActions() {\n    const { actions, theme, testId } = this.props;\n    if (!actions) {\n      return false;\n    }\n\n    return actions.map((action, index) => {\n      const handler = action.confirmationRequired\n        ?\n        this.confirmAndPerformAction(action.icon, action.onClick)\n        :\n        action.onClick || emptyFunction;\n      const tooltip = action.label || '';\n\n      return (\n        <span className={theme['secondary-actions']} key={index}>\n          <Tooltip\n            content={tooltip}\n            position=\"top\"\n          >\n            <span // eslint-disable-line\n              data-test-id={testId && `${testId}-icon-${index}`}\n              onClick={(e: Event) => { handler(); e.preventDefault(); }}\n            >\n              {action.icon}\n            </span>\n          </Tooltip>\n        </span>\n      );\n    });\n  }\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      title,\n      actions,\n      primaryActionIcon,\n      primaryAction,\n      headerClass,\n      ...props\n    } = this.props;\n\n    const { action } = this.state;\n    const actionCount = (actions) ? actions.length : 0;\n    const actionClass = primaryAction ? theme['has-main-action'] : '';\n    const fullWidth = actionCount ? '' : theme['full-width'];\n    const actionActiveClass = action ? theme['action-active'] : '';\n\n    return (\n      <div\n        className={classNames(className, theme.detail)}\n        data-test-id={testId}\n        data-anypoint-component={Detail.displayName}\n        {...props}\n      >\n        <div // eslint-disable-line\n          ref={node => (this.header = node)}\n          className={classNames(headerClass, theme['detail-header'], actionClass)}\n          onClick={this.handleHeaderClick}\n        >\n          <div\n            className={classNames(fullWidth, theme['detail-header-title'])}\n          >\n            <Row align=\"left\">\n              <h2>\n                {title}\n              </h2>\n              <span\n                data-test-id={testId && `${testId}-primary-action-icon`}\n                className={theme['primary-action-icon']}\n                display-if={primaryActionIcon}\n                name={primaryActionIcon}\n              >\n                {primaryActionIcon}\n              </span>\n            </Row>\n          </div>\n          <div className={theme['detail-actions']}>\n            <div>\n              {this.renderActions()}\n            </div>\n          </div>\n        </div>\n\n        <div\n          className={classNames(actionActiveClass, theme['confirmation-overlay'])}\n          ref={node => (this.overlay = node)}\n        >\n          <Row align=\"space-between\">\n            <Column align=\"left\">\n              <Row align=\"left\">\n                <span className={theme['confirm-action-icon']}>{deleteIcon()}</span>\n                <h3>Are you sure?</h3>\n              </Row>\n            </Column>\n            <Column align=\"right\">\n              <Row>\n                <Button\n                  data-test-id={testId && `${testId}-confirm-action`}\n                  className={theme['confirm-actions-button']}\n                  style={{ color: '#fff' }}\n                  kind=\"tertiary\"\n                  onClick={action}\n                  noFill\n                >\n                  Yes\n                </Button>\n                <Button\n                  data-test-id={testId && `${testId}-cancel-action`}\n                  className={theme['confirm-actions-button']}\n                  style={{ color: '#fff' }}\n                  kind=\"tertiary\"\n                  onClick={this.handleCancelClick}\n                  noFill\n                >\n                  No\n                </Button>\n              </Row>\n            </Column>\n          </Row>\n        </div>\n        <div data-test-id={testId && `${testId}-detail-content`} className={theme['detail-inner']}>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Detail here","displayName":"Detail","methods":[{"name":"confirmAndPerformAction","docblock":null,"modifiers":[],"params":[{"name":"icon","type":{"name":"any"}},{"name":"action","type":{"name":"any"}}],"returns":null},{"name":"renderActions","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Detail component"},"headerClass":{"flowType":{"name":"string"},"required":false,"description":"className applied to header of Detail component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Detail component"},"title":{"flowType":{"name":"string"},"required":true,"description":"title of Detail component"},"primaryActionIcon":{"flowType":{"name":"Object"},"required":false,"description":"Icon for primary action"},"primaryAction":{"flowType":{"name":"any"},"required":false,"description":"Action for primary Icon"},"actions":{"flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"},"required":false,"description":"Actions for Detail component"},"children":{"flowType":{"name":"any"},"required":true,"description":"Contents of the detail pane after top section"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Detail","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Detail/examples/1_Detail_usage.js","requirePath":"../src/components/Detail/examples/1_Detail_usage.js","description":"","source":"import React from 'react';\nimport { Detail } from '../../';\nimport EmptyResult from '../../EmptyResult/EmptyResult';\n\n/**\n * @component ../../Detail\n */\n\nconst IconDelete = () => (\n  <svg viewBox=\"0 0 26 26\" style={{ height: 25, width: 25, maxHeight: 25, maxWidth: 25 }}>\n    <path d=\"M20 7h1v15.744C18.479 23.558 15.792 24 13 24s-5.479-.442-8-1.256V7h1v14.78h14V7zm2.747-1H3.253c.527-.733 1.135-1.404 1.811-2H9V2.306C10.304 2.105 11.64 2 13 2c1.36 0 2.696.105 4 .306V4h3.936c.676.596 1.284 1.267 1.811 2zM10 4h6v-.801C15.01 3.08 14.011 3 13 3s-2.009.08-3 .198V4zm0 15V9.037H9V19h1zm3.5 0V9.037h-1V19h1zm3.5 0V9.037h-1V19h1z\" />\n  </svg>\n);\n\nconst IconDuplicate = () => (\n  <svg viewBox=\"0 0 26 26\" style={{ height: 25, width: 25, maxHeight: 25, maxWidth: 25 }}>\n    <path d=\"M13.904 12H10.9v-1h3.003L13.9 8h1v3h3v1h-3v2.992l-.994.008-.002-3zM3.9 7h-1v16h16v-1h-15V7zm19-4v17h-17V3h17zm-1 1h-15v15h15V4z\" />\n  </svg>\n);\n\nconst EditButton = () => (\n  <svg viewBox=\"0 0 16 16\" style={{ height: 16, width: 16, maxHeight: 16, maxWidth: 16 }} onClick={() => console.log('click')}>\n    <path d=\"M12 14H3V5h4.288l.7-1H2v11h11V9.047l-1 1.428z\" />\n    <path d=\"M6.656 12l2.458-.895 5.874-8.385c-.369-.333-.762-.646-1.176-.936-.414-.29-.842-.551-1.282-.784L6.656 9.385V12zm1-2.3l4.371-6.238.815.58-4.367 6.231-.819.299V9.7z\" />\n  </svg>\n);\n\nconst actions = [\n  {\n    icon: IconDuplicate(),\n    label: 'Duplicate',\n    onClick: () => console.log('Duplicate'),\n  },\n  {\n    icon: IconDelete(),\n    label: 'Delete',\n    onClick: () => console.log('Delete'),\n    confirmationRequired: true,\n  },\n];\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"handleAction\"] }] */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userWantsCookies: false };\n  }\n\n  handleAction() {\n    console.log('Action performed!!!');\n  }\n\n  render() {\n    return (\n      <div style={{ width: 460 }}>\n        <Detail\n          title=\"Alert Aapiosfioanfioasnfoinasiofnsaoifnosai 101\"\n          primaryActionIcon={EditButton()}\n          primaryAction={this.handleAction}\n          actions={actions}\n        >\n          <EmptyResult message=\"Select an alert to see more details\" />\n        </Detail>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                width: 460\n            }}>\n            <Detail\n                title=\"Alert Aapiosfioanfioasnfoinasiofnsaoifnosai 101\"\n                primaryActionIcon={EditButton()}\n                primaryAction={this.handleAction}\n                actions={actions}>\n                <EmptyResult message=\"Select an alert to see more details\" />\n            </Detail>\n        </div>\n    );\n}"}]},{"name":"DropdownMenu","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/DropdownMenu/DropdownMenu","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { TypeCheck } from '@mulesoft/anypoint-utils';\nimport Menu from '../Menu';\nimport MenuItem from '../MenuItem';\nimport DropdownMenuIcon from './DropdownMenuIcon';\n\ntype Props = {\n  /** className applied to DropdownMenu */\n  className?: string,\n  /** Placeholder */\n  placeholder: string,\n  /** The array of strings/objects to display in the menu */\n  options: any[],\n  /** An optional initial value */\n  value?: any,\n  /** Called when a new item is selected */\n  onChange: () => void,\n  /** Renderer(func) or property name(string) to determine what's being as option */\n  labelKey: any,\n  /** name of property to be use as values when an object is selected */\n  valueKey: string,\n  /** style applied to DropdownMenu */\n  testId: string,\n  /** theme object for DropdownMenu */\n  theme: ThemeT,\n};\n\ntype State = {\n  selected: any,\n  isDropdownOpen: boolean,\n}\ntype DefaultProps = {\n  onChange: () => void,\n  placeholder: string,\n  labelKey: string,\n  theme: ThemeT,\n  options: any[],\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  placeholder: 'Select',\n  labelKey: 'label',\n  theme: {},\n  options: [],\n};\n\n/**\n * The DropdownMenu shows a simple dropdown with strings\n */\n\nexport default class DropdownMenu extends Component {\n\n  props: Props;\n  state: State;\n\n  handleChange: () => void;\n  handleOpen: () => void;\n  handleClose: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'DropdownMenu';\n\n  static renderItemLabel(labelKey: any, selected: any) {\n    return (\n      <span>\n        {\n          TypeCheck.isFunction(labelKey) ?\n            labelKey(selected) : ((selected && selected[labelKey]) || selected)\n        }\n      </span>\n    );\n  }\n\n  static findSelected(value: any, options: any, valueKey: any) {\n    return options.filter(o => (valueKey && o[valueKey] === value) || o === value)[0];\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      selected: DropdownMenu.findSelected(props.value, props.options, props.valueKey),\n      isDropdownOpen: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { value, options, valueKey } = this.props;\n\n    if ((nextProps.value && nextProps.value !== value) ||\n      (nextProps.options && nextProps.options !== options)) {\n      this.setState({\n        selected: DropdownMenu.findSelected(nextProps.value, nextProps.options, valueKey)\n      });\n    }\n  }\n\n  addOutsideListeners() {\n    document.body.addEventListener('click', this.handleClose, true);\n  }\n\n  removeOutsideListeners() {\n    document.body.removeEventListener('click', this.handleClose, true);\n  }\n\n  handleChange(value: any) {\n    const { valueKey } = this.props;\n    this.setState({ selected: value, isDropdownOpen: false }, () => {\n      if (typeof value.onClick === 'function') { value.onClick(); }\n      this.props.onChange({ value: valueKey ? value[valueKey] : value });\n      this.removeOutsideListeners();\n    });\n  }\n\n  handleOpen() {\n    this.setState({\n      isDropdownOpen: true,\n    });\n    this.addOutsideListeners();\n  }\n\n  handleClose() {\n    this.setState({\n      isDropdownOpen: false,\n    });\n    this.removeOutsideListeners();\n  }\n\n  render() {\n    const { options, labelKey, placeholder, className, testId, theme } = this.props;\n    const { selected, isDropdownOpen } = this.state;\n    const classes = classNames(\n      theme.dropdownMenu,\n      isDropdownOpen && theme.dropdownMenuOpen,\n      className,\n    );\n\n    return (\n      <div\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={DropdownMenu.displayName}\n      >\n        <div  // eslint-disable-line\n          className={theme.DropdownMenuToggle}\n          onClick={this.handleOpen}\n        >\n          {selected ? DropdownMenu.renderItemLabel(labelKey, selected) : null}\n          <span display-if={!selected}>{placeholder}</span>\n          <DropdownMenuIcon className={theme.DropdownMenuIcon} />\n        </div>\n        <div className={theme.DropdownMenuContent}>\n          <Menu className={theme.DropdownMenuMenu}>\n            <div className={theme.headItem}>\n              {selected ?\n                DropdownMenu.renderItemLabel(labelKey, selected) :\n                (\n                  <span>\n                    {placeholder}\n                  </span>\n                )\n              }\n              <DropdownMenuIcon\n                className={classNames(theme.DropdownMenuIcon, theme.DropdownMenuIconFlip)}\n              />\n            </div>\n            <ul data-test-id={testId && `${testId}-list`} className={`${theme.list} ${options.length > 3 ? theme.hasScroll : ''}`}>\n              {options.map((option, index) => {\n                const primaryText = TypeCheck.isFunction(labelKey) ?\n                  labelKey(option) : ((option && option[labelKey]) || option);\n                return (\n                  <MenuItem\n                    data-test-id={testId && `${testId}-list-item`}\n                    primaryText={primaryText}\n                    onClick={() => this.handleChange(option)}\n                    key={index}\n                    icon={option.icon}\n                  >\n                    {primaryText}\n                  </MenuItem>\n                );\n              })}\n            </ul>\n          </Menu>\n        </div>\n      </div>\n    );\n  }\n}\n","description":"The DropdownMenu shows a simple dropdown with strings","displayName":"DropdownMenu","methods":[{"name":"renderItemLabel","docblock":null,"modifiers":["static"],"params":[{"name":"labelKey","type":{"name":"any"}},{"name":"selected","type":{"name":"any"}}],"returns":null},{"name":"findSelected","docblock":null,"modifiers":["static"],"params":[{"name":"value","type":{"name":"any"}},{"name":"options","type":{"name":"any"}},{"name":"valueKey","type":{"name":"any"}}],"returns":null},{"name":"addOutsideListeners","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"removeOutsideListeners","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"value","type":{"name":"any"}}],"returns":null},{"name":"handleOpen","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleClose","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to DropdownMenu"},"placeholder":{"flowType":{"name":"string"},"required":true,"description":"Placeholder","defaultValue":{"value":"'Select'","computed":false}},"options":{"flowType":{"name":"unknown"},"required":true,"description":"The array of strings/objects to display in the menu","defaultValue":{"value":"[]","computed":false}},"value":{"flowType":{"name":"any"},"required":false,"description":"An optional initial value"},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Called when a new item is selected","defaultValue":{"value":"() => {}","computed":false}},"labelKey":{"flowType":{"name":"any"},"required":true,"description":"Renderer(func) or property name(string) to determine what's being as option","defaultValue":{"value":"'label'","computed":false}},"valueKey":{"flowType":{"name":"string"},"required":true,"description":"name of property to be use as values when an object is selected"},"testId":{"flowType":{"name":"string"},"required":true,"description":"style applied to DropdownMenu"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for DropdownMenu","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/DropdownMenu/examples/1_dropdown_menu_usage.js","requirePath":"../src/components/DropdownMenu/examples/1_dropdown_menu_usage.js","description":"","source":"import React, { Component } from 'react';\nimport DropdownMenu from '../../DropdownMenu/DropdownMenu';\n\n/**\n * @component ../../DropdownMenu\n */\n\n\nconst IconDelete = () => (\n  <svg viewBox=\"0 0 26 26\" style={{ height: 16, width: 16, maxHeight: 16, maxWidth: 16 }}>\n    <path d=\"M20 7h1v15.744C18.479 23.558 15.792 24 13 24s-5.479-.442-8-1.256V7h1v14.78h14V7zm2.747-1H3.253c.527-.733 1.135-1.404 1.811-2H9V2.306C10.304 2.105 11.64 2 13 2c1.36 0 2.696.105 4 .306V4h3.936c.676.596 1.284 1.267 1.811 2zM10 4h6v-.801C15.01 3.08 14.011 3 13 3s-2.009.08-3 .198V4zm0 15V9.037H9V19h1zm3.5 0V9.037h-1V19h1zm3.5 0V9.037h-1V19h1z\" />\n  </svg>\n);\n\nconst IconDuplicate = () => (\n  <svg viewBox=\"0 0 26 26\" style={{ height: 16, width: 16, maxHeight: 16, maxWidth: 16 }}>\n    <path d=\"M13.904 12H10.9v-1h3.003L13.9 8h1v3h3v1h-3v2.992l-.994.008-.002-3zM3.9 7h-1v16h16v-1h-15V7zm19-4v17h-17V3h17zm-1 1h-15v15h15V4z\" />\n  </svg>\n);\n\nconst options = [\n  {\n    icon: IconDuplicate(),\n    label: 'Duplicate',\n    onClick: () => console.log('Duplicate'),\n  },\n  {\n    icon: IconDelete(),\n    label: 'Delete',\n    onClick: () => console.log('Delete'),\n  },\n];\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"handleChange\"] }] */\nexport default class YourApp extends Component {\n  constructor() {\n    super();\n    this.state = { clickCount: 0 };\n  }\n\n  handleChange() {\n    console.log('Action performed!!!');\n  }\n\n  render() {\n    return (\n      <div>\n        <DropdownMenu\n          options={options}\n          placeholder=\"Source\"\n          displayAttr={'label'}\n          value={options[0]}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <DropdownMenu\n                options={options}\n                placeholder=\"Source\"\n                displayAttr={\"label\"}\n                value={options[0]}\n                onChange={this.handleChange} />\n        </div>\n    );\n}"}]},{"name":"EmptyResult","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/EmptyResult/EmptyResult","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** Text to display in the empty result placeholder */\n  message?: string;\n  /** class applied to EmptyResult */\n  className?: string;\n  /** id applied to EmptyResult component */\n  testId?: string,\n  /** theme object for EmptyResult */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  theme: ThemeT,\n  message: string,\n};\n\nconst defaultProps = {\n  theme: {},\n  message: \"We couldn't find results that match your criteria.\",\n};\n\nexport default class EmptyResult extends Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'EmptyResult';\n\n  render() {\n    const { message, theme, className, testId, ...other } = this.props;\n\n    return (\n      <div\n        {...other}\n        className={classNames(\n          theme.emptyResult,\n          className /* user specified classNames */\n        )}\n        data-test-id={testId}\n        data-anypoint-component={EmptyResult.displayName}\n      >\n        <span data-test-id={testId && `${testId}-image`} className={theme.image} />\n        <span data-test-id={testId && `${testId}-message`} className={theme.message}>{message}</span>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"EmptyResult","methods":[],"props":{"message":{"flowType":{"name":"string"},"required":false,"description":"Text to display in the empty result placeholder","defaultValue":{"value":"\"We couldn't find results that match your criteria.\"","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"class applied to EmptyResult"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to EmptyResult component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for EmptyResult","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/EmptyResult/examples/1_EmptyResults_usage.js","requirePath":"../src/components/EmptyResult/examples/1_EmptyResults_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { EmptyResult } from '../../';\n/**\n * @component ../../EmptyResult\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getMessage\"] }] */\nexport default class YourApp extends Component {\n  getMessage() {\n    return 'no data found';\n  }\n\n  render() {\n    return (\n      <div>\n        <EmptyResult message={this.getMessage()} />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <EmptyResult message={this.getMessage()} />\n        </div>\n    );\n}"}]},{"name":"FileUploader","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FileUploader/FileUploader","source":"import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Row from '../Row';\nimport Button from '../Button';\nimport TextField from '../TextField';\n\ntype Props = {\n  /** Must be unique for each fileUploader component */\n  id: string,\n  /** If using within a form, this will be the name of the form field */\n  name?: string,\n  /** Placeholder text inside file input */\n  placeholder?: string,\n  /** Rendering function used to render text in the input field based on value properties */\n  inputRenderer?: Function,\n  /** Usually a file object, only used to provide initial value */\n  value?: any,\n  /** If true, value will be set to contents of text file. Otherwise value is File Object */\n  parseFileAsText?: boolean,\n  /** Callback for value change event when a file is choosen, do not use if including in form */\n  onChange?: Function,\n  /** File type allowed ('.txt', '.zip', etc.) */\n  fileType?: string,\n  /** Set the width of text input field */\n  width?: string,\n  /** className applied to FileUploader */\n  className?: string,\n  /** If true, file will be required before form submission */\n  required?: boolean,\n  /** If true, fileUploader will be disabled */\n  disabled?: boolean,\n  /** if true, the value is valid */\n  isValid?: boolean,\n  /** if true, the input has been touched by the user */\n  isDirty?: boolean,\n  isPending?: boolean,\n  isFocused?: boolean,\n  theme: ThemeT,\n  /** id to put on the element for automation test */\n  testId: string,\n};\n\ntype DefaultProps = {\n  placeholder: string,\n  inputRenderer: Function,\n  value: any,\n  parseFileAsText: boolean,\n  onChange: Function,\n  width: string,\n  disabled: boolean,\n  isValid: boolean,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  placeholder: 'Upload File',\n  inputRenderer: value => (value ? value.name : ''),\n  value: null,\n  parseFileAsText: false,\n  onChange: () => {},\n  width: '250px',\n  disabled: false,\n  isValid: true,\n  theme: {},\n};\n\nexport default class FileUploader extends Component {\n  props: Props;\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'FileUploader';\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      displayValue: props.inputRenderer(props.value),\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.setValue = this.setValue.bind(this);\n    this.parseText = this.parseText.bind(this);\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.value !== this.state.value) {\n      const { onChange } = this.props;\n      onChange({ value: this.state.value });\n    }\n  }\n\n  setValue(valueToSet) {\n    this.setState({\n      value: valueToSet,\n      displayValue: this.props.inputRenderer(valueToSet),\n    });\n  }\n\n  handleClick() {\n    this.inputEl.click();\n  }\n\n  handleChange(event) {\n    const { parseFileAsText } = this.props;\n    const target = event.currentTarget || event.srcElement;\n    const file = target.files ? target.files[0] : {};\n    if (parseFileAsText) {\n      this.parseText(file);\n    } else {\n      this.setValue(file);\n    }\n  }\n\n  parseText(file) {\n    const reader = new window.FileReader();\n    const localFile = file;\n    reader.onload = (e) => {\n      localFile.value = e.target.result;\n      this.setValue(localFile);\n    };\n    reader.readAsText(file);\n  }\n\n  refInput = (element) => {\n    this.inputEl = element;\n  };\n\n  render() {\n    const {\n      id,\n      fileType,\n      placeholder,\n      width,\n      disabled,\n      theme,\n      className,\n      isDirty,\n      isValid,\n      isPending,\n      isFocused,\n      testId\n    } = this.props;\n    const { displayValue } = this.state;\n\n    const classes = classNames(\n      theme.fileUploader,\n      isDirty ? theme['is-dirty'] : '',\n      isValid ? theme['is-valid'] : '',\n      isPending ? theme['is-pending'] : '',\n      isFocused ? theme['is-focused'] : '',\n      !isValid ? theme['has-error'] : '',\n      className\n    );\n\n    return (\n      <div\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={FileUploader.displayName}\n        title={displayValue}\n      >\n        <Row align=\"space-between center\" auto className={theme.fileUploaderRow}>\n          <input\n            id={`${id}-input`}\n            ref={this.refInput}\n            type=\"file\"\n            style={{ display: 'none' }}\n            accept={fileType}\n            onChange={this.handleChange}\n            data-test-id={testId && `${testId}-input`}\n          />\n          <TextField\n            id={`${id}-file-name`}\n            className={theme.fileUploaderTextField}\n            align=\"horizontal\"\n            placeholder={placeholder}\n            value={displayValue}\n            width={width}\n            disabled\n            data-test-id={testId && `${testId}-text-field`}\n          />\n          <Button\n            id={`${id}-button`}\n            className={`${theme.fileUploaderButton} align-horizontal`}\n            noFill\n            onClick={this.handleClick}\n            disabled={disabled}\n            data-test-id={testId && `${testId}-button`}\n          >\n            Choose File\n          </Button>\n        </Row>\n      </div>\n    );\n  }\n}\n\n","description":"","displayName":"FileUploader","methods":[{"name":"setValue","docblock":null,"modifiers":[],"params":[{"name":"valueToSet","type":null}],"returns":null},{"name":"handleClick","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"event","type":null}],"returns":null},{"name":"parseText","docblock":null,"modifiers":[],"params":[{"name":"file","type":null}],"returns":null}],"props":{"id":{"flowType":{"name":"string"},"required":true,"description":"Must be unique for each fileUploader component"},"name":{"flowType":{"name":"string"},"required":false,"description":"If using within a form, this will be the name of the form field"},"placeholder":{"flowType":{"name":"string"},"required":false,"description":"Placeholder text inside file input","defaultValue":{"value":"'Upload File'","computed":false}},"inputRenderer":{"flowType":{"name":"Function"},"required":false,"description":"Rendering function used to render text in the input field based on value properties","defaultValue":{"value":"value => (value ? value.name : '')","computed":false}},"value":{"flowType":{"name":"any"},"required":false,"description":"Usually a file object, only used to provide initial value","defaultValue":{"value":"null","computed":false}},"parseFileAsText":{"flowType":{"name":"boolean"},"required":false,"description":"If true, value will be set to contents of text file. Otherwise value is File Object","defaultValue":{"value":"false","computed":false}},"onChange":{"flowType":{"name":"Function"},"required":false,"description":"Callback for value change event when a file is choosen, do not use if including in form","defaultValue":{"value":"() => {}","computed":false}},"fileType":{"flowType":{"name":"string"},"required":false,"description":"File type allowed ('.txt', '.zip', etc.)"},"width":{"flowType":{"name":"string"},"required":false,"description":"Set the width of text input field","defaultValue":{"value":"'250px'","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to FileUploader"},"required":{"flowType":{"name":"boolean"},"required":false,"description":"If true, file will be required before form submission"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"If true, fileUploader will be disabled","defaultValue":{"value":"false","computed":false}},"isValid":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the value is valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input has been touched by the user"},"isPending":{"flowType":{"name":"boolean"},"required":false,"description":""},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":""},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"id to put on the element for automation test"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FileUploader/examples/1_FileUploader_usage.js","requirePath":"../src/components/FileUploader/examples/1_FileUploader_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { FileUploader } from '../../';\n\n/**\n * @component ../../FileUploader\n */\n\nexport default class YourApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    console.log(e);\n    this.setState({ value: e.value });\n  }\n\n  render() {\n    return (\n      <FileUploader\n        onChange={this.handleChange}\n        id=\"fileUploader\"\n      />\n    );\n  }\n}\n","renderSource":"render() {\n    return <FileUploader onChange={this.handleChange} id=\"fileUploader\" />;\n}"}]},{"name":"Filter","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Filter/Filter","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport newId from '../../utils/newid';\n\ntype Props = {\n  /** className applied to Filter component */\n  className?: string,\n  /** id applied to Filter component */\n  testId?: string,\n  /** theme object for Filter component */\n  theme: ThemeT,\n  /** options array [{key, value, text}] for Filter */\n  options: Array<any>,\n  /** placeholder string for Filter */\n  placeholder: string,\n  /** option selected by default for Filter */\n  selectedOption: Object,\n  /** callback for value change event for Filter */\n  onOptionChange: (option?: Object) => void,\n  /** callback for clear button event for Filter */\n  onClear: () => void,\n};\n\ntype State = {\n  selected: any\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n  options: [],\n  placeholder: '',\n  onOptionChange: () => {},\n  onClear: () => {},\n};\n\nfunction findSelected(selectedOption, options) {\n  let selected = {};\n  try {\n    selected = options.filter(option => option.key === selectedOption.key)[0];\n    return selected;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Used for selecting an specific filter from a collection\n */\nexport default class Filter extends React.Component {\n  props: Props;\n  state: State;\n\n  filterCheckbox: Object;\n  filterLabel: Object;\n  handleClear: () => void;\n  handleChange: () => void;\n  checkboxId: string;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Filter';\n\n  constructor(props: Props) {\n    super(props);\n    this.filterCheckbox = {};\n    this.filterLabel = {};\n    this.state = {\n      selected: findSelected(props.selectedOption, props.options),\n    };\n\n    this.handleClear = this.handleClear.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    if (typeof window !== 'undefined') {\n      document.body.addEventListener('click',\n        (event: Event) => {\n          if (this.filterCheckbox &&\n              event.target !== this.filterLabel &&\n              event.target !== this.filterCheckbox) {\n            this.filterCheckbox.checked = false;\n          }\n        }\n      );\n    }\n  }\n\n  componentWillMount() {\n    this.checkboxId = newId('filter-checkbox-');\n  }\n\n  handleClear() {\n    const { onClear } = this.props;\n    this.setState({ selected: undefined }, () => {\n      this.filterCheckbox.checked = false;\n      onClear();\n    });\n  }\n\n  handleChange(option: Object) {\n    const { onOptionChange } = this.props;\n    this.setState({ selected: option }, () => {\n      this.filterCheckbox.checked = false;\n      onOptionChange({ value: option && option.value, key: option && option.key });\n    });\n  }\n\n  render() {\n    const {\n      className,\n      testId,\n      placeholder,\n      options,\n      theme,\n    } = this.props;\n    const { selected } = this.state;\n\n    const classes = classNames(\n      theme.filter, /* themeCSSlocalized styles */\n      className,       /* user specified classNames */\n    );\n\n    const labelClasses = classNames(\n      theme.label,\n      selected ? theme.selected : '',\n    );\n    let renderedLabel;\n    if (selected) {\n      renderedLabel = selected.text || selected.value;\n    } else {\n      renderedLabel = placeholder;\n    }\n    return (\n      <div\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={Filter.displayName}\n      >\n        <div\n          className={labelClasses}\n          id=\"filterLabel\"\n          data-test-id={testId && `${testId}-filter-label-group`}\n          ref={(l) => { this.filterLabel = l; }}\n        >\n          <label htmlFor={this.checkboxId}>\n            <div data-test-id={testId && `${testId}-filter-label-selected`}>\n              {renderedLabel}\n            </div>\n            <div className={theme.arrowDown} />\n          </label>\n        </div>\n        <input\n          type=\"checkbox\"\n          id={this.checkboxId}\n          data-test-id={testId && `${testId}-filter-checkbox`}\n          ref={(f) => { this.filterCheckbox = f; }}\n          className={theme.filterCheckbox}\n        />\n        <div className={theme.dropdown} data-test-id={testId && `${testId}-filter-dropdown`}>\n          <div className={theme.dropdownHeader} data-test-id={testId && `${testId}-filter-dropdown-header`}>\n            <label data-test-id={testId && `${testId}-filter-dropdown-placeholder`} htmlFor={this.checkboxId}>\n              {placeholder}\n            </label>\n            <button\n              type=\"button\"\n              onClick={this.handleClear}\n              data-test-id={testId && `${testId}-filter-clear-button`}\n            >\n              clear\n            </button>\n          </div>\n          <ul data-test-id={testId && `${testId}-filter-options`}>\n            {options.map((option) => {\n              const handleClick = () => (\n                this.handleChange(selected && selected.key === option.key ? undefined : option)\n              );\n              /* eslint-disable jsx-a11y/no-static-element-interactions */\n              return (\n                <li\n                  className={classNames({\n                    [theme.active]: selected && selected.key === option.key\n                  })}\n                  key={option.key}\n                  data-test-id={testId && `${testId}-filter-option-${option.key}`}\n                  onClick={handleClick}\n                >\n                  {\n                    option.value.type || option.value.$$typeof ?\n                      option.value : <span>{option.value}</span>\n                  }\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","description":"Used for selecting an specific filter from a collection","displayName":"Filter","methods":[{"name":"handleClear","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"option","type":{"name":"Object","alias":"Object"}}],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Filter component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Filter component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Filter component","defaultValue":{"value":"{}","computed":false}},"options":{"flowType":{"name":"Array","elements":[{"name":"any"}],"raw":"Array<any>"},"required":true,"description":"options array [{key, value, text}] for Filter","defaultValue":{"value":"[]","computed":false}},"placeholder":{"flowType":{"name":"string"},"required":true,"description":"placeholder string for Filter","defaultValue":{"value":"''","computed":false}},"selectedOption":{"flowType":{"name":"Object"},"required":true,"description":"option selected by default for Filter"},"onOptionChange":{"flowType":{"name":"signature","type":"function","raw":"(option?: Object) => void","signature":{"arguments":[{"name":"option","type":{"name":"Object"}}],"return":{"name":"void"}}},"required":true,"description":"callback for value change event for Filter","defaultValue":{"value":"() => {}","computed":false}},"onClear":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback for clear button event for Filter","defaultValue":{"value":"() => {}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Filter/examples/1_Filter_usage.js","requirePath":"../src/components/Filter/examples/1_Filter_usage.js","description":"","source":"import React from 'react';\nimport { Filter } from '../../';\n\n/**\n * @component ../../Filter\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"handleChange\", \"handleClear\"] }] */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  handleChange(e) {\n    console.log(`Change filter: ${e.key} ${e.value}`);\n  }\n\n  handleClear() {\n    console.log('Clear filter!');\n  }\n  render() {\n    const options = [\n      {\n        key: 'wip',\n        value: <span>Work in progress</span>,\n      },\n      {\n        key: 'approved',\n        value: 'Approved',\n      },\n      {\n        key: 'rejected',\n        value: 'Rejected',\n      },\n      {\n        key: 'wfa',\n        value: 'Waiting For Approval',\n      }\n    ];\n    return (\n      <div>\n        <Filter\n          options={options}\n          placeholder=\"Filter\"\n          selectedOption={options[0]}\n          onOptionChange={this.handleChange}\n          onClear={this.handleClear}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const options = [{\n        key: \"wip\",\n        value: <span>Work in progress</span>\n    }, {\n        key: \"approved\",\n        value: \"Approved\"\n    }, {\n        key: \"rejected\",\n        value: \"Rejected\"\n    }, {\n        key: \"wfa\",\n        value: \"Waiting For Approval\"\n    }];\n\n    return (\n        <div>\n            <Filter\n                options={options}\n                placeholder=\"Filter\"\n                selectedOption={options[0]}\n                onOptionChange={this.handleChange}\n                onClear={this.handleClear} />\n        </div>\n    );\n}"}]},{"name":"FixedTable","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FixedTable/FixedTable","source":"/* @flow */\nimport React, { Component, PropTypes } from 'react';\nimport classNames from 'classnames';\nimport { Table as FixedDataTable, Column, Cell } from 'fixed-data-table';\nimport { AutoSizer } from 'react-virtualized';\nimport propsOrState from '../../utils/propsOrState';\nimport Spinner from '../Spinner';\nimport EmptyResult from '../EmptyResult';\n\nimport HeaderCell from './components/HeaderCell';\nimport HeaderSelectCell from './components/HeaderSelectCell';\nimport SelectCell from './components/SelectCell';\nimport DataCell from './components/DataCell';\nimport ActionCell from './components/ActionCell';\n\nimport getAbsolutePath from '../../utils/constructAbsolutePath';\n\nconst CHECKBOX_COLUMN_WIDTH = 50;\nconst DEFAULT_COLUMN_WIDTH = 100;\nconst DEFAULT_COLUMN_GROW = 1;\n\n/** The table component dynamically generates a table based off the data passed in. */\n\ntype ColumnT = {\n  name: string,\n  key: string,\n  sort: () => void,\n  disableSort: boolean,\n  renderer: () => void,\n};\n\ntype Props = {\n  columns: ColumnT[],\n  /** Object that sets up table data. */\n  data: any[],\n  /** ID used for table and as base for rows */\n  id: string,\n  /** Key of the column to sort by default */\n  defaultSortColumn: string,\n  /** If true, sort in ascending order by default */\n  defaultSortAsc: boolean,\n  /** Custom event fired on row click (deprecated) */\n  onClickRow: () => void,\n  /** Set default selected row(s) (deprecated) */\n  selectedRows: any[],\n  /** Set selected row(s) */\n  selected: any,\n  /** What is this? (deprecated) */\n  typeAttribute: string,\n  /** If true, table will render the checkbox column for selecting rows */\n  multiSelectable: boolean,\n  /** If false, table will not be scrollable (deprecated) */\n  scrollable: boolean,\n  /** Custom event fired on data change: (value, state) => {} */\n  onChange: () => void,\n  /** Height of table rows (in pixels) */\n  rowHeight: number,\n  /** Height of table header (in pixels) */\n  headerHeight: number,\n  /** Key of the column to sort by */\n  sortColumn: string,\n  /** If true, sort in ascending order */\n  sortAsc: boolean,\n  /** Callback when user changes sort settings */\n  onSortChange: () => void,\n  /** if true, loading spinner displays */\n  isLoading: boolean,\n  /** width of the table (Internal) */\n  width: number,\n  /** height of the table (Internal) */\n  height: number,\n  /** if true, this component is invalid without selected rows */\n  required: boolean,\n  /** Row click handler */\n  onRowClick: () => void,\n  /** Return a path for row link */\n  getRowLink: () => void,\n  /** Message to display when table is empty */\n  emptyStateMessage: any,\n  /** callback when the table has room for more rows or is scrolled to bottom */\n  onShouldLoadMoreRows: () => void,\n  /** actions to perform on a row */\n  rowActions: any[],\n  /** className applied to FixedTable */\n  className?: string,\n  /** id applied to FixedTable component */\n  testId?: string,\n  /** theme object for FixedTable */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  data: any[],\n  isLoading: boolean,\n  multiSelectable: boolean,\n  defaultSortAsc: boolean,\n  selected: any,\n  rowHeight: number,\n  headerHeight: number,\n  required: bool,\n  emptyStateMessage: string,\n  rowActions: any[],\n  onChange: () => void,\n  onRowClick: () => void,\n  theme: ThemeT,\n  columns: any[],\n};\n\ntype State = {\n  sortColumn: any,\n  sortAsc: boolean,\n  isValid: boolean,\n  isPending: boolean,\n  isDirty: boolean,\n};\n\ntype ContextT = {\n  Link: () => void,\n  formatPattern: () => void,\n  root: string,\n  relativeLinks: Object,\n  router: Object\n};\n\nconst defaultProps = {\n  data: [],\n  isLoading: false,\n  multiSelectable: false,\n  defaultSortAsc: true,\n  selected: [],\n  rowHeight: 50,\n  headerHeight: 50,\n  required: false,\n  emptyStateMessage: 'No data available',\n  rowActions: [],\n  onChange: () => {},\n  onRowClick: () => {},\n  theme: {},\n  columns: [],\n};\n\nexport default class FixedTable extends Component {\n\n  props: Props;\n  state: State;\n  context: ContextT;\n\n  routes: [];\n  route: string;\n  params: Object;\n  data: any;\n  selected: any;\n  root: string;\n  formatPattern: Object;\n  sortFunctions: any;\n  selectAll: () => void;\n  unSelectAll: () => void;\n  handleRowClick: () => void;\n  handleScrollEnd: () => void;\n  setSort: () => void;\n  renderHeaderSelectCell: () => void;\n  renderHeaderCell: () => void;\n  renderSelectCell: () => void;\n  renderActionCell: () => void;\n  renderActionHeaderCell: () => void;\n  renderCell: () => void;\n\n  static displayName = 'FixedTable';\n  static defaultProps: DefaultProps = defaultProps;\n  static contextTypes = {\n    Link: PropTypes.func,\n    formatPattern: PropTypes.func,\n    root: PropTypes.string,\n    relativeLinks: PropTypes.object,\n    router: PropTypes.object,\n  };\n\n  /* istanbul ignore next */\n  constructor(props: Props, context: ContextT) {\n    super(props, context);\n\n    this.state = {\n      sortColumn: this.findDefaultSort(),\n      sortAsc: props.sortAsc !== undefined ? props.sortAsc : props.defaultSortAsc,\n      isValid: !props.required,\n      isPending: false,\n      isDirty: false,\n    };\n\n    this.routes = this.context.relativeLinks ? this.context.relativeLinks.routes : [];\n    this.route = this.context.relativeLinks ? this.context.relativeLinks.route : '';\n    this.params = this.context.relativeLinks ? this.context.relativeLinks.params : {};\n    this.root = this.context.root;\n    this.formatPattern = this.context.formatPattern;\n\n    /* Put custom sorting functions in a hash for easier lookup  */\n    this.sortFunctions = this.getSortFunctions();\n    this.selectAll = this.selectAll.bind(this);\n    this.unSelectAll = this.unSelectAll.bind(this);\n    this.handleRowClick = this.handleRowClick.bind(this);\n    this.handleScrollEnd = this.handleScrollEnd.bind(this);\n    this.setSort = this.setSort.bind(this);\n\n    this.renderHeaderSelectCell = this.renderHeaderSelectCell.bind(this);\n    this.renderHeaderCell = this.renderHeaderCell.bind(this);\n    this.renderSelectCell = this.renderSelectCell.bind(this);\n    this.renderActionCell = this.renderActionCell.bind(this);\n    this.renderActionHeaderCell = this.renderActionHeaderCell.bind(this);\n    this.renderCell = this.renderCell.bind(this);\n  }\n\n  componentDidMount() {\n    this.checkShouldLoadMoreRows();\n  }\n\n  componentDidUpdate() {\n    this.checkShouldLoadMoreRows();\n  }\n\n  setSort(key: string) {\n    const { onSortChange } = this.props;\n    const sortColumn = propsOrState.call(this, 'sortColumn');\n    const sortAsc = propsOrState.call(this, 'sortAsc');\n    const newSortDirection = sortColumn === key ? !sortAsc : true;\n\n    return () => this.setState({\n      sortColumn: key,\n      sortAsc: newSortDirection,\n    }, () => onSortChange && onSortChange(key, newSortDirection));\n  }\n\n  getSortFunctions() {\n    return this.props.columns.reduce((acc, col) => {\n      if (!col.sort) { return acc; }\n      if (typeof col.sort === 'function') {\n        acc[col.key] = col.sort; // eslint-disable-line\n      } else {\n        console.warn('Incorrect value provided as sorting function. Value will be ignored.');\n      }\n      return acc;\n    }, {});\n  }\n\n  findDefaultSort() {\n    const defaultSortColumn = this.props.sortColumn || this.props.defaultSortColumn;\n    const column = this.props.columns.filter(col => col.key === defaultSortColumn);\n\n    if (defaultSortColumn && column.length === 0) {\n      console.warn(`Column '${defaultSortColumn}'\n       was not found. Please check your column settings.`);\n      return undefined;\n    } else if (column.length > 0 && column[0].disableSort) {\n      console.warn(`Column '${defaultSortColumn}' is assinged to be the sort column,\n       but is not sortable. Please check your column settings.`);\n      return undefined;\n    }\n\n    return defaultSortColumn;\n  }\n\n  maybeSortData() {\n    const sortColumn = propsOrState.call(this, 'sortColumn');\n    const sortAsc = propsOrState.call(this, 'sortAsc');\n    const { data } = this.props;\n\n    if (!sortColumn) { return data; }\n\n    const sortedData = [...data].sort((a, b) => {\n      const valueA = a[sortColumn];\n      const valueB = b[sortColumn];\n\n      if (this.sortFunctions[sortColumn]) {\n        return this.sortFunctions[sortColumn](a, b);\n      } else if (isFinite(valueA) && isFinite(valueB)) {\n        // numbers\n        return valueA - valueB;\n      } else if (typeof valueA === 'string' && typeof valueB === 'string') {\n        // strings\n        const localA = valueA.toLowerCase();\n        const localB = valueB.toLowerCase();\n\n        if (localA < localB) {\n          return -1;\n        } else if (localA > localB) {\n          return 1;\n        }\n        return 0;\n      }\n      // objects, unsortable without custom sort function\n      return 1;\n    });\n\n    return sortAsc ? sortedData : sortedData.reverse();\n  }\n\n  checkShouldLoadMoreRows() {\n    const {\n      height,\n      rowHeight,\n      headerHeight,\n      isLoading,\n      onShouldLoadMoreRows,\n    } = this.props;\n    const data = this.data;\n    const notEnoughRows = (data.length * rowHeight) + headerHeight < height;\n\n    if (!isLoading && notEnoughRows && onShouldLoadMoreRows) {\n      setTimeout(() => onShouldLoadMoreRows());\n    }\n  }\n\n  selectAll() {\n    const { data, onChange } = this.props;\n    onChange(data);\n  }\n\n  unSelectAll() {\n    this.props.onChange([]);\n  }\n\n  wrapAddSelectedRow(row: Object) {\n    const { onChange, selected } = this.props;\n    return (e: Event) => {\n      e.preventDefault();\n      onChange(selected.concat(row));\n    };\n  }\n\n  wrapUnSelectRow(row: Object) {\n    const { onChange, selected } = this.props;\n    return (e: Event) => {\n      e.preventDefault();\n      onChange(selected.filter(item => item !== row));\n    };\n  }\n\n  handleRowClick(event: any, rowIndex: number) {\n    const sortedData = this.data;\n\n    if (this.props.getRowLink && this.context.router) {\n      const to = this.props.getRowLink(sortedData[rowIndex]);\n      const path = getAbsolutePath(\n        this.routes,\n        this.route,\n        to,\n        this.root,\n        this.params,\n        this.formatPattern\n      );\n      this.context.router.push({\n        pathname: path,\n      });\n    }\n    if (!event.isDefaultPrevented()) {\n      const { onChange, onRowClick, multiSelectable } = this.props;\n      const row = sortedData[rowIndex];\n      onChange(multiSelectable ? [row] : row);\n      onRowClick(event);\n    }\n  }\n\n  handleScrollEnd(size: Object, scrollX: number, scrollY: number) {\n    const { onShouldLoadMoreRows, height, rowHeight, headerHeight } = this.props;\n    const heightToUse = height || size.height;\n    const viewportHeight = heightToUse - headerHeight;\n    const totalHeight = this.data.length * rowHeight;\n    const scrollNearTheEnd = totalHeight - (viewportHeight + scrollY) < 20;\n    /* istanbul ignore else */\n    if (scrollNearTheEnd && onShouldLoadMoreRows) {\n      setTimeout(() => onShouldLoadMoreRows());\n    }\n  }\n\n  renderHeaderSelectCell(props: Props) {\n    const data = this.data;\n    const selected = this.selected;\n    const { theme } = this.props;\n\n    return (\n      <HeaderSelectCell\n        {...props}\n        theme={theme}\n        partial={selected.length > 0}\n        allSelected={data.length > 0 && selected.length === data.length}\n        onSelectAll={this.selectAll}\n        onRemoveAll={this.unSelectAll}\n      />\n    );\n  }\n\n  renderSelectCell(props: Object) {\n    const data = this.data;\n    const selected = this.selected;\n    const { theme } = this.props;\n\n    return (\n      <SelectCell\n        {...props}\n        theme={theme}\n        selectRow={this.wrapAddSelectedRow(data[props.rowIndex])}\n        unSelectRow={this.wrapUnSelectRow(data[props.rowIndex])}\n        selected={selected.indexOf(data[props.rowIndex]) !== -1}\n      />\n    );\n  }\n\n  renderHeaderCell(col: Object) {\n    const sortColumn = propsOrState.call(this, 'sortColumn');\n    const sortAsc = propsOrState.call(this, 'sortAsc');\n    const setSort = this.setSort;\n    const { theme } = this.props;\n\n    return function (props: any) {\n      return (\n        <HeaderCell\n          {...props}\n          theme={theme}\n          sortable={!col.disableSort}\n          onClick={col.disableSort ? undefined : setSort(col.key)}\n          isSortColumn={sortColumn === col.key}\n          sortAsc={sortAsc}\n        >\n          {col.name}\n        </HeaderCell>\n      );\n    };\n  }\n\n  renderCell(col: Object) {\n    const data = this.data;\n    const selected = this.selected;\n    const { theme } = this.props;\n\n    return function (props: Object) {\n      return (\n        <DataCell\n          {...props}\n          theme={theme}\n          data={data}\n          selected={selected.indexOf(data[props.rowIndex]) !== -1}\n          renderer={col.renderer}\n        />\n      );\n    };\n  }\n\n  renderActionCell(props: Object) {\n    const { rowActions, testId } = this.props;\n    const data = this.data;\n    const selected = this.selected;\n    const { theme } = this.props;\n\n    return (\n      <ActionCell\n        theme={theme}\n        actions={rowActions}\n        value={data[props.rowIndex]}\n        selected={selected.indexOf(data[props.rowIndex]) !== -1}\n        testId={testId}\n        {...props}\n      />\n    );\n  }\n\n  renderActionHeaderCell(props: Props) {\n    const { theme } = this.props;\n\n    return (\n      <Cell\n        className={theme.headerCell}\n        {...props}\n      />\n    );\n  }\n\n  renderIsLoadingOrEmptyResult() {\n    const { isLoading, emptyStateMessage } = this.props;\n    if (isLoading) {\n      return (<Spinner center />);\n    }\n    return (<EmptyResult message={emptyStateMessage} />);\n  }\n\n  render() {\n    const {\n      multiSelectable,\n      columns,\n      id,\n      headerHeight,\n      rowHeight,\n      isLoading,\n      width,\n      height,\n      onShouldLoadMoreRows,\n      rowActions,\n      selected,\n      className,\n      theme,\n      testId,\n    } = this.props;\n\n    this.data = this.maybeSortData();\n    this.selected = [].concat(selected);\n\n    return (\n      <div\n        id={id}\n        data-test-id={testId}\n        data-anypoint-component={FixedTable.displayName}\n        className={classNames(\n          theme.fixedTable,\n          { [theme.singleSelect]: !multiSelectable },\n          className\n        )}\n      >\n        <AutoSizer>\n          {size => (\n            <div>\n              <FixedDataTable\n                rowsCount={this.data.length}\n                rowHeight={rowHeight}\n                width={width || size.width}\n                height={height || size.height}\n                headerHeight={headerHeight}\n                onRowClick={this.handleRowClick}\n                onScrollEnd={\n                  onShouldLoadMoreRows ?\n                    Function.prototype.bind.call(this.handleScrollEnd, null, size) :\n                    undefined\n                }\n              >\n                {multiSelectable &&\n                  <Column\n                    width={CHECKBOX_COLUMN_WIDTH}\n                    flexGrow={0}\n                    header={this.renderHeaderSelectCell}\n                    cell={this.renderSelectCell}\n                  />\n                }\n                {columns.map(col => (\n                  <Column\n                    key={col.key}\n                    columnKey={col.key}\n                    flexGrow={col.width ? 0 : (col.grow || DEFAULT_COLUMN_GROW)}\n                    width={col.width || DEFAULT_COLUMN_WIDTH}\n                    header={this.renderHeaderCell(col)}\n                    cell={this.renderCell(col)}\n                  />\n                ))}\n                {rowActions.length > 0 &&\n                  <Column\n                    width={40}\n                    flexGrow={0}\n                    header={this.renderActionHeaderCell}\n                    cell={this.renderActionCell}\n                  />\n                }\n              </FixedDataTable>\n              {(isLoading || !this.data.length) &&\n                <div\n                  className={theme.anypointItemCentered}\n                  style={{ paddingTop: headerHeight }}\n                >\n                  {this.renderIsLoadingOrEmptyResult()}\n                </div>\n              }\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"FixedTable","methods":[{"name":"setSort","docblock":null,"modifiers":[],"params":[{"name":"key","type":{"name":"string"}}],"returns":null},{"name":"getSortFunctions","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"findDefaultSort","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"maybeSortData","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"checkShouldLoadMoreRows","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"selectAll","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"unSelectAll","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"wrapAddSelectedRow","docblock":null,"modifiers":[],"params":[{"name":"row","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"wrapUnSelectRow","docblock":null,"modifiers":[],"params":[{"name":"row","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"handleRowClick","docblock":null,"modifiers":[],"params":[{"name":"event","type":{"name":"any"}},{"name":"rowIndex","type":{"name":"number"}}],"returns":null},{"name":"handleScrollEnd","docblock":null,"modifiers":[],"params":[{"name":"size","type":{"name":"Object","alias":"Object"}},{"name":"scrollX","type":{"name":"number"}},{"name":"scrollY","type":{"name":"number"}}],"returns":null},{"name":"renderHeaderSelectCell","docblock":null,"modifiers":[],"params":[{"name":"props","type":{"name":"signature","type":"object","raw":"{\n  columns: ColumnT[],\n  /** Object that sets up table data. */\n  data: any[],\n  /** ID used for table and as base for rows */\n  id: string,\n  /** Key of the column to sort by default */\n  defaultSortColumn: string,\n  /** If true, sort in ascending order by default */\n  defaultSortAsc: boolean,\n  /** Custom event fired on row click (deprecated) */\n  onClickRow: () => void,\n  /** Set default selected row(s) (deprecated) */\n  selectedRows: any[],\n  /** Set selected row(s) */\n  selected: any,\n  /** What is this? (deprecated) */\n  typeAttribute: string,\n  /** If true, table will render the checkbox column for selecting rows */\n  multiSelectable: boolean,\n  /** If false, table will not be scrollable (deprecated) */\n  scrollable: boolean,\n  /** Custom event fired on data change: (value, state) => {} */\n  onChange: () => void,\n  /** Height of table rows (in pixels) */\n  rowHeight: number,\n  /** Height of table header (in pixels) */\n  headerHeight: number,\n  /** Key of the column to sort by */\n  sortColumn: string,\n  /** If true, sort in ascending order */\n  sortAsc: boolean,\n  /** Callback when user changes sort settings */\n  onSortChange: () => void,\n  /** if true, loading spinner displays */\n  isLoading: boolean,\n  /** width of the table (Internal) */\n  width: number,\n  /** height of the table (Internal) */\n  height: number,\n  /** if true, this component is invalid without selected rows */\n  required: boolean,\n  /** Row click handler */\n  onRowClick: () => void,\n  /** Return a path for row link */\n  getRowLink: () => void,\n  /** Message to display when table is empty */\n  emptyStateMessage: any,\n  /** callback when the table has room for more rows or is scrolled to bottom */\n  onShouldLoadMoreRows: () => void,\n  /** actions to perform on a row */\n  rowActions: any[],\n  /** className applied to FixedTable */\n  className?: string,\n  /** id applied to FixedTable component */\n  testId?: string,\n  /** theme object for FixedTable */\n  theme: ThemeT,\n}","signature":{"properties":[{"key":"columns","value":{"name":"unknown","required":true}},{"key":"data","value":{"name":"unknown","required":true}},{"key":"id","value":{"name":"string","required":true}},{"key":"defaultSortColumn","value":{"name":"string","required":true}},{"key":"defaultSortAsc","value":{"name":"boolean","required":true}},{"key":"onClickRow","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"selectedRows","value":{"name":"unknown","required":true}},{"key":"selected","value":{"name":"any","required":true}},{"key":"typeAttribute","value":{"name":"string","required":true}},{"key":"multiSelectable","value":{"name":"boolean","required":true}},{"key":"scrollable","value":{"name":"boolean","required":true}},{"key":"onChange","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"rowHeight","value":{"name":"number","required":true}},{"key":"headerHeight","value":{"name":"number","required":true}},{"key":"sortColumn","value":{"name":"string","required":true}},{"key":"sortAsc","value":{"name":"boolean","required":true}},{"key":"onSortChange","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"isLoading","value":{"name":"boolean","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}},{"key":"required","value":{"name":"boolean","required":true}},{"key":"onRowClick","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"getRowLink","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"emptyStateMessage","value":{"name":"any","required":true}},{"key":"onShouldLoadMoreRows","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"rowActions","value":{"name":"unknown","required":true}},{"key":"className","value":{"name":"string","required":false}},{"key":"testId","value":{"name":"string","required":false}},{"key":"theme","value":{"name":"ThemeT","required":true}}]},"alias":"Props"}}],"returns":null},{"name":"renderSelectCell","docblock":null,"modifiers":[],"params":[{"name":"props","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"renderHeaderCell","docblock":null,"modifiers":[],"params":[{"name":"col","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"renderCell","docblock":null,"modifiers":[],"params":[{"name":"col","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"renderActionCell","docblock":null,"modifiers":[],"params":[{"name":"props","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"renderActionHeaderCell","docblock":null,"modifiers":[],"params":[{"name":"props","type":{"name":"signature","type":"object","raw":"{\n  columns: ColumnT[],\n  /** Object that sets up table data. */\n  data: any[],\n  /** ID used for table and as base for rows */\n  id: string,\n  /** Key of the column to sort by default */\n  defaultSortColumn: string,\n  /** If true, sort in ascending order by default */\n  defaultSortAsc: boolean,\n  /** Custom event fired on row click (deprecated) */\n  onClickRow: () => void,\n  /** Set default selected row(s) (deprecated) */\n  selectedRows: any[],\n  /** Set selected row(s) */\n  selected: any,\n  /** What is this? (deprecated) */\n  typeAttribute: string,\n  /** If true, table will render the checkbox column for selecting rows */\n  multiSelectable: boolean,\n  /** If false, table will not be scrollable (deprecated) */\n  scrollable: boolean,\n  /** Custom event fired on data change: (value, state) => {} */\n  onChange: () => void,\n  /** Height of table rows (in pixels) */\n  rowHeight: number,\n  /** Height of table header (in pixels) */\n  headerHeight: number,\n  /** Key of the column to sort by */\n  sortColumn: string,\n  /** If true, sort in ascending order */\n  sortAsc: boolean,\n  /** Callback when user changes sort settings */\n  onSortChange: () => void,\n  /** if true, loading spinner displays */\n  isLoading: boolean,\n  /** width of the table (Internal) */\n  width: number,\n  /** height of the table (Internal) */\n  height: number,\n  /** if true, this component is invalid without selected rows */\n  required: boolean,\n  /** Row click handler */\n  onRowClick: () => void,\n  /** Return a path for row link */\n  getRowLink: () => void,\n  /** Message to display when table is empty */\n  emptyStateMessage: any,\n  /** callback when the table has room for more rows or is scrolled to bottom */\n  onShouldLoadMoreRows: () => void,\n  /** actions to perform on a row */\n  rowActions: any[],\n  /** className applied to FixedTable */\n  className?: string,\n  /** id applied to FixedTable component */\n  testId?: string,\n  /** theme object for FixedTable */\n  theme: ThemeT,\n}","signature":{"properties":[{"key":"columns","value":{"name":"unknown","required":true}},{"key":"data","value":{"name":"unknown","required":true}},{"key":"id","value":{"name":"string","required":true}},{"key":"defaultSortColumn","value":{"name":"string","required":true}},{"key":"defaultSortAsc","value":{"name":"boolean","required":true}},{"key":"onClickRow","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"selectedRows","value":{"name":"unknown","required":true}},{"key":"selected","value":{"name":"any","required":true}},{"key":"typeAttribute","value":{"name":"string","required":true}},{"key":"multiSelectable","value":{"name":"boolean","required":true}},{"key":"scrollable","value":{"name":"boolean","required":true}},{"key":"onChange","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"rowHeight","value":{"name":"number","required":true}},{"key":"headerHeight","value":{"name":"number","required":true}},{"key":"sortColumn","value":{"name":"string","required":true}},{"key":"sortAsc","value":{"name":"boolean","required":true}},{"key":"onSortChange","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"isLoading","value":{"name":"boolean","required":true}},{"key":"width","value":{"name":"number","required":true}},{"key":"height","value":{"name":"number","required":true}},{"key":"required","value":{"name":"boolean","required":true}},{"key":"onRowClick","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"getRowLink","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"emptyStateMessage","value":{"name":"any","required":true}},{"key":"onShouldLoadMoreRows","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"rowActions","value":{"name":"unknown","required":true}},{"key":"className","value":{"name":"string","required":false}},{"key":"testId","value":{"name":"string","required":false}},{"key":"theme","value":{"name":"ThemeT","required":true}}]},"alias":"Props"}}],"returns":null},{"name":"renderIsLoadingOrEmptyResult","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"columns":{"flowType":{"name":"unknown"},"required":true,"description":"","defaultValue":{"value":"[]","computed":false}},"data":{"flowType":{"name":"unknown"},"required":true,"description":"Object that sets up table data.","defaultValue":{"value":"[]","computed":false}},"id":{"flowType":{"name":"string"},"required":true,"description":"ID used for table and as base for rows"},"defaultSortColumn":{"flowType":{"name":"string"},"required":true,"description":"Key of the column to sort by default"},"defaultSortAsc":{"flowType":{"name":"boolean"},"required":true,"description":"If true, sort in ascending order by default","defaultValue":{"value":"true","computed":false}},"onClickRow":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Custom event fired on row click (deprecated)"},"selectedRows":{"flowType":{"name":"unknown"},"required":true,"description":"Set default selected row(s) (deprecated)"},"selected":{"flowType":{"name":"any"},"required":true,"description":"Set selected row(s)","defaultValue":{"value":"[]","computed":false}},"typeAttribute":{"flowType":{"name":"string"},"required":true,"description":"What is this? (deprecated)"},"multiSelectable":{"flowType":{"name":"boolean"},"required":true,"description":"If true, table will render the checkbox column for selecting rows","defaultValue":{"value":"false","computed":false}},"scrollable":{"flowType":{"name":"boolean"},"required":true,"description":"If false, table will not be scrollable (deprecated)"},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Custom event fired on data change: (value, state) => {}","defaultValue":{"value":"() => {}","computed":false}},"rowHeight":{"flowType":{"name":"number"},"required":true,"description":"Height of table rows (in pixels)","defaultValue":{"value":"50","computed":false}},"headerHeight":{"flowType":{"name":"number"},"required":true,"description":"Height of table header (in pixels)","defaultValue":{"value":"50","computed":false}},"sortColumn":{"flowType":{"name":"string"},"required":true,"description":"Key of the column to sort by"},"sortAsc":{"flowType":{"name":"boolean"},"required":true,"description":"If true, sort in ascending order"},"onSortChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Callback when user changes sort settings"},"isLoading":{"flowType":{"name":"boolean"},"required":true,"description":"if true, loading spinner displays","defaultValue":{"value":"false","computed":false}},"width":{"flowType":{"name":"number"},"required":true,"description":"width of the table (Internal)"},"height":{"flowType":{"name":"number"},"required":true,"description":"height of the table (Internal)"},"required":{"flowType":{"name":"boolean"},"required":true,"description":"if true, this component is invalid without selected rows","defaultValue":{"value":"false","computed":false}},"onRowClick":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Row click handler","defaultValue":{"value":"() => {}","computed":false}},"getRowLink":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Return a path for row link"},"emptyStateMessage":{"flowType":{"name":"any"},"required":true,"description":"Message to display when table is empty","defaultValue":{"value":"'No data available'","computed":false}},"onShouldLoadMoreRows":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback when the table has room for more rows or is scrolled to bottom"},"rowActions":{"flowType":{"name":"unknown"},"required":true,"description":"actions to perform on a row","defaultValue":{"value":"[]","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to FixedTable"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to FixedTable component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for FixedTable","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FixedTable/examples/1_FIxedTable_Usage.js","requirePath":"../src/components/FixedTable/examples/1_FIxedTable_Usage.js","description":"<p>Here is an example of FixedTable</p>","source":"import React, { Component } from 'react';\nimport { FixedTable } from '../../';\nimport Button from '../../Button';\n\n/**\n * Here is an example of FixedTable\n * @component ../../FixedTable\n */\n\nconst onButtonClick = val => (e) => {\n  e.preventDefault();\n  console.log('Clicked:', val.completed);\n};\n\nconst columns = [\n  {\n    name: 'Name',\n    key: 'name',\n    renderer: row => <span>{row.name}</span>,\n  }, {\n    name: 'Type',\n    key: 'type',\n  }, {\n    name: 'Completed',\n    key: 'completed',\n    disableSort: true,\n    width: 100,\n    renderer: (row) => {\n      const type = row.completed ? 'primary' : 'danger';\n      return <Button kind={type} onClick={onButtonClick(row)}>{row.completed.toString()}</Button>;\n    },\n  },\n];\n\nconst data = [\n  {\n    id: 1231312,\n    name: 'Queue ABC',\n    type: 'Queue',\n    completed: false,\n  }, {\n    id: 1231221312,\n    name: 'another-app',\n    type: 'Queue',\n    completed: false,\n  }, {\n    id: 1232112,\n    name: 'VictorISTestingHere',\n    type: 'Exchange',\n    completed: true,\n  }, {\n    id: 1232114,\n    name: 'AndrewistesingHERERERERERERERERERERERaloaloaloaloaloaloaloaloalo',\n    type: 'Exchange',\n    completed: true,\n  }, {\n    id: 12321142,\n    name: 'Cool beans',\n    type: 'Exchange',\n    completed: false,\n  }, {\n    id: 12321143,\n    name: 'Standing in line',\n    type: 'Queue',\n    completed: true,\n  }, {\n    id: 12321144,\n    name: 'Zootopia',\n    type: 'Exchange',\n    completed: false,\n  }, {\n    id: 1232116,\n    name: 'Newbies',\n    type: 'Exchange',\n    completed: true,\n  },\n];\n\nconst getRowLink = row => `./${row.id}`;\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"onRowClick\"] }] */\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedRows: undefined,\n    };\n\n    this.onTableChange = this.onTableChange.bind(this);\n  }\n\n  onTableChange(model) {\n    console.log('Table:', model);\n    this.setState({\n      selectedRows: model,\n    });\n  }\n\n  onRowClick(event) {\n    console.log('Row clicked: ', event);\n  }\n\n  render() {\n    const { selectedRows } = this.state;\n\n    return (\n      <div style={{ height: 300 }}>\n        <FixedTable\n          onChange={this.onTableChange}\n          selected={selectedRows}\n          columns={columns}\n          data={data}\n          multiSelectable\n          id=\"playground-table\"\n          onRowClick={this.onRowClick}\n          getRowLink={getRowLink}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        selectedRows\n    } = this.state;\n\n    return (\n        <div\n            style={{\n                height: 300\n            }}>\n            <FixedTable\n                onChange={this.onTableChange}\n                selected={selectedRows}\n                columns={columns}\n                data={data}\n                multiSelectable\n                id=\"playground-table\"\n                onRowClick={this.onRowClick}\n                getRowLink={getRowLink} />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FixedTable/examples/2_FIxedTable_Examples.js","requirePath":"../src/components/FixedTable/examples/2_FIxedTable_Examples.js","description":"<p>Here is an example of FixedTable</p>","source":"import React, { Component } from 'react';\nimport { FixedTable } from '../../';\n\n/**\n * Here is an example of FixedTable\n * @component ../../FixedTable\n */\n\nconst columns = [\n  {\n    name: 'Name',\n    key: 'name',\n  }, {\n    name: 'Type',\n    key: 'type',\n  }, {\n    name: 'Completed',\n    key: 'completed',\n    disableSort: true,\n    width: 100,\n  },\n];\n\nconst data = [];\n\nconst getRowLink = row => `./${row.id}`;\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedRows: undefined,\n    };\n  }\n\n  render() {\n    const { selectedRows } = this.state;\n\n    return (\n      <div>\n        <h4>Empty table</h4>\n        <div style={{ height: '300px' }}>\n          <FixedTable\n            onChange={this.onTableChange}\n            selected={selectedRows}\n            columns={columns}\n            data={data}\n            multiSelectable\n            onRowClick={this.onRowClick}\n            getRowLink={getRowLink}\n          />\n        </div>\n        <h4>Table loading data</h4>\n        <div style={{ height: '300px' }}>\n          <FixedTable\n            onChange={this.onTableChange}\n            selected={selectedRows}\n            columns={columns}\n            data={data}\n            isLoading\n            multiSelectable\n            onRowClick={this.onRowClick}\n            getRowLink={getRowLink}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        selectedRows\n    } = this.state;\n\n    return (\n        <div>\n            <h4>Empty table</h4>\n            <div\n                style={{\n                    height: \"300px\"\n                }}>\n                <FixedTable\n                    onChange={this.onTableChange}\n                    selected={selectedRows}\n                    columns={columns}\n                    data={data}\n                    multiSelectable\n                    onRowClick={this.onRowClick}\n                    getRowLink={getRowLink} />\n            </div>\n            <h4>Table loading data</h4>\n            <div\n                style={{\n                    height: \"300px\"\n                }}>\n                <FixedTable\n                    onChange={this.onTableChange}\n                    selected={selectedRows}\n                    columns={columns}\n                    data={data}\n                    isLoading\n                    multiSelectable\n                    onRowClick={this.onRowClick}\n                    getRowLink={getRowLink} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/FixedTable/examples/3_FIxedTable_Usage.js","requirePath":"../src/components/FixedTable/examples/3_FIxedTable_Usage.js","description":"<p>Here is an example of FixedTable</p>","source":"import React, { Component } from 'react';\nimport { FixedTable } from '../../';\n\n/**\n * Here is an example of FixedTable\n * @component ../../FixedTable\n */\n\n\nconst list = [{\n  firstName: 'Abraham',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Agnes',\n  lastName: 'Skinner',\n}, {\n  firstName: 'Albert',\n  lastName: 'Brooks',\n}, {\n  firstName: 'Allison',\n  lastName: 'Taylor',\n}, {\n  firstName: 'Amber',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Apu',\n  lastName: 'Nahasapeemapetilon',\n}, {\n  firstName: 'Aristotle',\n  lastName: 'Amadopolis',\n}, {\n  firstName: 'Arnie',\n  lastName: 'Pye',\n}, {\n  firstName: 'Artie',\n  lastName: 'Ziff',\n}, {\n  firstName: 'Atkins',\n  lastName: 'State Comptroller',\n}, {\n  firstName: 'Baby',\n  lastName: 'Gerald',\n}, {\n  firstName: 'Barney',\n  lastName: 'Gumble',\n}, {\n  firstName: 'Bart',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Bernice',\n  lastName: 'Hibbert',\n}, {\n  firstName: \"Birchibald 'Birch'\",\n  lastName: 'T. Barlow',\n}, {\n  firstName: 'Bleeding Gums',\n  lastName: 'Murphy',\n}, {\n  firstName: 'Brandine',\n  lastName: 'Spuckler',\n}, {\n  firstName: 'Bumblebee',\n  lastName: 'Man',\n}, {\n  firstName: 'Capital City',\n  lastName: 'Goofball',\n}, {\n  firstName: 'Carl',\n  lastName: 'Carlson',\n}, {\n  firstName: 'Cecil',\n  lastName: 'Terwilliger',\n}, {\n  firstName: 'Charles Montgomery',\n  lastName: 'Burns',\n}, {\n  firstName: 'Clancy',\n  lastName: 'Wiggum',\n}, {\n  firstName: 'Cletus',\n  lastName: 'Spuckler',\n}, {\n  firstName: 'Coach',\n  lastName: 'Lugash',\n}, {\n  firstName: 'Comic Book',\n  lastName: 'Guy',\n}, {\n  firstName: 'Constance',\n  lastName: 'Harm',\n}, {\n  firstName: 'Cookie',\n  lastName: 'Kwan',\n}, {\n  firstName: 'Crazy Cat',\n  lastName: 'Lady',\n}, {\n  firstName: 'Dave',\n  lastName: 'Shutton',\n}, {\n  firstName: 'Declan',\n  lastName: 'Desmond',\n}, {\n  firstName: 'Dewey',\n  lastName: 'Largo',\n}, {\n  firstName: 'Disco',\n  lastName: 'Stu',\n}, {\n  firstName: 'Drederick',\n  lastName: 'Tatum',\n}, {\n  firstName: 'Edna',\n  lastName: 'Krabappel',\n}, {\n  firstName: 'Elizabeth',\n  lastName: 'Hoover',\n}, {\n  firstName: 'Fat',\n  lastName: 'Tony',\n}, {\n  firstName: 'Frankie',\n  lastName: 'the Squealer',\n}, {\n  firstName: 'Gary',\n  lastName: 'Chalmers',\n}, {\n  firstName: 'Gil',\n  lastName: 'Gunderson',\n}, {\n  firstName: 'Groundskeeper',\n  lastName: 'Willie',\n}, {\n  firstName: 'Hank',\n  lastName: 'Azaria',\n}, {\n  firstName: 'Hans',\n  lastName: 'Moleman',\n}, {\n  firstName: 'Helen',\n  lastName: 'Lovejoy',\n}, {\n  firstName: 'Herbert',\n  lastName: 'Powell',\n}, {\n  firstName: 'Herman',\n  lastName: 'Hermann',\n}, {\n  firstName: 'Herschel',\n  lastName: 'Krustofski',\n}, {\n  firstName: 'Homer',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Horatio',\n  lastName: 'McCallister',\n}, {\n  firstName: 'Hyman',\n  lastName: 'Krustofski',\n}, {\n  firstName: 'J. Loren',\n  lastName: 'Pryor',\n}, {\n  firstName: 'Jacqueline',\n  lastName: 'Bouvier',\n}, {\n  firstName: 'Janey',\n  lastName: 'Powell',\n}, {\n  firstName: 'Jasper',\n  lastName: 'Beardly',\n}, {\n  firstName: 'Jebediah',\n  lastName: 'Springfield',\n}, {\n  firstName: 'Jimbo',\n  lastName: 'Jones',\n}, {\n  firstName: 'John',\n  lastName: 'Frink',\n}, {\n  firstName: 'Johnny',\n  lastName: 'Tightlips',\n}, {\n  firstName: 'Julius',\n  lastName: 'Hibbert',\n}, {\n  firstName: 'Kearney',\n  lastName: 'Zzyzwicz',\n}, {\n  firstName: 'Kent',\n  lastName: 'Brockman',\n}, {\n  firstName: 'Kirk',\n  lastName: 'Van Houten',\n}, {\n  firstName: 'Lance',\n  lastName: 'Murdock',\n}, {\n  firstName: 'Lenny',\n  lastName: 'Leonard',\n}, {\n  firstName: 'Lindsey',\n  lastName: 'Naegle',\n}, {\n  firstName: 'Ling',\n  lastName: 'Bouvier',\n}, {\n  firstName: 'Lionel',\n  lastName: 'Hutz',\n}, {\n  firstName: 'Lisa',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Lois',\n  lastName: 'Pennycandy',\n}, {\n  firstName: 'Luann',\n  lastName: 'Van Houten',\n}, {\n  firstName: 'Lunchlady',\n  lastName: 'Doris',\n}, {\n  firstName: 'Lurleen',\n  lastName: 'Lumpkin',\n}, {\n  firstName: 'Maggie',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Manjula',\n  lastName: 'Nahasapeemapetilon',\n}, {\n  firstName: 'Marge',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Martin',\n  lastName: 'Prince',\n}, {\n  firstName: 'Marvin',\n  lastName: 'Monroe',\n}, {\n  firstName: 'Mary',\n  lastName: 'Bailey',\n}, {\n  firstName: 'Maude',\n  lastName: 'Flanders',\n}, {\n  firstName: \"Mayor 'Diamond Joe'\",\n  lastName: 'Quimby',\n}, {\n  firstName: 'Milhouse',\n  lastName: 'Van Houten',\n}, {\n  firstName: 'Moe',\n  lastName: 'Szyslak',\n}, {\n  firstName: 'Mona',\n  lastName: 'Simpson',\n}, {\n  firstName: 'Mr',\n  lastName: ' Teeny',\n}, {\n  firstName: 'Mr.',\n  lastName: ' Costington',\n}, {\n  firstName: 'Mrs',\n  lastName: ' Glick',\n}, {\n  firstName: 'Ms.',\n  lastName: 'Albright',\n}, {\n  firstName: 'Ned',\n  lastName: 'Flanders',\n}, {\n  firstName: 'Nelson',\n  lastName: 'Muntz',\n}, {\n  firstName: 'Nick',\n  lastName: 'Riviera',\n}, {\n  firstName: 'Old',\n  lastName: 'Barber',\n}, {\n  firstName: 'Old',\n  lastName: 'Jewish Man',\n}, {\n  firstName: 'Otto',\n  lastName: 'Mann',\n}, {\n  firstName: 'Patches',\n  lastName: 'and Poor Violet',\n}, {\n  firstName: 'Patty',\n  lastName: 'Bouvier',\n}, {\n  firstName: 'Princess',\n  lastName: 'Kashmir',\n}, {\n  firstName: 'Rachel',\n  lastName: 'Jordan',\n}, {\n  firstName: 'Radioactive',\n  lastName: 'Man',\n}, {\n  firstName: 'Rainier',\n  lastName: 'Wolfcastle',\n}, {\n  firstName: 'Ralph',\n  lastName: 'Wiggum',\n}, {\n  firstName: 'Rod',\n  lastName: 'Flanders',\n}, {\n  firstName: 'Roger',\n  lastName: 'Meyers Jr.',\n}, {\n  firstName: 'Roy',\n  lastName: 'Snyder',\n}, {\n  firstName: 'Ruth',\n  lastName: 'Powers',\n}, {\n  firstName: 'Sanjay',\n  lastName: 'Nahasapeemapetilon',\n}, {\n  firstName: \"Santa's\",\n  lastName: 'Little Helper',\n}, {\n  firstName: 'Sarah',\n  lastName: 'Wiggum',\n}, {\n  firstName: 'Scott',\n  lastName: 'Christian',\n}, {\n  firstName: 'Selma',\n  lastName: 'Bouvier',\n}, {\n  firstName: 'Seymour',\n  lastName: 'Skinner',\n}, {\n  firstName: 'Sideshow',\n  lastName: 'Bob',\n}, {\n  firstName: 'Sideshow',\n  lastName: 'Mel',\n}, {\n  firstName: 'Snake',\n  lastName: 'Jailbird',\n}, {\n  firstName: 'Squeaky',\n  lastName: 'Voiced Teen',\n}, {\n  firstName: 'The Happy',\n  lastName: 'Little Elves',\n}, {\n  firstName: 'The Rich',\n  lastName: 'Texan',\n}, {\n  firstName: 'Timothy',\n  lastName: 'Lovejoy',\n}, {\n  firstName: 'Todd',\n  lastName: 'Flanders',\n}, {\n  firstName: 'Troy',\n  lastName: 'McClure',\n}, {\n  firstName: 'Waylon',\n  lastName: 'Smithers',\n}, {\n  firstName: 'Wendell',\n  lastName: 'Borton',\n}, {\n  firstName: 'Yes',\n  lastName: 'Guy',\n}];\n\n// Simulate paginated /users endpoint\nconst fetchUser = (offset, limit, callback) => {\n  const data = list\n    .map((item, index) => {\n      item.id = index; // eslint-disable-line\n      return item;\n    })\n    .slice(offset, offset + limit);\n\n  setTimeout(() => callback(data), 1000);\n};\n\nconst IconTrash = function () {\n  return (\n    <svg viewBox=\"0 0 26 26\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18, position: 'relative', top: 3, right: 9 }}>\n      <path d=\"M20 7h1v15.744C18.479 23.558 15.792 24 13 24s-5.479-.442-8-1.256V7h1v14.78h14V7zm2.747-1H3.253c.527-.733 1.135-1.404 1.811-2H9V2.306C10.304 2.105 11.64 2 13 2c1.36 0 2.696.105 4 .306V4h3.936c.676.596 1.284 1.267 1.811 2zM10 4h6v-.801C15.01 3.08 14.011 3 13 3s-2.009.08-3 .198V4zm0 15V9.037H9V19h1zm3.5 0V9.037h-1V19h1zm3.5 0V9.037h-1V19h1z\" />\n    </svg>\n  );\n};\n\nconst rowActions = [{\n  icon: IconTrash()\n}];\nconst columns = [{\n  name: 'First Name',\n  key: 'firstName',\n}, {\n  name: 'Last Name',\n  key: 'lastName',\n}];\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      offset: 0,\n      limit: 15,\n      lastFetchedCount: 0,\n      isLoading: false,\n      rows: [],\n      selectedRows: undefined,\n    };\n\n    this.onTableChange = this.onTableChange.bind(this);\n    this.onShouldLoadMoreRows = this.onShouldLoadMoreRows.bind(this);\n  }\n\n  componentWillMount() {\n    this.fetchMoreUser();\n  }\n\n  onTableChange(model) {\n    console.log('Table:', model);\n    this.setState({\n      selectedRows: model,\n    });\n  }\n\n  onShouldLoadMoreRows() {\n    const {\n      limit,\n      isLoading,\n      lastFetchedCount,\n    } = this.state;\n\n    if (!isLoading && lastFetchedCount === limit) {\n      this.fetchMoreUser();\n    }\n  }\n\n  fetchMoreUser() {\n    const {\n      rows,\n      offset,\n      limit,\n    } = this.state;\n\n    fetchUser(offset, limit, result => this.setState({\n      isLoading: false,\n      lastFetchedCount: result.length,\n      offset: offset + result.length,\n      rows: rows.concat(result),\n    }));\n\n    this.setState({\n      isLoading: true,\n    });\n  }\n\n  render() {\n    const {\n      rows,\n      selectedRows,\n      isLoading,\n    } = this.state;\n\n    return (\n      <div>\n        <h4>Infinite Scroll example</h4>\n        <div style={{ height: 300 }}>\n          <FixedTable\n            onChange={this.onTableChange}\n            onShouldLoadMoreRows={this.onShouldLoadMoreRows}\n            selected={selectedRows}\n            columns={columns}\n            rowActions={rowActions}\n            data={rows}\n            isLoading={isLoading}\n            multiSelectable\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        rows,\n        selectedRows,\n        isLoading\n    } = this.state;\n\n    return (\n        <div>\n            <h4>Infinite Scroll example</h4>\n            <div\n                style={{\n                    height: 300\n                }}>\n                <FixedTable\n                    onChange={this.onTableChange}\n                    onShouldLoadMoreRows={this.onShouldLoadMoreRows}\n                    selected={selectedRows}\n                    columns={columns}\n                    rowActions={rowActions}\n                    data={rows}\n                    isLoading={isLoading}\n                    multiSelectable />\n            </div>\n        </div>\n    );\n}"}]},{"name":"Hero","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Hero/Hero","source":"import React, { Component } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** hero contents */\n  children?: any,\n  /** Pass in string for the title */\n  title: string,\n  /** Pass in string for the subtitle - optional */\n  subtitle?: string,\n  /** ClassName applied to the Hero */\n  className?: string,\n  /** style applied to the hero */\n  style?: object,\n  theme?: ThemeT,\n  /** id to put on the element for automation test */\n  testId?: string,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nexport default class Hero extends Component {\n  props: Props;\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Hero';\n\n  render() {\n    const { children, title, subtitle, style, className, theme, testId } = this.props;\n\n    return (\n      <div\n        className={classNames(\n          theme.hero,\n          className\n        )}\n        style={style}\n        data-test-id={testId}\n        data-anypoint-component={Hero.displayName}\n      >\n        <div className={theme.title}>\n          <h2 data-test-id={testId && `${testId}-title`}>{title}</h2>\n          {subtitle ? <h4 data-test-id={testId && `${testId}-subtitle`}>{subtitle}</h4> : ''}\n        </div>\n        <div data-test-id={testId && `${testId}-content`}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"Hero","methods":[],"props":{"children":{"flowType":{"name":"any"},"required":false,"description":"hero contents"},"title":{"flowType":{"name":"string"},"required":true,"description":"Pass in string for the title"},"subtitle":{"flowType":{"name":"string"},"required":false,"description":"Pass in string for the subtitle - optional"},"className":{"flowType":{"name":"string"},"required":false,"description":"ClassName applied to the Hero"},"style":{"flowType":{"name":"object"},"required":false,"description":"style applied to the hero"},"theme":{"flowType":{"name":"ThemeT"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id to put on the element for automation test"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Hero/examples/1_hero_usage.js","requirePath":"../src/components/Hero/examples/1_hero_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Hero } from '../../';\nimport Row from '../../Row';\n\n/**\n * @component ../../Hero\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <Hero title=\"Main Hero Headline\" subtitle=\"optional hero subtitle\">\n        <Row style={{ marginTop: 20 }} align=\"space-around\">\n          <h1>Lorem ipsum 1</h1>\n          <h1>Lorem ipsum 2</h1>\n        </Row>\n      </Hero>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <Hero title=\"Main Hero Headline\" subtitle=\"optional hero subtitle\">\n            <Row\n                style={{\n                    marginTop: 20\n                }}\n                align=\"space-around\">\n                <h1>Lorem ipsum 1</h1>\n                <h1>Lorem ipsum 2</h1>\n            </Row>\n        </Hero>\n    );\n}"}]},{"name":"InfoMetric","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/InfoMetric/InfoMetric","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport Column from '../Column';\nimport Label from '../Label';\n\ntype Props = {\n  /** id applied to InfoMetric component */\n  testId?: string,\n  /** className applied to InfoMetric component */\n  className?: string,\n  /** theme object for InfoMetric component */\n  theme: ThemeT,\n  /** metric value */\n  value: string,\n  /** metric label */\n  label: string,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\n/**\n * InfoMetric displays a single value together with a label to the end-user.\n */\nexport default class InfoMetric extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'InfoMetric';\n\n  render() {\n    const { className, theme, testId, value, label } = this.props;\n    const classes = classNames(theme.infoMetric, className);\n\n    return (\n      <div\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={InfoMetric.displayName}\n      >\n        <Column\n          className={theme.column}\n          testId={testId && `${testId}-column`}\n          align=\"center center\"\n        >\n          <Label\n            className={theme.value}\n            testId={testId && `${testId}-value`}\n            text={value}\n          />\n          <Label\n            className={theme.label}\n            testId={testId && `${testId}-label`}\n            text={label}\n          />\n        </Column>\n      </div>\n    );\n  }\n}\n","description":"InfoMetric displays a single value together with a label to the end-user.","displayName":"InfoMetric","methods":[],"props":{"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to InfoMetric component"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to InfoMetric component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for InfoMetric component","defaultValue":{"value":"{}","computed":false}},"value":{"flowType":{"name":"string"},"required":true,"description":"metric value"},"label":{"flowType":{"name":"string"},"required":true,"description":"metric label"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/InfoMetric/examples/1_InfoMetric_usage.js","requirePath":"../src/components/InfoMetric/examples/1_InfoMetric_usage.js","description":"","source":"import React from 'react';\nimport { InfoMetric } from '../../';\n\n/**\n * @component ../../InfoMetric\n */\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <InfoMetric\n        value=\"9112\"\n        label=\"Clicks\"\n      />\n    );\n  }\n}\n","renderSource":"render() {\n    return <InfoMetric value=\"9112\" label=\"Clicks\" />;\n}"}]},{"name":"InfoTable","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/InfoTable/InfoTable","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Tooltip from '../Tooltip';\n\n/**\n * The list component is used for displaying data in a list style format\n */\n\ntype Props = {\n  /** Pass in array of components or data */\n  items: Object[],\n  /** className applied to the InfoTable */\n  className?: string,\n  /** id applied to InfoTable component */\n  testId?: string,\n  /** theme object for InfoTable */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nexport default class InfoTable extends Component {\n  props: Props;\n\n  static displayName = 'InfoTable';\n  static defaultProps: DefaultProps = defaultProps;\n\n  renderInfoTableItems(items: Object[]) {\n    if (!items) {\n      return null;\n    }\n    const { theme, testId } = this.props;\n\n    return items.map((obj, i) => {\n      const icon = obj.icon;\n      const iconTooltip = obj.iconTooltip;\n      const label = obj.label || '';\n      const text = obj.text || '';\n      const clickHandler = obj.onClick || null;\n\n      return (\n        <Row\n          key={i}\n          align=\"left stretch\"\n          onClick={clickHandler}\n          className={theme.tableRow}\n        >\n          <Column\n            align=\"left top\"\n            className={theme.infoLabel}\n            auto\n          >\n            {label}\n          </Column>\n          <Column\n            display-if={icon}\n            align=\"left top\"\n            width=\"25px\"\n            style={{ paddingRight: '10px' }}\n            auto\n          >\n            <Tooltip\n              content={iconTooltip}\n              position=\"top\"\n            >\n              {icon}\n            </Tooltip>\n          </Column>\n          <div\n            className={theme.infoText}\n            data-test-id={testId && `${testId}-info-text`}\n          >\n            <div\n              className={theme.ieWrapFix}\n              style={{ maxWidth: icon ? 210 : 235 }}\n              data-test-id={testId && `${testId}-ie-wrap-fix`}\n            >\n              {text}\n            </div>\n          </div>\n        </Row>\n      );\n    });\n  }\n\n  render() {\n    const { items, testId, className, theme } = this.props;\n    const infoTableItems = this.renderInfoTableItems(items);\n\n    return (\n      <span\n        className={classNames(theme.infoTable, className)}\n        data-test-id={testId}\n        data-anypoint-component={InfoTable.displayName}\n      >\n        {infoTableItems}\n      </span>\n    );\n  }\n}\n","description":"","displayName":"InfoTable","methods":[{"name":"renderInfoTableItems","docblock":null,"modifiers":[],"params":[{"name":"items","type":{"name":"unknown"}}],"returns":null}],"props":{"items":{"flowType":{"name":"unknown"},"required":true,"description":"Pass in array of components or data"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to the InfoTable"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to InfoTable component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for InfoTable","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/InfoTable/examples/1_InfoTable_Usage.js","requirePath":"../src/components/InfoTable/examples/1_InfoTable_Usage.js","description":"","source":"import React, { Component } from 'react';\nimport InfoTable from '../InfoTable';\n\n/**\n * @component ../../InfoTable\n */\nconst IconTrash = function () {\n  return (\n    <svg viewBox=\"0 0 26 26\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18 }}>\n      <path d=\"M20 7h1v15.744C18.479 23.558 15.792 24 13 24s-5.479-.442-8-1.256V7h1v14.78h14V7zm2.747-1H3.253c.527-.733 1.135-1.404 1.811-2H9V2.306C10.304 2.105 11.64 2 13 2c1.36 0 2.696.105 4 .306V4h3.936c.676.596 1.284 1.267 1.811 2zM10 4h6v-.801C15.01 3.08 14.011 3 13 3s-2.009.08-3 .198V4zm0 15V9.037H9V19h1zm3.5 0V9.037h-1V19h1zm3.5 0V9.037h-1V19h1z\" />\n    </svg>\n  );\n};\n\nconst IconSearch = function () {\n  return (\n    <svg viewBox=\"0 0 16 16\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18 }}>\n      <path\n        d=\"M12.8435669,13.3398438l-2.0373535-2.909668C11.6548462,9.5341797,12.1837769,8.331543,12.1837769,7\n        c0-2.7614746-2.2385864-5-5-5s-5,2.2385254-5,5s2.2385864,5,5,5c0.7076416,0,1.3787231-0.1508789,1.9888306-0.4160156\n        l2.0339966,2.9047852C11.7979736,14.1704102,12.3466797,13.7836914,12.8435669,13.3398438z M3.1837769,7\n        c0-2.2055664,1.7943726-4,4-4c2.2055664,0,4,1.7944336,4,4s-1.7944336,4-4,4C4.9781494,11,3.1837769,9.2055664,3.1837769,7z\"\n      />\n    </svg>\n  );\n};\n\nconst IconMessage = function () {\n  return (\n    <svg viewBox=\"0 0 26 26\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18 }}>\n      <path d=\"M18.779 12.008L16.673 9h1.221L20 12.008 17.905 15h-1.22l2.094-2.992zM14.857 7h-1.035l-2.679 10h1.035l2.679-10zm-5.542 8l-2.094-2.992L9.327 9H8.106L6 12.008 8.095 15h1.22zM24 4v16H10.713L5 24v-4H2V4h22zm-1 1H3v14h20V5z\" />\n    </svg>\n  );\n};\n\nconst listData = [{\n  label: 'Label 1',\n  icon: IconTrash(),\n  iconFill: '#000',\n  iconTooltip: 'This is trash',\n  text: 'meta data about this',\n  onClick: () => window.alert('hi'),\n}, {\n  label: 'Label 2',\n  icon: IconMessage(),\n  text: 'more meta data',\n  onClick: () => window.alert('hi 2'),\n}, {\n  label: 'Label 3',\n  icon: IconSearch(),\n  text: '0.0.0.0.0.0',\n}, {\n  label: 'Label 4 no ico',\n  text: 'business-org-xyz',\n}];\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <InfoTable items={listData} />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <InfoTable items={listData} />\n        </div>\n    );\n}"}]},{"name":"Label","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Label/Label","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** Placeholder text and label */\n  text?: string,\n  /** Label text if text prop not provided */\n  children?: any,\n  /** className applied to label */\n  className?: string,\n  /** for tag appiled for UX and accessiblity */\n  htmlFor?: string,\n  /** id applied to Label component */\n  testId?: string,\n  /** theme object for Label */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nexport default class Label extends Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Label';\n\n  render() {\n    const { text, children, className, htmlFor, theme, testId } = this.props;\n    const classes = classNames(theme.label, className);\n\n    return (\n      <label\n        htmlFor={htmlFor}\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={Label.displayName}\n      >\n        {text || children}\n      </label>\n    );\n  }\n}\n","description":"","displayName":"Label","methods":[],"props":{"text":{"flowType":{"name":"string"},"required":false,"description":"Placeholder text and label"},"children":{"flowType":{"name":"any"},"required":false,"description":"Label text if text prop not provided"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to label"},"htmlFor":{"flowType":{"name":"string"},"required":false,"description":"for tag appiled for UX and accessiblity"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Label component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Label","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Label/examples/1_Label_usage.js","requirePath":"../src/components/Label/examples/1_Label_usage.js","description":"","source":"import React from 'react';\nimport { Label } from '../../';\n\n/**\n * @component ../../Label\n */\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'flex-start' }}>\n        <Label >\n          Simple label\n        </Label>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                alignItems: \"flex-start\"\n            }}>\n            <Label>Simple label</Label>\n        </div>\n    );\n}"}]},{"name":"LineChart","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/LineChart","source":"/* @flow */\nimport React from 'react';\nimport {\n  VictoryAxis,\n  VictoryChart,\n  VictoryContainer,\n} from 'victory';\nimport shallowequal from 'shallowequal';\nimport {\n  calculateStrokeWidth,\n  deriveMutations,\n} from './helpers';\nimport {\n  BasicTooltip,\n  createReactionBus,\n  defaultNumberFormatter,\n  InteractiveGroup,\n  InteractiveLine,\n  InteractiveScatter,\n  LineMarker,\n} from '../Chart';\nimport EmptyResult from '../EmptyResult';\nimport styles from './LineChart.css'; // eslint-disable-line\nimport Spinner from '../Spinner';\n\nexport type DerivedAxisPropT = {\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n};\n\nexport type DerivedSeriesPropT = {\n  label: string,\n  value: (datum: Object) => number,\n  tooltipFormat: (datum: Object) => string,\n};\n\nexport type Props = {\n  activeSeries: Array<boolean>,\n  className?: string,\n  data: Array<Object>,\n  flyoutComponent?: any,\n  focusedIndex: ?number,\n  focusedSeries: ?number,\n  height: number | string,\n  isAxisInverted: boolean,\n  isCategorical: boolean,\n  isLoading: boolean,\n  isOverlayShown: boolean,\n  isTimeSeries: boolean,\n  onHover: Function,\n  padding: {\n    top: number,\n    left: number,\n    right: number,\n    bottom: number,\n  },\n  reactionBus: Object,\n  series: Array<DerivedSeriesPropT>,\n  showChart: boolean,\n  showLegend: boolean,\n  testId?: string,\n  theme: Object,\n  tickDivisor: number,\n  tickValues: Array<number | string>,\n  tooltipComponent?: any,\n  tooltipRows: Array<Object>,\n  tooltipTitle: string,\n  width: string | number,\n  xAxis: DerivedAxisPropT,\n  yAxis: DerivedAxisPropT,\n};\n\n/**\n * Describe the purpose of LineChart here\n */\nexport default class LineChart extends React.Component {\n  props: Props;\n\n  computeTickValues: () => void;\n  handleHover: () => void;\n  focusSeries: () => void;\n  focusIndex: () => void;\n  reactionBus: Object;\n\n  constructor(props: Props) {\n    super(props);\n\n    /** Our shared tests want us to handle receiving no props rather than throw errors... */\n    const {\n      reactionBus,\n    } = props;\n\n    /** See docs/react-mutations-design.md for additional usage info */\n    this.reactionBus = createReactionBus({\n      deriveMutations,\n      master: reactionBus,\n    });\n\n    this.handleHover = this.handleHover.bind(this);\n    this.focusSeries = this.focusSeries.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.reactionBus !== nextProps.reactionBus) {\n      this.reactionBus.destroy();\n      this.reactionBus = createReactionBus({\n        deriveMutations,\n        master: nextProps.reactionBus,\n      });\n    }\n\n    if (this.props.focusedIndex !== nextProps.focusedIndex) {\n      /**\n       * We set isLocal to true so that actions derived from props only flow downstream,\n       * respecting the integrity of the flow of data.\n       */\n      this.focusIndex(nextProps.focusedIndex, { isLocal: true });\n    }\n    if (this.props.focusedSeries !== nextProps.focusedSeries) {\n      this.focusSeries(nextProps.focusedSeries);\n    }\n  }\n\n  shouldComponentUpdate(nextProps: Props) {\n    let focusedIndex; // eslint-disable-line no-unused-vars\n    let nextPropsToCompare;\n    let propsToCompare;\n\n    /**\n     * We pluck focusedIndex here because changes to focusedIndex are handled\n     * manually and should not trigger a React render.\n     */\n    ({ focusedIndex, ...nextPropsToCompare } = nextProps);\n    ({ focusedIndex, ...propsToCompare } = this.props);\n    return !shallowequal(propsToCompare, nextPropsToCompare);\n  }\n\n  handleHover(hoveredIndex: ?number) {\n    const { onHover } = this.props;\n    this.focusIndex(hoveredIndex);\n    if (onHover) {\n      onHover(hoveredIndex);\n    }\n  }\n\n  focusIndex(index: ?number, options: { isLocal?: boolean } = {}) {\n    const { isLocal } = options;\n    const action = {\n      type: 'FOCUS_INDEX',\n      payload: {\n        index,\n      }\n    };\n\n    if (isLocal) {\n      this.reactionBus.dispatchLocal(action);\n    } else {\n      this.reactionBus.dispatch(action);\n    }\n  }\n\n  focusSeries(seriesIndex: ?number) {\n    const { activeSeries } = this.props;\n    this.reactionBus.dispatchLocal({\n      type: 'FOCUS_SERIES',\n      payload: {\n        index: seriesIndex,\n        activeSeries,\n      }\n    });\n  }\n\n  render() {\n    const {\n      activeSeries,\n      className,\n      data,\n      flyoutComponent,\n      focusedIndex, // eslint-disable-line no-unused-vars\n      focusedSeries, // eslint-disable-line no-unused-vars\n      height,\n      isAxisInverted,\n      isCategorical, // eslint-disable-line no-unused-vars\n      isLoading,\n      isOverlayShown,\n      isTimeSeries,\n      onHover, // eslint-disable-line no-unused-vars\n      padding,\n      series,\n      showChart,\n      testId,\n      reactionBus, // eslint-disable-line no-unused-vars\n      theme,\n      tickDivisor,\n      tickValues,\n      tooltipComponent,\n      tooltipRows,\n      tooltipTitle,\n      width,\n      xAxis,\n      yAxis, // eslint-disable-line no-unused-vars\n      ...props\n    } = this.props;\n\n    return (\n      <div\n        className={className}\n        data-test-id={testId}\n        data-anypoint-component=\"LineChart\"\n        style={{ width, height }}\n        {...props}\n      >\n        {showChart\n          ? (\n            <div style={{ height }}>\n              <VictoryChart\n                containerComponent={<VictoryContainer\n                  responsive\n                />}\n                height={height}\n                padding={padding}\n                theme={theme}\n                width={width}\n              >\n                <VictoryAxis\n                  dependant={isAxisInverted}\n                  scale={isTimeSeries ? 'time' : 'linear'}\n                  style={{\n                    tickLabels: {\n                      fill: !isTimeSeries\n                      ? tickValue => ((tickValue - 1) % tickDivisor === 0\n                        ? theme.axis.style.tickLabels.fill\n                        : 'transparent')\n                      : null,\n                    }\n                  }}\n                  tickValues={tickValues}\n                />\n                <VictoryAxis\n                  dependentAxis={!isAxisInverted}\n                  tickFormat={defaultNumberFormatter}\n                />\n                {data.length && !isLoading\n                  ? (<InteractiveGroup\n                    reactionBus={this.reactionBus}\n                    data={data}\n                    flyoutComponent={flyoutComponent}\n                    isAnchoredX\n                    isAxisInverted={isAxisInverted}\n                    isOverlayShown={isOverlayShown}\n                    markerComponent={<LineMarker />}\n                    onHover={this.handleHover}\n                    tooltipComponent={tooltipComponent || (\n                      <BasicTooltip\n                        rows={tooltipRows}\n                        title={tooltipTitle}\n                      />)}\n                    tooltipHeight={BasicTooltip.getBaseHeight(series.length)}\n                    xValue={xAxis.value}\n                    yValue={() => 0}\n                  >\n                    {series.map((s, index) => (\n                      <InteractiveLine\n                        data={data}\n                        key={index}\n                        mutation$={this.reactionBus.mutation$}\n                        name={`line-${index}`}\n                        style={{\n                          data: {\n                            strokeWidth: calculateStrokeWidth(),\n                          },\n                        }}\n                        x={xAxis.value}\n                        y={activeSeries[index] ? s.value : () => 0}\n                      />\n                    ))}\n                    {series.map((s, index) => (\n                      <InteractiveScatter\n                        data={data}\n                        key={index}\n                        mutation$={this.reactionBus.mutation$}\n                        name={`scatter-${index}`}\n                        style={{\n                          data: {\n                            /** Only show scatter point if datum is being hovered */\n                            fill: theme.line.colorScale[index % theme.line.colorScale.length],\n                            stroke: theme.line.colorScale[index % theme.line.colorScale.length],\n                            strokeWidth: 0,\n                            fillOpacity: 0,\n                          },\n                        }}\n                        x={xAxis.value}\n                        y={activeSeries[index] ? s.value : () => 0}\n                      />\n                    ))}\n                  </InteractiveGroup>) : null }\n              </VictoryChart>\n              <div display-if={!(data.length) || isLoading} className={styles.chartOverlay}>\n                <EmptyResult\n                  display-if={!data.length && !isLoading}\n                />\n                <Spinner display-if={isLoading} size=\"m\" />\n              </div>\n            </div>\n          ) : null}\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of LineChart here","methods":[{"name":"handleHover","docblock":null,"modifiers":[],"params":[{"name":"hoveredIndex","type":{"name":"number","nullable":true}}],"returns":null},{"name":"focusIndex","docblock":null,"modifiers":[],"params":[{"name":"index","type":{"name":"number","nullable":true}},{"name":"options","type":null}],"returns":null},{"name":"focusSeries","docblock":null,"modifiers":[],"params":[{"name":"seriesIndex","type":{"name":"number","nullable":true}}],"returns":null}],"props":{"activeSeries":{"flowType":{"name":"Array","elements":[{"name":"boolean"}],"raw":"Array<boolean>"},"required":true,"description":""},"className":{"flowType":{"name":"string"},"required":false,"description":""},"data":{"flowType":{"name":"Array","elements":[{"name":"Object"}],"raw":"Array<Object>"},"required":true,"description":""},"flyoutComponent":{"flowType":{"name":"any"},"required":false,"description":""},"focusedIndex":{"flowType":{"name":"number","nullable":true},"required":true,"description":""},"focusedSeries":{"flowType":{"name":"number","nullable":true},"required":true,"description":""},"height":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":true,"description":""},"isAxisInverted":{"flowType":{"name":"boolean"},"required":true,"description":""},"isCategorical":{"flowType":{"name":"boolean"},"required":true,"description":""},"isLoading":{"flowType":{"name":"boolean"},"required":true,"description":""},"isOverlayShown":{"flowType":{"name":"boolean"},"required":true,"description":""},"isTimeSeries":{"flowType":{"name":"boolean"},"required":true,"description":""},"onHover":{"flowType":{"name":"Function"},"required":true,"description":""},"padding":{"flowType":{"name":"signature","type":"object","raw":"{\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n}","signature":{"properties":[{"key":"top","value":{"name":"number","required":true}},{"key":"left","value":{"name":"number","required":true}},{"key":"right","value":{"name":"number","required":true}},{"key":"bottom","value":{"name":"number","required":true}}]}},"required":true,"description":""},"reactionBus":{"flowType":{"name":"Object"},"required":true,"description":""},"series":{"flowType":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  label: string,\n  value: (datum: Object) => number,\n  tooltipFormat: (datum: Object) => string,\n}","signature":{"properties":[{"key":"label","value":{"name":"string","required":true}},{"key":"value","value":{"name":"signature","type":"function","raw":"(datum: Object) => number","signature":{"arguments":[{"name":"datum","type":{"name":"Object"}}],"return":{"name":"number"}},"required":true}},{"key":"tooltipFormat","value":{"name":"signature","type":"function","raw":"(datum: Object) => string","signature":{"arguments":[{"name":"datum","type":{"name":"Object"}}],"return":{"name":"string"}},"required":true}}]}}],"raw":"Array<DerivedSeriesPropT>"},"required":true,"description":""},"showChart":{"flowType":{"name":"boolean"},"required":true,"description":""},"showLegend":{"flowType":{"name":"boolean"},"required":true,"description":""},"testId":{"flowType":{"name":"string"},"required":false,"description":""},"theme":{"flowType":{"name":"Object"},"required":true,"description":""},"tickDivisor":{"flowType":{"name":"number"},"required":true,"description":""},"tickValues":{"flowType":{"name":"Array","elements":[{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]}],"raw":"Array<number | string>"},"required":true,"description":""},"tooltipComponent":{"flowType":{"name":"any"},"required":false,"description":""},"tooltipRows":{"flowType":{"name":"Array","elements":[{"name":"Object"}],"raw":"Array<Object>"},"required":true,"description":""},"tooltipTitle":{"flowType":{"name":"string"},"required":true,"description":""},"width":{"flowType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"required":true,"description":""},"xAxis":{"flowType":{"name":"signature","type":"object","raw":"{\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n}","signature":{"properties":[{"key":"label","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Function","required":true}},{"key":"tooltipFormat","value":{"name":"Function","required":true}}]}},"required":true,"description":""},"yAxis":{"flowType":{"name":"signature","type":"object","raw":"{\n  label: string,\n  value: Function,\n  tooltipFormat: Function,\n}","signature":{"properties":[{"key":"label","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Function","required":true}},{"key":"tooltipFormat","value":{"name":"Function","required":true}}]}},"required":true,"description":""}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/1_LineChart_basic.js","requirePath":"../src/components/LineChart/examples/1_LineChart_basic.js","description":"","source":"import React from 'react';\nimport { LineChart } from '../../';\n\n/**\n * @component ../../LineChart\n */\nconst data = [\n   { name: 'api1', upload: 200, download: 50, http_404: 100, http_300: 400 },\n   { name: 'api2', upload: 100, download: 300, http_404: 44, http_300: 234 },\n   { name: 'api3', upload: 300, download: 200, http_404: 22, http_300: 134 },\n   { name: 'api4', upload: 400, download: 100, http_404: 15, http_300: 543 },\n   { name: 'api5', upload: 400, download: 100, http_404: 10, http_300: 200 },\n   { name: 'api6', upload: 400, download: 100, http_404: 5, http_300: 124 },\n];\n\nconst dimension = {\n  label: 'API Version',\n  value: d => d.name,\n};\n\nconst series = [{\n  key: 'upload',\n  label: 'Upload speed',\n  value: 'upload'\n}, {\n  key: 'download',\n  label: 'Download speed',\n  value: d => d.download\n}];\n\nexport default class YourApp extends Component { //eslint-disable-line\n  render() {\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            xAxis=\"name\"\n            yAxis={d => d.upload}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            xAxis={dimension}\n            series={series}\n            yAxis={{\n              // Uncomment to try other options.\n              // tooltipFormat: '2%',\n              // tooltipFormat: 'b',\n              // tooltipFormat: 'X',\n              // tooltipFormat: d => d > 400 ? 'Big' : 'Small',\n              tooltipFormat: '.1',\n              value: d => d * 2,\n            }}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={[]}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={[]}\n            isLoading\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={data} xAxis=\"name\" yAxis={d => d.upload} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={data} xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart\n                    data={data}\n                    xAxis={dimension}\n                    series={series}\n                    yAxis={{\n                        tooltipFormat: \".1\",\n                        value: d => d * 2\n                    }} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={[]} xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={[]} isLoading xAxis={dimension} series={series} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/2_LineChart_timeseries.js","requirePath":"../src/components/LineChart/examples/2_LineChart_timeseries.js","description":"","source":"import React from 'react';\nimport { LineChart } from '../../';\n\n/**\n * @component ../../LineChart\n */\nconst data = [\n   { _time: '2016-12-18', upload: 200, download: 50, http_404: 100, http_300: 400 },\n   { _time: '2016-12-19', upload: 100, download: 300, http_404: 44, http_300: 234 },\n   { _time: '2016-12-20', upload: 300, download: 200, http_404: 22, http_300: 134 },\n   { _time: '2016-12-21', upload: 400, download: 100, http_404: 15, http_300: 543 },\n   { _time: '2016-12-22', upload: 400, download: 100, http_404: 10, http_300: 200 },\n   { _time: '2016-12-23', upload: 400, download: 100, http_404: 5, http_300: 124 },\n].map(d => { d._time = new Date(d._time); return d;  }); //eslint-disable-line\n\nconst dimension = {\n  label: 'API Version',\n  value: d => d._time, //eslint-disable-line\n};\n\nconst series = [{\n  key: 'upload',\n  label: 'Upload speed',\n  value: 'upload'\n}, {\n  key: 'download',\n  label: 'Download speed',\n  value: d => d.download\n}];\n\nexport default class YourApp extends Component { //eslint-disable-line\n  render() {\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            isTimeSeries\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={data} isTimeSeries xAxis={dimension} series={series} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/3_LineChart_loading_data.js","requirePath":"../src/components/LineChart/examples/3_LineChart_loading_data.js","description":"","source":"import React from 'react';\nimport { LineChart } from '../../';\n\n/**\n * @component ../../LineChart\n */\n\nconst dimension = {\n  label: 'Row #',\n  value: d => d.x, //eslint-disable-line\n};\n\nconst series = [{\n  key: 'requests',\n  label: 'Requests',\n  value: 'y'\n}];\n\nexport default class YourApp extends Component { //eslint-disable-line\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    // Uncomment to start loading data.\n    // setInterval(() => this.loadData(), 2000);\n  }\n\n  loadData() {\n    const { data } = this.state;\n    this.setState({\n      data: data.concat({ x: data.length, y: Math.random() * 20 })\n    });\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        data\n    } = this.state;\n\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={data} xAxis={dimension} series={series} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/4_LineChart_large_dataset.js","requirePath":"../src/components/LineChart/examples/4_LineChart_large_dataset.js","description":"","source":"\nimport React from 'react';\nimport { LineChart } from '../../';\n\n/**\n * @component ../../LineChart\n */\n\nconst dimension = {\n  label: 'Row #',\n  value: d => d.x, //eslint-disable-line\n};\n\nconst series = [{\n  key: 'requests',\n  label: 'Requests',\n  value: 'y'\n}];\n\nconst data = [];\n\nfor (let i = 0; i < 1000; i++) { // eslint-disable-line\n  data.push({\n    x: i,\n    y: Math.random() * 20,\n  });\n}\n\nconst timeSeriesData = [];\n\nconst startingDateMs = (new Date(2015, 1, 1)).getTime();\nconst dayInMs = 24 * 60 * 60 * 1000;\n\nfor (let i = 0; i < 1000; i++) { // eslint-disable-line\n  timeSeriesData.push({\n    x: new Date(startingDateMs + (i * dayInMs)),\n    y: Math.random() * 20,\n  });\n}\n\nexport default class YourApp extends Component { //eslint-disable-line\n  render() {\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            isCategorical={false}\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={timeSeriesData}\n            isTimeSeries\n            xAxis={dimension}\n            series={series}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={data} isCategorical={false} xAxis={dimension} series={series} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart data={timeSeriesData} isTimeSeries xAxis={dimension} series={series} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/5_LineChart_synced_interactions.js","requirePath":"../src/components/LineChart/examples/5_LineChart_synced_interactions.js","description":"","source":"import React from 'react';\nimport { LineChart } from '../../';\n/**\n * @component ../../LineChart\n */\n\nconst data = [];\n\nfor (let i = 0; i < 50; i++) { // eslint-disable-line\n  data.push({\n    x: `api${i}`,\n    foo: Math.random() * 20,\n    bar: Math.random() * 40,\n  });\n}\n\nexport default class YourApp extends Component { //eslint-disable-line\n  constructor(props) {\n    super(props);\n\n    /**\n     * We know this will be the master ActionMediator so only needs to be created once\n     * in constructor. If it was in a slave configuration, we would need to update in\n     * in componentWillReceiveProps or anytime a new master becomes available that it\n     * should subscribe to.\n     */\n    this.reactionBus = Chart.createReactionBus(); // eslint-disable-line\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            reactionBus={this.reactionBus}\n            data={data}\n            xAxis=\"x\"\n            yAxis={d => d.foo}\n          />\n        </div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            reactionBus={this.reactionBus}\n            data={data}\n            xAxis=\"x\"\n            yAxis={d => d.bar}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart reactionBus={this.reactionBus} data={data} xAxis=\"x\" yAxis={d => d.foo} />\n            </div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart reactionBus={this.reactionBus} data={data} xAxis=\"x\" yAxis={d => d.bar} />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/LineChart/examples/6_LineChart_controlled_props.js","requirePath":"../src/components/LineChart/examples/6_LineChart_controlled_props.js","description":"","source":"import React from 'react';\nimport { LineChart } from '../../';\n/**\n * @component ../../LineChart\n */\n\nconst datumCount = 50;\nconst data = [];\n\nfor (let i = 0; i < datumCount; i++) { // eslint-disable-line\n  data.push({\n    x: `api${i}`,\n    foo: Math.random() * 20,\n    bar: Math.random() * 40,\n  });\n}\n\nconst handleHover = index => console.log(`Hovered index: ${index}`); // eslint-disable-line no-console\n\nexport default class YourApp extends Component { //eslint-disable-line\n  constructor(props) {\n    super(props);\n    this.state = {\n      focusedIndex: null,\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        focusedIndex: Math.floor(Math.random() * 50),\n      });\n    }, 3000);\n  }\n\n  componentDidUpdate() {\n    // setTimeout(() => {\n    //   this.setState({\n    //     focusedIndex: Math.floor(Math.random() * 50),\n    //   });\n    // }, 3000);\n  }\n\n  render() {\n    const { focusedIndex } = this.state;\n    return (\n      <div>\n        <div style={{ height: 250, marginBottom: 20 }}>\n          <LineChart\n            data={data}\n            focusedIndex={focusedIndex}\n            onHover={handleHover}\n            xAxis=\"x\"\n            yAxis={d => d.foo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        focusedIndex\n    } = this.state;\n\n    return (\n        <div>\n            <div\n                style={{\n                    height: 250,\n                    marginBottom: 20\n                }}>\n                <LineChart\n                    data={data}\n                    focusedIndex={focusedIndex}\n                    onHover={handleHover}\n                    xAxis=\"x\"\n                    yAxis={d => d.foo} />\n            </div>\n        </div>\n    );\n}"}]},{"name":"List","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/List/List","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport ListItem from '../ListItem';\n\n/**\n * The list component is used for displaying data in a list style format\n */\n\ntype Props = {\n  /** the children of the list will automatically be wrapped in the list */\n  children?: any,\n  /** Pass in array of components or data */\n  items: Object[],\n  /** customer rendering function for list items */\n  itemRenderer: () => any,\n  /** custom style attribute for list wrapper */\n  style: Object,\n  /** custom style attribute applied to all list items */\n  itemStyle: Object,\n  /** className applied to list */\n  className: string,\n  /** id applied to List component */\n  testId?: string,\n  /** theme object for List */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  theme: ThemeT\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nfunction wrapInListItem(child: Object) {\n  const isCustomComponent = typeof child.type === 'function';\n  const isListComponent = child.type && child.type.displayName === 'ListItem';\n  // wrap children in li\n  if (isCustomComponent && isListComponent) {\n    // Already ListItem don't wrap it\n    return child;\n  } else if (typeof child === 'string') {\n    // If not li wrap in ListItem\n    return (<ListItem>{child}</ListItem>);\n  } else if (child.type !== 'li') {\n    // If not li wrap in ListItem\n    return (<ListItem>{child}</ListItem>);\n  }\n  return child;\n}\n\nexport default class List extends Component {\n  props: Props;\n\n  static displayName = 'List';\n  static defaultProps: DefaultProps = defaultProps;\n\n  renderListItems() {\n    const {\n      children,\n      items,\n      itemRenderer,\n      itemStyle,\n    } = this.props;\n\n    if (!children && !items) {\n      /* No items found, exit early */\n      return null;\n    }\n\n    let childArray = (children) ? [].concat(children) : [];\n\n    /* if single string, return single list item */\n    if (typeof children === 'string') {\n      return wrapInListItem(children);\n    }\n\n    // if singular child, set child to array\n    if (children && !children.length) {\n      childArray = [children];\n    }\n\n    if (items) {\n      childArray = childArray.concat(items);\n    }\n\n    const flattenedArray = childArray.reduce((a, b) =>\n      a.concat(b)\n    , []);\n\n    // Map list children to dynamically\n    return flattenedArray.map((child, i) => {\n      /* exit if child empty */\n      if (!child) { return null; }\n\n      // wrap children in li\n      let item = wrapInListItem(child);\n      const isReactComponent = child.type;\n      const style = (child.props && child.props.style) ? child.props.style : null;\n\n      // if is custom data object, use renderer\n      if (!isReactComponent && itemRenderer) {\n        item = itemRenderer(child);\n      }\n\n      return React.cloneElement(item, {\n        style: { ...itemStyle, ...style },\n        key: i,\n      });\n    });\n  }\n\n  render() {\n    const { className, theme, testId } = this.props;\n    const listItems = this.renderListItems();\n    const classes = classNames(\n      theme.list,\n      className\n    );\n\n    return (\n      <ul\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={List.displayName}\n      >\n        {listItems}\n      </ul>\n    );\n  }\n}\n","description":"","displayName":"List","methods":[{"name":"renderListItems","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"flowType":{"name":"any"},"required":false,"description":"the children of the list will automatically be wrapped in the list"},"items":{"flowType":{"name":"unknown"},"required":true,"description":"Pass in array of components or data"},"itemRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => any","signature":{"arguments":[],"return":{"name":"any"}}},"required":true,"description":"customer rendering function for list items"},"style":{"flowType":{"name":"Object"},"required":true,"description":"custom style attribute for list wrapper"},"itemStyle":{"flowType":{"name":"Object"},"required":true,"description":"custom style attribute applied to all list items"},"className":{"flowType":{"name":"string"},"required":true,"description":"className applied to list"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to List component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for List","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/List/examples/1_List_usage.js","requirePath":"../src/components/List/examples/1_List_usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React, { Component } from 'react';\nimport { List } from '../../';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../List\n */\n\n /* Lists can take custom componets or an obj of values */\nexport default class ListExample1 extends Component {\n\n  render() {\n    return (\n      <div>\n        <List>\n          <li>Item 1</li>\n          <li>Item 2</li>\n          <li>Item 3</li>\n          <li>Item 4</li>\n          <li>Item 5</li>\n        </List>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <List>\n                <li>Item 1</li>\n                <li>Item 2</li>\n                <li>Item 3</li>\n                <li>Item 4</li>\n                <li>Item 5</li>\n            </List>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/List/examples/2_List_usage.js","requirePath":"../src/components/List/examples/2_List_usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React from 'react';\nimport { List } from '../../';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../List\n */\n\nexport default class ListExample2 extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <h3>Normal List</h3>\n        <List itemStyle={{ background: '#ABE2F5' }}>\n          <li>Item 1</li>\n          <li>Item 2</li>\n          <li style={{ background: '#5E66F9' }}>\n            Styled individually\n          </li>\n          <li>Item 4</li>\n        </List>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3>Normal List</h3>\n            <List\n                itemStyle={{\n                    background: \"#ABE2F5\"\n                }}>\n                <li>Item 1</li>\n                <li>Item 2</li>\n                <li\n                    style={{\n                        background: \"#5E66F9\"\n                    }}>Styled individually</li>\n                <li>Item 4</li>\n            </List>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/List/examples/3_List_usage.js","requirePath":"../src/components/List/examples/3_List_usage.js","description":"<p>Here is an example of a list generated by an array</p>","source":"import React from 'react';\nimport { List } from '../../';\n\n/**\n * Here is an example of a list generated by an array\n * @component ../../List\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getItems\"] }] */\nexport default class ListExample3 extends React.Component {\n  getItems() {\n    return [\n      'normal',\n      'style',\n      'list',\n      'made from array',\n    ];\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>List generated from array</h3>\n        <List\n          itemStyle={{ background: '#00A2DF' }}\n          items={this.getItems()}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3>List generated from array</h3>\n            <List\n                itemStyle={{\n                    background: \"#00A2DF\"\n                }}\n                items={this.getItems()} />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/List/examples/4_List_usage.js","requirePath":"../src/components/List/examples/4_List_usage.js","description":"<p>Here is an example of a list generated by an array of objects</p>","source":"import React from 'react';\nimport { List } from '../../';\n\n/**\n * Here is an example of a list generated by an array of objects\n * @component ../../List\n */\nconst IconTrash = function () {\n  return (\n    <svg viewBox=\"0 0 26 26\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18, position: 'relative', top: 3 }}>\n      <path d=\"M20 7h1v15.744C18.479 23.558 15.792 24 13 24s-5.479-.442-8-1.256V7h1v14.78h14V7zm2.747-1H3.253c.527-.733 1.135-1.404 1.811-2H9V2.306C10.304 2.105 11.64 2 13 2c1.36 0 2.696.105 4 .306V4h3.936c.676.596 1.284 1.267 1.811 2zM10 4h6v-.801C15.01 3.08 14.011 3 13 3s-2.009.08-3 .198V4zm0 15V9.037H9V19h1zm3.5 0V9.037h-1V19h1zm3.5 0V9.037h-1V19h1z\" />\n    </svg>\n  );\n};\n\nconst IconMessage = function () {\n  return (\n    <svg viewBox=\"0 0 26 26\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18, position: 'relative', top: 3 }}>\n      <path d=\"M18.779 12.008L16.673 9h1.221L20 12.008 17.905 15h-1.22l2.094-2.992zM14.857 7h-1.035l-2.679 10h1.035l2.679-10zm-5.542 8l-2.094-2.992L9.327 9H8.106L6 12.008 8.095 15h1.22zM24 4v16H10.713L5 24v-4H2V4h22zm-1 1H3v14h20V5z\" />\n    </svg>\n  );\n};\n\nconst IconBack = function () {\n  return (\n    <svg viewBox=\"0 0 32 32\" style={{ height: 18, width: 18, maxHeight: 18, maxWidth: 18, position: 'relative', top: 5 }}>\n      <path d=\"M23.954 14H5.144l5.601 8H8.303l-6.301-9 6.301-9h2.442l-5.601 8h18.81c.03.329.046.663.046 1s-.016.671-.046 1z\" />\n    </svg>\n  );\n};\n\n/* eslint\n  class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getItems\", \"customListRender\"] }]\n*/\nexport default class ListExample4 extends React.Component {\n  getItems() {\n    return [{\n      label: 'Label 1',\n      icon: IconTrash(),\n      onClick: () => console.log('hi'),\n    }, {\n      label: 'Label 2',\n      icon: IconMessage(),\n      onClick: () => console.log('hi 2'),\n    }, {\n      label: 'Label 3 with custom renderer',\n      icon: IconBack(),\n      onClick: () => console.log('hi 3'),\n    }];\n  }\n\n  customListRender(li) {\n    return (\n      <li // eslint-disable-line\n        onClick={li.onClick}\n      >\n        custom {li.label} - {li.icon}\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>List generated with custom renderer with Light and Dark themes</h3>\n        <List\n          items={this.getItems()}\n          itemRenderer={this.customListRender}\n          theme={List.themes.DarkTheme}\n        />\n        <br />\n        <List\n          items={this.getItems()}\n          itemRenderer={this.customListRender}\n          theme={List.themes.LightTheme}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3>List generated with custom renderer with Light and Dark themes</h3>\n            <List\n                items={this.getItems()}\n                itemRenderer={this.customListRender}\n                theme={List.themes.DarkTheme} />\n            <br />\n            <List\n                items={this.getItems()}\n                itemRenderer={this.customListRender}\n                theme={List.themes.LightTheme} />\n        </div>\n    );\n}"}]},{"name":"MediaObject","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/MediaObject/MediaObject","source":"import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Icon from '@mulesoft/anypoint-icons/lib/Icon';\nimport Image from '../Image';\n\ntype Props = {\n  /** contents next to the image */\n  children: any,\n  /** Optional title above children. Can be string or a custom react element */\n  title?: string|object,\n  /** URL to media source or name of icon from icon component */\n  media: string|object,\n  /** Align media to left or right. Default left */\n  mediaAlign?: 'left'|'right',\n  /** Class applied to the media container */\n  mediaClass?: string,\n  /** Style applied to the media container */\n  mediaStyle?: object,\n  /** Class applied to the content container */\n  contentClass?: string,\n  /** style applied to image */\n  imageClass?: string,\n  /** className applied to MediaObject wrapper */\n  className?: string,\n  theme?: ThemeT,\n  /** id to put on the element for automation test */\n  testId?: string,\n};\n\ntype DefaultProps = {\n  mediaAlign: string,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  mediaAlign: 'left',\n  theme: {},\n};\n\nexport default class MediaObject extends Component {\n  props: Props;\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'MediaObject';\n  static imageUrlTestRegExp =\n    /^https?:\\/\\/(?:[a-z-]+\\.)+[a-z]{2,6}(?:\\/[^/#?]+)+\\.(?:jpe?g|gif|png)$/;\n\n  renderMedia() {\n    const { media, theme, imageClass, testId } = this.props;\n\n    if (MediaObject.imageUrlTestRegExp.test(media)) {\n      return (\n        <Image\n          data-test-id={testId && `${testId}-image`}\n          src={media}\n          className={classNames(theme.image, imageClass)}\n        />\n      );\n    } else if (React.isValidElement(media)) {\n      /* render a React component */\n      return media;\n    } else if (media && media.indexOf('http') === -1) {\n      /* no url used it must be an icon */\n      return (\n        <Icon\n          size=\"l\"\n          name={media}\n          data-test-id={testId && `${testId}-icon`}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  renderTitle() {\n    const { title, theme, testId } = this.props;\n\n    return title ? (\n      <div\n        className={theme.titleWrapper}\n        data-test-id={testId && `${testId}-title-wrapper`}\n      >\n        {\n          React.isValidElement(title) ? title : (\n            <div\n              className={theme.title}\n              data-test-id={testId && `${testId}-title`}\n            >\n              {title}\n            </div>\n          )\n        }\n      </div>\n    ) : null;\n  }\n\n  render() {\n    const {\n      children,\n      mediaAlign,\n      mediaClass,\n      contentClass,\n      className,\n      theme,\n      testId\n    } = this.props;\n\n    return (\n      <div\n        className={classNames(\n          theme.mediaObject,\n          mediaAlign === 'right' ? theme.alignRight : theme.alignLeft,\n          className\n        )}\n        data-test-id={testId}\n        data-anypoint-component={MediaObject.displayName}\n      >\n        <div\n          className={classNames(theme.figure, mediaClass)}\n          data-test-id={testId && `${testId}-media`}\n        >\n          {this.renderMedia()}\n        </div>\n        <div\n          className={classNames(theme.figure, contentClass)}\n          data-test-id={testId && `${testId}-content`}\n        >\n          {this.renderTitle()}\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"MediaObject","methods":[{"name":"renderMedia","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTitle","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"flowType":{"name":"any"},"required":true,"description":"contents next to the image"},"title":{"flowType":{"name":"union","raw":"string|object","elements":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Optional title above children. Can be string or a custom react element"},"media":{"flowType":{"name":"union","raw":"string|object","elements":[{"name":"string"},{"name":"object"}]},"required":true,"description":"URL to media source or name of icon from icon component"},"mediaAlign":{"flowType":{"name":"union","raw":"'left'|'right'","elements":[{"name":"literal","value":"'left'"},{"name":"literal","value":"'right'"}]},"required":false,"description":"Align media to left or right. Default left","defaultValue":{"value":"'left'","computed":false}},"mediaClass":{"flowType":{"name":"string"},"required":false,"description":"Class applied to the media container"},"mediaStyle":{"flowType":{"name":"object"},"required":false,"description":"Style applied to the media container"},"contentClass":{"flowType":{"name":"string"},"required":false,"description":"Class applied to the content container"},"imageClass":{"flowType":{"name":"string"},"required":false,"description":"style applied to image"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to MediaObject wrapper"},"theme":{"flowType":{"name":"ThemeT"},"required":false,"description":"","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id to put on the element for automation test"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/MediaObject/examples/1_media_object_usage.js","requirePath":"../src/components/MediaObject/examples/1_media_object_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { MediaObject } from '../../';\nimport { ProfilePhoto } from '../../ProfilePhoto';\n\n/**\n * @component ../../MediaObject\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <MediaObject\n          title=\"Media Object Title\"\n          style={{ marginBottom: 20 }}\n          media={'http://dummyimage.com/83/09f/fff.png'}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          Integer vitae mauris arcu, eu pretium nisi.\n          Praesent fringilla ornare ullamcorper. Pellentesque diam orci\n        </MediaObject>\n        <hr />\n        <MediaObject\n          style={{ marginBottom: 20 }}\n          media={\n            <ProfilePhoto\n              image=\"https://dummyimage.com/400x400/aee38b/1c2057&text=Profile\"\n              size=\"s\"\n            />\n          }\n        >\n         Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n         Integer vitae mauris arcu, eu pretium nisi.\n         Praesent fringilla ornare ullamcorper.\n        </MediaObject>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <MediaObject\n                title=\"Media Object Title\"\n                style={{\n                    marginBottom: 20\n                }}\n                media={\"http://dummyimage.com/83/09f/fff.png\"}>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                          Integer vitae mauris arcu, eu pretium nisi.\n                          Praesent fringilla ornare ullamcorper. Pellentesque diam orci</MediaObject>\n            <hr />\n            <MediaObject\n                style={{\n                    marginBottom: 20\n                }}\n                media={<ProfilePhoto\n                    image=\"https://dummyimage.com/400x400/aee38b/1c2057&text=Profile\"\n                    size=\"s\" />}>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                         Integer vitae mauris arcu, eu pretium nisi.\n                         Praesent fringilla ornare ullamcorper.</MediaObject>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/MediaObject/examples/2_media_object_examples.js","requirePath":"../src/components/MediaObject/examples/2_media_object_examples.js","description":"","source":"import React, { Component } from 'react';\nimport { MediaObject } from '../../';\n/**\n * @component ../../MediaObject\n */\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <MediaObject\n          title=\"Media Object with Title\"\n          style={{ marginBottom: 20 }}\n          media={'http://dummyimage.com/83/09f/fff.png'}\n        >\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          Integer vitae mauris arcu, eu pretium nisi.\n          Praesent fringilla ornare ullamcorper. Pellentesque diam orci\n        </MediaObject>\n        <hr />\n        <MediaObject\n          style={{ marginBottom: 20 }}\n          media={'http://dummyimage.com/83/09f/fff.png'}\n        >\n          No title. Just text from the children.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          Integer vitae mauris arcu, eu pretium nisi.\n          Praesent fringilla ornare ullamcorper.\n        </MediaObject>\n        <hr />\n        <MediaObject\n          title=\"Media Object with Icon\"\n          style={{ marginBottom: 20 }}\n          media=\"exchange\"\n        >\n         Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n         Integer vitae mauris arcu, eu pretium nisi.\n         Praesent fringilla ornare ullamcorper.\n        </MediaObject>\n        <hr />\n        <MediaObject\n          title=\"Media Object Title Right Aligned\"\n          style={{ marginBottom: 20 }}\n          media={'http://dummyimage.com/83/09f/fff.png'}\n          mediaAlign=\"right\"\n        >\n         Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n         Integer vitae mauris arcu, eu pretium nisi.\n         Praesent fringilla ornare ullamcorper.\n        </MediaObject>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <MediaObject\n                title=\"Media Object with Title\"\n                style={{\n                    marginBottom: 20\n                }}\n                media={\"http://dummyimage.com/83/09f/fff.png\"}>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                          Integer vitae mauris arcu, eu pretium nisi.\n                          Praesent fringilla ornare ullamcorper. Pellentesque diam orci</MediaObject>\n            <hr />\n            <MediaObject\n                style={{\n                    marginBottom: 20\n                }}\n                media={\"http://dummyimage.com/83/09f/fff.png\"}>No title. Just text from the children.\n                          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                          Integer vitae mauris arcu, eu pretium nisi.\n                          Praesent fringilla ornare ullamcorper.</MediaObject>\n            <hr />\n            <MediaObject\n                title=\"Media Object with Icon\"\n                style={{\n                    marginBottom: 20\n                }}\n                media=\"exchange\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                         Integer vitae mauris arcu, eu pretium nisi.\n                         Praesent fringilla ornare ullamcorper.</MediaObject>\n            <hr />\n            <MediaObject\n                title=\"Media Object Title Right Aligned\"\n                style={{\n                    marginBottom: 20\n                }}\n                media={\"http://dummyimage.com/83/09f/fff.png\"}\n                mediaAlign=\"right\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                         Integer vitae mauris arcu, eu pretium nisi.\n                         Praesent fringilla ornare ullamcorper.</MediaObject>\n        </div>\n    );\n}"}]},{"name":"Modal","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/Modal","source":"/* @flow */\nimport React from 'react';\nimport ModalBase from './ModalBase';\nimport ModalHeader from '../ModalHeader';\nimport ModalBody from '../ModalBody';\nimport ModalFooter from '../ModalFooter';\nimport Button from '../Button';\n\ntype Props = {\n  /** shorthand: text used for the header */\n  title?: string,\n  /** shorthand: callback triggered when clicking on Ok button */\n  onSubmit?: () => void,\n  /** shorthand: callback triggered when clicking on Cancel button */\n  onCancel?: () => void,\n  /** className applied to Modal component */\n  className?: string,\n  /** data-test-id applied to Modal component */\n  testId?: string,\n  /** callback triggered when the user hits ESC key*/\n  onEsc?: () => void,\n  /** callback trigger when the user clicks on the overlay*/\n  onClickOverlay?: () => void,\n  /** callback triggered when the user hits ENTER key*/\n  onEnter?: () => void,\n  /** content for Modal component*/\n  children: any,\n  /** theme object for Modal */\n  theme: ThemeT,\n  /** if true applies the danger class to the modal (only when using shorthands)*/\n  isDanger?: bool\n};\n\ntype DefaultProps = {\n  title: string,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  title: '',\n  theme: {},\n};\n\n/**\n * Describe the purpose of Modal here\n */\nexport default class Modal extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n\n  render() {\n    const {\n      title,\n      onSubmit,\n      onCancel,\n      className,\n      testId,\n      onEsc,\n      onClickOverlay,\n      onEnter,\n      children,\n      isDanger,\n      theme,\n      } = this.props;\n\n    const isUsingShorthands = title && onSubmit && onCancel;\n    // if the user passes shorthands, render using default modal configuration\n    if (isUsingShorthands) {\n      return (\n        <ModalBase\n          theme={theme}\n          className={className}\n          testId={testId}\n          onEnter={onSubmit}\n          onEsc={onCancel}\n          onClickOverlay={onCancel}\n        >\n          <ModalHeader testId={testId && `modal-header-${testId}`} isDanger={isDanger}>\n            <h1>{title}</h1>\n          </ModalHeader>\n          <ModalBody testId={testId && `modal-body-${testId}`}>\n            {children}\n          </ModalBody>\n          <ModalFooter testId={testId && `modal-footer-${testId}`}>\n            <Button onClick={onCancel} kind=\"tertiary\" noFill testId={testId && `modal-cancel-${testId}`}>Cancel</Button>\n            <Button onClick={onSubmit} kind={isDanger ? 'danger' : 'primary'} testId={testId && `modal-submit-${testId}`}>Ok</Button>\n          </ModalFooter>\n        </ModalBase>\n      );\n    }\n\n    // Log warning if missing shorthands\n    if (title || onSubmit || onCancel) {\n      logWarning(title, onSubmit, onCancel); // eslint-disable-line\n    }\n\n    // if not using shorthands, just render children\n    return (\n      <ModalBase\n        theme={theme}\n        className={className}\n        testId={testId}\n        onEnter={onEnter}\n        onEsc={onEsc}\n        onClickOverlay={onClickOverlay}\n      >\n        {children}\n      </ModalBase>\n    );\n  }\n}\n\nfunction logWarning(title, onSubmit, onCancel) {\n  const present = [];\n  const missing = [];\n  (title ? present : missing).push('title');\n  (onSubmit ? present : missing).push('onSubmit');\n  (onCancel ? present : missing).push('onCancel');\n  // eslint-disable-next-line\n  console.warn(`\n    Warning: when using shorthands, all of them must be used.\n    You are using '${present.join('\\' and \\'')}', but '${missing.join('\\' and \\'')}' ${missing.length > 1 ? 'are' : 'is'} missing.\n  `);\n}\n","description":"Describe the purpose of Modal here","methods":[],"props":{"title":{"flowType":{"name":"string"},"required":false,"description":"shorthand: text used for the header","defaultValue":{"value":"''","computed":false}},"onSubmit":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"shorthand: callback triggered when clicking on Ok button"},"onCancel":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"shorthand: callback triggered when clicking on Cancel button"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Modal component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"data-test-id applied to Modal component"},"onEsc":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"callback triggered when the user hits ESC key"},"onClickOverlay":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"callback trigger when the user clicks on the overlay"},"onEnter":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"callback triggered when the user hits ENTER key"},"children":{"flowType":{"name":"any"},"required":true,"description":"content for Modal component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Modal","defaultValue":{"value":"{}","computed":false}},"isDanger":{"flowType":{"name":"boolean"},"required":false,"description":"if true applies the danger class to the modal (only when using shorthands)"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/1_Modal_usage.js","requirePath":"../src/components/Modal/examples/1_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button/Button';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from '../../';\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          onEnter={this.handleSubmit}\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader>\n            <h1>I am a Modal</h1>\n          </ModalHeader>\n          <ModalBody>\n            <p>Hello World</p>\n          </ModalBody>\n          <ModalFooter>\n            <Button kind=\"tertiary\" onClick={this.handleDismiss} noFill>Cancel</Button>\n            <Button kind=\"primary\" onClick={this.handleSubmit}>Ok</Button>\n          </ModalFooter>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Modal Example</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Modal Example</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/2_Modal_usage.js","requirePath":"../src/components/Modal/examples/2_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button/Button';\nimport { Modal } from '../../';\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          title=\"I'm a Modal\"\n          onSubmit={this.handleSubmit}\n          onCancel={this.handleDismiss}\n        >\n          <p>Hello World</p>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Same thing, using shorthands</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Same thing, using shorthands</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/3_Modal_usage.js","requirePath":"../src/components/Modal/examples/3_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button/Button';\nimport { Modal } from '../../';\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          title=\"I'm a Modal\"\n          onSubmit={this.handleSubmit}\n          onCancel={this.handleDismiss}\n          isDanger\n        >\n          <p>Hello World</p>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Danger Modal</h2>\n        <Button onClick={this.handleOpen} kind=\"danger\">I dare you to open me</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Danger Modal</h2>\n            <Button onClick={this.handleOpen} kind=\"danger\">I dare you to open me</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/4_Modal_usage.js","requirePath":"../src/components/Modal/examples/4_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button';\nimport TextField from '../../TextField';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from '../../';\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = {\n      text: '',\n      open: false\n    };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.value });\n  }\n\n  handleReset() {\n    this.setState({ text: '' });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          onEnter={this.handleSubmit}\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader onClose={this.handleDismiss}>\n            <h1>{'Type \"mulesoft\"'}</h1>\n          </ModalHeader>\n          <ModalBody>\n            <TextField\n              value={this.state.text}\n              onChange={this.handleChange}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              kind=\"tertiary\"\n              onClick={this.handleDismiss}\n              noFill\n            >Cancel</Button>\n            <Button\n              kind=\"tertiary\"\n              onClick={this.handleReset}\n              noFill\n            >Reset</Button>\n            <Button\n              kind=\"primary\"\n              onClick={this.handleSubmit}\n              disabled={this.state.text !== 'mulesoft'}\n            >Ok</Button>\n          </ModalFooter>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Somthing more complex</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Somthing more complex</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/5_Modal_usage.js","requirePath":"../src/components/Modal/examples/5_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button';\nimport { Modal, ModalHeader, ModalBody } from '../../';\n\nconst contentStyle = {\n  width: '100%',\n  height: 300,\n  textAlign: 'center',\n  paddingTop: 130\n};\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader onClose={this.handleDismiss}>\n            <h1>I have no footer</h1>\n          </ModalHeader>\n          <ModalBody>\n            <div style={contentStyle}>\n              Press Esc, click on the X, or click outside to close me.\n            </div>\n          </ModalBody>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>No Footer</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>No Footer</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/6_Modal_usage.js","requirePath":"../src/components/Modal/examples/6_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button';\nimport { Modal, ModalBody } from '../../';\n\nconst contentStyle = {\n  width: '100%',\n  height: 300,\n  textAlign: 'center',\n  paddingTop: 130\n};\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalBody>\n            <div style={contentStyle}>\n              {`I have no header. I have no footer. I'm just content.\n                Hit ESC or click outside to close me.`}\n            </div>\n          </ModalBody>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>No Nothing</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>No Nothing</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Modal/examples/7_Modal_usage.js","requirePath":"../src/components/Modal/examples/7_Modal_usage.js","description":"","source":"import React from 'react';\nimport Button from '../../Button/Button';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from '../../';\n\n/**\n * @component ../../Modal\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          onEnter={this.handleSubmit}\n          onEsc={this.handleDismiss}\n          onClickOverlay={this.handleDismiss}\n        >\n          <ModalHeader onClose={this.handleDismiss}>\n            <h1>\n              This is a very very very very very very very very very very very very very\n              very very very very very very very very very long title\n            </h1>\n          </ModalHeader>\n          <ModalBody>\n            <p>Supports multiline headers</p>\n          </ModalBody>\n          <ModalFooter>\n            <Button kind=\"tertiary\" onClick={this.handleDismiss} noFill>Cancel</Button>\n            <Button kind=\"primary\" onClick={this.handleSubmit}>Ok</Button>\n          </ModalFooter>\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Multiline Header</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Multiline Header</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"}]},{"name":"Pill","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Pill/Pill","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** Classname applied to the pill */\n  className?: string,\n  /** Function to call when \"x\" is clicked */\n  onRemove?: () => void,\n  /** If true, the pill will be disabled */\n  disabled?: bool,\n  /** children to render inside the pill */\n  children: React.Children,\n  /** theme object for pill */\n  theme: ThemeT,\n  /** id to put on the element for automation test */\n  testId: string,\n}\n\ntype DefaultProps = {\n  theme: ThemeT,\n}\n\nconst defaultProps = {\n  theme: {},\n};\n\n/**\n * Used for displaying closeable pills/tags\n */\nexport default class Pill extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n\n  handleRemove = (e: SyntheticMouseEvent) => {\n    const { onRemove, disabled } = this.props;\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!disabled && onRemove) {\n      onRemove();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      theme,\n      testId,\n      // eslint-disable-next-line no-unused-vars\n      onRemove,\n      ...props\n    } = this.props;\n\n    return (\n      <span\n        className={classNames(className, theme.pill)}\n        data-test-id={testId}\n        data-anypoint-component=\"Pill\"\n        {...props}\n      >\n        {children}\n        <button\n          type=\"button\"\n          onClick={this.handleRemove}\n          data-test-id={testId && `${testId}-remove`}\n        >\n          ×\n        </button>\n      </span>\n    );\n  }\n}\n","description":"Used for displaying closeable pills/tags","methods":[],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"Classname applied to the pill"},"onRemove":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Function to call when \"x\" is clicked"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"If true, the pill will be disabled"},"children":{"flowType":{"name":"unknown"},"required":true,"description":"children to render inside the pill"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for pill","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"id to put on the element for automation test"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Pill/examples/1_pill_usage.js","requirePath":"../src/components/Pill/examples/1_pill_usage.js","description":"","source":"import React, { Component } from 'react';\nimport Pill from '../../';\n/**\n* @component ../../Pill\n */\n\n/* eslint-disable no-console */\nexport default class YourApp extends Component { // eslint-disable-line\n  render() {\n    return (\n      <div>\n        <Pill onRemove={function onRemove() { console.log('remove pill'); }}>\n          Blue Pill\n        </Pill>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Pill\n                onRemove={function onRemove() {\n                    console.log(\"remove pill\");\n                }}>Blue Pill</Pill>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Pill/examples/2_pill_usage.js","requirePath":"../src/components/Pill/examples/2_pill_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Pill, Pills } from '../../';\n\n/**\n * @component ../../Pill\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fruits: [{\n        id: 1,\n        label: 'apple',\n      }, {\n        id: 2,\n        label: 'bannana',\n      }, {\n        id: 3,\n        label: 'orange',\n      }]\n    };\n\n    this.handleRemoveFruit = this.handleRemoveFruit.bind(this);\n  }\n\n  handleRemoveFruit(id) {\n    this.setState({\n      fruits: this.state.fruits.filter(fruit => fruit.id !== id)\n    });\n  }\n\n  render() {\n    const { fruits } = this.state;\n    const handleRemoveFruit = this.handleRemoveFruit;\n    return (\n      <div>\n        <Pills>\n          {fruits.map(fruit => (\n            <Pill\n              key={fruit.id}\n              onRemove={function () { handleRemoveFruit(fruit.id); }}\n            >\n              {fruit.label}\n            </Pill>\n          ))}\n        </Pills>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        fruits\n    } = this.state;\n\n    const handleRemoveFruit = this.handleRemoveFruit;\n\n    return (\n        <div>\n            <Pills>\n                {fruits.map(fruit => <Pill\n                    key={fruit.id}\n                    onRemove={function() {\n                        handleRemoveFruit(fruit.id);\n                    }}>\n                    {fruit.label}\n                </Pill>)}\n            </Pills>\n        </div>\n    );\n}"}]},{"name":"Popover","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Popover/Popover","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Trigger from 'rc-trigger';\n\ntype Props = {\n  /* Set the default open/closed state of the popup */\n  isOpen: any,\n  /* Trigger component to trigger the popover */\n  triggerComponent: Object,\n  /* content in the popover */\n  content: any,\n  /* content in the dropdown menu */\n  children: any,\n  /* Array of X and Y offset for custom positioning */\n  offset: number[],\n  /** Array of type of events to trigger popover on. ['click', 'hover'] */\n  triggerOn: string[],\n  /* trigger function on open */\n  onOpen: () => void,\n  /* trigger function on close */\n  onClose: () => void,\n  /* trigger function on visiblity change */\n  onVisiblityChange: () => void,\n  /** If true, popover will close when another element clicked */\n  closeOnClickOutside: boolean,\n  /** If true, popover will close when contents in popover clicked */\n  closeOnClickInside: boolean,\n  /* anchor position. */\n  anchorPosition: string,\n  /* popup position */\n  popupPosition: string,\n  /* If true, force popover content to fixed positioning */\n  isFixed: boolean,\n  /* A function when called, should return the container DOM for the popover */\n  getPopoverContainer: () => void,\n  /** Classname applied to the popover trigger */\n  className: string,\n  /** theme object for pill */\n  theme: ThemeT,\n  /** id applied to Popover component */\n  testId?: string\n};\n\ntype State = {\n  isOpen: any,\n  hackBecauseThirdPartyCode: boolean\n};\n\ntype DefaultProps = {\n  anchorPosition: string,\n  popupPosition: string,\n  triggerOn: string[],\n  closeOnClickOutside: boolean,\n  isFixed: boolean,\n  getPopoverContainer: () => any,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  anchorPosition: 'tr',\n  popupPosition: 'tr',\n  triggerOn: ['click'],\n  closeOnClickOutside: true,\n  isFixed: false,\n  getPopoverContainer: () => typeof document !== 'undefined' && document.body,\n  theme: {},\n};\n\nconst noOp = () => {};\n\nexport function isNodeInRoot(node: any, root: any) {\n  while (node) {\n    if (node === root) {\n      return true;\n    }\n    // eslint-disable-next-line\n    node = node.parentNode;\n  }\n  return false;\n}\n/* Popover/Tooltip/Hovercard  */\nexport default class Popover extends Component {\n  props: Props;\n  state: State;\n\n  originalAlignment: string | null;\n  domNode: any;\n  togglePopOver: () => void;\n  handlePopoverContentClick: () => void;\n  handleVisiblityChange: () => void;\n  handleAlignmentChange: () => void;\n  handleVisiblityToggle: () => void;\n  repositionHack: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Popover';\n\n  /* istanbul ignore next  */\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isOpen: props.isOpen || false,\n      hackBecauseThirdPartyCode: false,\n    };\n    this.originalAlignment = null;\n    // set dom node for checking if clicked inside\n    this.domNode = props.getPopoverContainer();\n    this.togglePopOver = this.togglePopOver.bind(this);\n    this.handlePopoverContentClick = this.handlePopoverContentClick.bind(this);\n    this.handleVisiblityChange = this.handleVisiblityChange.bind(this);\n    this.handleAlignmentChange = this.handleAlignmentChange.bind(this);\n    this.handleVisiblityToggle = this.handleVisiblityToggle.bind(this);\n    this.repositionHack = this.repositionHack.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    /* istanbul ignore else  */\n    if (nextProps.isOpen !== this.props.isOpen) {\n      this.setState({\n        isOpen: nextProps.isOpen,\n      });\n    }\n  }\n\n  repositionHack() {\n    /* hack needed to correctly position tooltips. Remove at your peril. */\n    this.setState({\n      hackBecauseThirdPartyCode: true,\n    });\n  }\n\n  handleVisiblityToggle(visible: boolean) {\n    const { triggerOn, closeOnClickOutside } = this.props;\n    const { isOpen } = this.state;\n\n    /* If open by hover, toggle the popup */\n    if (triggerOn.indexOf('hover') > -1 && !isOpen) {\n      this.togglePopOver();\n      return false;\n    }\n\n    /* istanbul ignore else  */\n    if (closeOnClickOutside && !visible) {\n      this.togglePopOver(window.event);\n    }\n\n    return true;\n  }\n\n  handleVisiblityChange(visible: boolean) {\n    const { onVisiblityChange } = this.props;\n    /* callback for visiblity change */\n    if (onVisiblityChange) {\n      onVisiblityChange(visible);\n    }\n  }\n\n  handleAlignmentChange(align: Object) {\n    // set original alignment value\n    if (!this.originalAlignment) {\n      this.originalAlignment = align.points;\n    }\n    // if alignment fixed automatically, add class\n    if (this.originalAlignment !== align.points) {\n      let newPosition = '';\n      for (let i = 0; i < align.points.length; i += 1) {\n        const prefix = (i === 0) ? 'popup-' : 'target-';\n        newPosition += `${prefix}${align.points[i]} `;\n      }\n      return `alignment-override ${newPosition}`;\n    }\n    return '';\n  }\n\n  handlePopoverContentClick(e: any) {\n    const { triggerOn, closeOnClickInside } = this.props;\n    const el = e.target;\n    const ignoreElementClicked = el.className.match(/popover-if-clicked-ignore-close/);\n    e.stopPropagation();\n\n    /* istanbul ignore else  */\n    if (triggerOn.indexOf('click') === -1 || ignoreElementClicked) {\n      return false;\n    }\n\n    /* istanbul ignore else  */\n    if (isNodeInRoot(el, this.domNode) && el.tagName !== 'HTML' && closeOnClickInside) {\n      this.togglePopOver(e);\n    }\n\n    return true;\n  }\n\n  togglePopOver(e: Event) {\n    const openState = !this.state.isOpen;\n    const { onOpen, onClose } = this.props;\n\n    this.setState({\n      isOpen: openState,\n    }, this.repositionHack);\n\n    if (openState && onOpen) {\n      onOpen(e);\n    } else if (!openState && onClose) {\n      onClose(e);\n    }\n  }\n\n  renderPopoverContent() {\n    const { content } = this.props;\n\n    return content && React.cloneElement(content, {\n      onClick: this.handlePopoverContentClick,\n    });\n  }\n\n  renderTrigger() {\n    const { triggerComponent, triggerOn, children } = this.props;\n    const newTrigger = triggerComponent || children;\n    const oldOnClick = children.props.onClick || noOp;\n\n    /** conditionally set clickhandler to toggle or noOp */\n    const clickHandler = triggerOn.indexOf('click') === -1 ? noOp : this.togglePopOver;\n\n    return React.cloneElement(newTrigger, {\n      onClick: (e) => {\n        oldOnClick(e);\n        clickHandler(e);\n      },\n    });\n  }\n\n  render() {\n    const {\n      className, anchorPosition, popupPosition, triggerOn,\n      offset, getPopoverContainer, isFixed, theme, testId,\n    } = this.props;\n    const initialOpenState = this.props.isOpen;\n    const { isOpen } = this.state;\n    const offsetSettings = offset || [0, 0];\n    const popoverTrigger = this.renderTrigger();\n\n    const classes = classNames(\n      theme.popoverTrigger, /* localized styles */\n      className, /* user specified classNames */\n      `content-shown-${isOpen}` /* prop based classnames */\n    );\n\n    return (\n      <span\n        className={classes}\n        data-test-id={testId}\n        data-anypoint-component={Popover.displayName}\n      >\n        <Trigger\n          popupAlign={{\n            offset: offsetSettings, // [x, y]\n            overflow: {\n              adjustX: 1,\n              adjustY: 1,\n            },\n            points: [popupPosition, anchorPosition],\n          }}\n          popupVisible={this.state.isOpen}\n          getPopupContainer={getPopoverContainer}\n          defaultPopupVisible={initialOpenState}\n          onPopupVisibleChange={this.handleVisiblityToggle}\n          afterPopupVisibleChange={this.handleVisiblityChange}\n          getPopupClassNameFromAlign={this.handleAlignmentChange}\n          action={triggerOn}\n          popupClassName={\n            classNames(\n              theme.popoverContent,\n              'dropdown-menu-popup',\n              { [theme.popoverFixed]: isFixed },\n            )\n          }\n          popup={this.renderPopoverContent()}\n        >\n          {popoverTrigger}\n        </Trigger>\n      </span>\n    );\n  }\n}\n","description":"","displayName":"Popover","methods":[{"name":"repositionHack","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleVisiblityToggle","docblock":null,"modifiers":[],"params":[{"name":"visible","type":{"name":"boolean"}}],"returns":null},{"name":"handleVisiblityChange","docblock":null,"modifiers":[],"params":[{"name":"visible","type":{"name":"boolean"}}],"returns":null},{"name":"handleAlignmentChange","docblock":null,"modifiers":[],"params":[{"name":"align","type":{"name":"Object","alias":"Object"}}],"returns":null},{"name":"handlePopoverContentClick","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null},{"name":"togglePopOver","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"Event","alias":"Event"}}],"returns":null},{"name":"renderPopoverContent","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTrigger","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"isOpen":{"flowType":{"name":"any"},"required":true,"description":""},"triggerComponent":{"flowType":{"name":"Object"},"required":true,"description":""},"content":{"flowType":{"name":"any"},"required":true,"description":""},"children":{"flowType":{"name":"any"},"required":true,"description":""},"offset":{"flowType":{"name":"unknown"},"required":true,"description":""},"triggerOn":{"flowType":{"name":"unknown"},"required":true,"description":"Array of type of events to trigger popover on. ['click', 'hover']","defaultValue":{"value":"['click']","computed":false}},"onOpen":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"onClose":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"onVisiblityChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"closeOnClickOutside":{"flowType":{"name":"boolean"},"required":true,"description":"If true, popover will close when another element clicked","defaultValue":{"value":"true","computed":false}},"closeOnClickInside":{"flowType":{"name":"boolean"},"required":true,"description":"If true, popover will close when contents in popover clicked"},"anchorPosition":{"flowType":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"'tr'","computed":false}},"popupPosition":{"flowType":{"name":"string"},"required":true,"description":"","defaultValue":{"value":"'tr'","computed":false}},"isFixed":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"false","computed":false}},"getPopoverContainer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"","defaultValue":{"value":"() => typeof document !== 'undefined' && document.body","computed":false}},"className":{"flowType":{"name":"string"},"required":true,"description":"Classname applied to the popover trigger"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for pill","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Popover component"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Popover/examples/1_Popover_usage.js","requirePath":"../src/components/Popover/examples/1_Popover_usage.js","description":"","source":"import React from 'react';\nimport { Popover } from '../../';\n\n/**\n * @component ../../Popover\n */\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getPopoverContent\"] }] */\nexport default class YourApp extends React.Component {\n  getPopoverContent() {\n    return (\n      <span style={{ padding: '10px' }}>Popover Content</span>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Popover\n          content={this.getPopoverContent()}\n          triggerOn={['hover']}\n          anchorPosition=\"bc\"\n        >\n          <div>Child content</div>\n        </Popover>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Popover\n                content={this.getPopoverContent()}\n                triggerOn={[\"hover\"]}\n                anchorPosition=\"bc\">\n                <div>Child content</div>\n            </Popover>\n        </div>\n    );\n}"}]},{"name":"ProfilePhoto","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ProfilePhoto/ProfilePhoto","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype SizeT = 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl';\n\ntype Props = {\n  /** className applied to profile photo */\n  className?: string,\n  /** path to src of profile image of the current user */\n  image?: string,\n  /** first name of the current user */\n  firstName?: string,\n  /** last name of the current user */\n  lastName?: string,\n  /** size of the image */\n  size: SizeT,\n  /** theme object for the profile photo */\n  theme: ThemeT,\n  /** style applied to profile photo wrapper */\n  testId: string,\n};\n\ntype DefaultProps = {\n  size: SizeT,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  size: 's',\n  theme: {},\n};\n\nfunction getInitials(firstName, lastName) {\n  if (firstName && lastName) {\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();\n  }\n  return 'N/A';\n}\n\n/**\n * Used for displaying profile photos\n */\nexport default class ProfilePhoto extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'ProfilePhoto';\n\n  render() {\n    const {\n      className,\n      image,\n      firstName,\n      lastName,\n      size,\n      theme,\n      testId,\n      ...props\n    } = this.props;\n    const sizeTheme = theme[`size-${size}`];\n\n    return (\n      <div\n        className={classNames(className, theme.profilePhoto, sizeTheme)}\n        data-test-id={testId}\n        data-anypoint-component={ProfilePhoto.displayName}\n        {...props}\n      >\n        <img\n          display-if={image}\n          className={sizeTheme}\n          src={image}\n          data-test-id={testId && `${testId}-image`}\n          role=\"presentation\"\n        />\n        <span\n          display-if={!image}\n          data-test-id={testId && `${testId}-initials`}\n        >\n          {getInitials(firstName, lastName)}\n        </span>\n      </div>\n    );\n  }\n}\n","description":"Used for displaying profile photos","displayName":"ProfilePhoto","methods":[],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to profile photo"},"image":{"flowType":{"name":"string"},"required":false,"description":"path to src of profile image of the current user"},"firstName":{"flowType":{"name":"string"},"required":false,"description":"first name of the current user"},"lastName":{"flowType":{"name":"string"},"required":false,"description":"last name of the current user"},"size":{"flowType":{"name":"union","raw":"'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl'","elements":[{"name":"literal","value":"'xs'"},{"name":"literal","value":"'s'"},{"name":"literal","value":"'m'"},{"name":"literal","value":"'l'"},{"name":"literal","value":"'xl'"},{"name":"literal","value":"'xxl'"}]},"required":true,"description":"size of the image","defaultValue":{"value":"'s'","computed":false}},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for the profile photo","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"style applied to profile photo wrapper"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ProfilePhoto/examples/1_profilePhoto_usage.js","requirePath":"../src/components/ProfilePhoto/examples/1_profilePhoto_usage.js","description":"","source":"import React, { Component } from 'react';\nimport ProfilePhoto from '../../';\n\n/**\n * @component ../../ProfilePhoto\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <h4>Default theme</h4>\n        <ProfilePhoto firstName=\"Foo\" lastName=\"Bar\" testId=\"profile-photo-test\" />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h4>Default theme</h4>\n            <ProfilePhoto firstName=\"Foo\" lastName=\"Bar\" testId=\"profile-photo-test\" />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ProfilePhoto/examples/2_profilePhoto_usage.js","requirePath":"../src/components/ProfilePhoto/examples/2_profilePhoto_usage.js","description":"","source":"import React, { Component } from 'react';\nimport ProfilePhoto from '../../';\n\n/**\n * @component ../../ProfilePhoto\n */\n\n// eslint-disable-next-line\nexport default class YourApp extends Component { // eslint-disable-line\n  render() {\n    return (\n      <div>\n        <h4>Light Theme</h4>\n        <ProfilePhoto firstName=\"Foo\" theme={ProfilePhoto.themes.LightTheme} lastName=\"Bar\" testId=\"profile-photo-test\" />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h4>Light Theme</h4>\n            <ProfilePhoto\n                firstName=\"Foo\"\n                theme={ProfilePhoto.themes.LightTheme}\n                lastName=\"Bar\"\n                testId=\"profile-photo-test\" />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ProfilePhoto/examples/3_profilePhoto_usage.js","requirePath":"../src/components/ProfilePhoto/examples/3_profilePhoto_usage.js","description":"","source":"import React, { Component } from 'react';\nimport ProfilePhoto from '../../';\n\n/**\n * @component ../../ProfilePhoto\n */\n\n\nexport default class YourApp extends Component { // eslint-disable-line\n  render() {\n    return (\n      <div>\n        <h4>ProfilePhoto with image</h4>\n        <ProfilePhoto firstName=\"Foo\" lastName=\"Bar\" testId=\"profile-photo-test\" image=\"http://icons.iconarchive.com/icons/fasticon/batman-begins/128/batman-icon.png\" />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h4>ProfilePhoto with image</h4>\n            <ProfilePhoto\n                firstName=\"Foo\"\n                lastName=\"Bar\"\n                testId=\"profile-photo-test\"\n                image=\"http://icons.iconarchive.com/icons/fasticon/batman-begins/128/batman-icon.png\" />\n        </div>\n    );\n}"}]},{"name":"Radio","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Radio/Radio","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** True for checked, false for not checked */\n  checked: boolean,\n  /** True for disabled, false for not disabled */\n  disabled: boolean,\n  /** Set the text to display with the radio */\n  label: string,\n  /** Set the name on radio */\n  name: string,\n  /** Your event handler for when radio value is changed */\n  onChange: () => void,\n  /** set the value of the radio */\n  value: any,\n  /** className applied to radio */\n  className: string,\n  /** style applied to radio */\n  style: Object,\n  /** ID appiled to radio and label htmlFor for UX and accessiblity */\n  id: string,\n  /** id applied to Radio component */\n  testId?: string,\n  /** theme object for Radio */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nexport default class Radio extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Radio';\n\n  getClassNames() {\n    const { className, disabled, theme } = this.props;\n    const disabledClass = (disabled) ? theme.disabled : '';\n    const classProp = className || '';\n    return classNames(theme.Radio, classProp, disabledClass);\n  }\n\n  handleClick = () => {\n    const { checked, disabled, onChange, value } = this.props;\n    /* istanbul ignore else */\n    if (!disabled && !checked && onChange) {\n      onChange(value);\n    }\n  };\n\n  renderLabel() {\n    const { label, testId, theme } = this.props;\n\n    return label ? (\n      <span className={theme.innerLabel} data-test-id={testId && `${testId}-label`}>\n        {label}\n      </span>\n    ) : null;\n  }\n\n  render() {\n    const { style, checked, disabled, id, testId, theme, name } = this.props; // eslint-disable-line\n    const classes = this.getClassNames();\n    return (\n      <div\n        className={classes}\n        style={style}\n        data-test-id={testId}\n        data-anypoint-component={Radio.displayName}\n      >\n        <label className={theme.label} htmlFor={id}>\n          <input\n            name={name}\n            className={theme.input}\n            onClick={this.handleClick}\n            readOnly\n            type=\"radio\"\n            id={id}\n            checked={checked}\n            disabled={disabled}\n            data-test-id={testId && `${testId}-input`}\n          />\n          <span className={theme.overlay} />\n          <svg\n            viewBox=\"0 0 120 120\"\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <circle cx=\"8\" cy=\"8\" r=\"50\" />\n          </svg>\n          {this.renderLabel()}\n        </label>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"Radio","methods":[{"name":"getClassNames","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderLabel","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"checked":{"flowType":{"name":"boolean"},"required":true,"description":"True for checked, false for not checked"},"disabled":{"flowType":{"name":"boolean"},"required":true,"description":"True for disabled, false for not disabled"},"label":{"flowType":{"name":"string"},"required":true,"description":"Set the text to display with the radio"},"name":{"flowType":{"name":"string"},"required":true,"description":"Set the name on radio"},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Your event handler for when radio value is changed"},"value":{"flowType":{"name":"any"},"required":true,"description":"set the value of the radio"},"className":{"flowType":{"name":"string"},"required":true,"description":"className applied to radio"},"style":{"flowType":{"name":"Object"},"required":true,"description":"style applied to radio"},"id":{"flowType":{"name":"string"},"required":true,"description":"ID appiled to radio and label htmlFor for UX and accessiblity"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Radio component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Radio","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Radio/examples/1_Radio_usage.js","requirePath":"../src/components/Radio/examples/1_Radio_usage.js","description":"","source":"import React from 'react';\nimport { Radio } from '../../';\n\n/**\n * @component ../../Radio\n */\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"renderRadio\"] }] */\nexport default class YourApp extends React.Component {\n\n  renderRadio() {\n    return (\n      <Radio label=\"Label for Radio\" />\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'flex-start' }}>\n        {this.renderRadio()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                alignItems: \"flex-start\"\n            }}>\n            {this.renderRadio()}\n        </div>\n    );\n}"}]},{"name":"RadioGroup","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/RadioGroup/RadioGroup","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** Set the text to display with the checkbox */\n  label: string,\n  /** Set the name to inputs from radiogroup */\n  name?: string,\n  /** if true, radio group will be disabled */\n  disabled?: boolean,\n  /** Your event handler for when radio group value has changed */\n  onChange: () => void,\n  value?: any,\n  /** Set Alignment of label */\n  radiosOrientation: 'horizontal'|'vertical',\n  /* radio elements in the RadioGroup */\n  children: any,\n  /** className applied to the control */\n  className: string,\n  /** Orientation of the radio elements (default: horizontal) */\n  orientation: 'horizontal'|'vertical',\n  /** Is component valid */\n  isValid: boolean,\n  /** if true, the RadioGroup has been touched by the user */\n  isDirty?: boolean,\n  /** if true, the RadioGroup is focused */\n  isFocused?: boolean,\n  /** id applied to RadioGroup component */\n  testId?: string,\n  /** theme object for RadioGroup */\n  theme: ThemeT,\n}\n\ntype State = {\n  nameValue: string\n};\n\ntype DefaultProps = {\n  disabled: boolean,\n  label: string,\n  onChange: () => void,\n  radiosOrientation: 'horizontal',\n  orientation: 'horizontal',\n  theme: ThemeT,\n  isValid: boolean,\n  isFocused: boolean,\n  isDirty: boolean,\n}\n\nconst defaultProps = {\n  disabled: false,\n  label: '',\n  onChange: () => {},\n  radiosOrientation: 'horizontal',\n  orientation: 'horizontal',\n  theme: {},\n  isValid: true,\n  isFocused: false,\n  isDirty: false,\n};\n\nexport default class RadioGroup extends Component {\n  props: Props;\n  state: State;\n\n  handleChange: () => void;\n\n  static displayName = 'RadioGroup';\n  static defaultProps: DefaultProps = defaultProps;\n\n  /* istanbul ignore next */\n  constructor(props: Props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { nameValue: props.name || `radioGroup-${(new Date()).valueOf().toString()}` };\n  }\n\n  handleChange(value: any) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const { onChange } = this.props;\n    onChange({ value });\n  }\n\n  renderRadioButtons() {\n    const { children, disabled, theme, testId, radiosOrientation, value } = this.props;\n    const radios = React.Children.map(children, (child, idx) =>\n      React.cloneElement(child, {\n        key: idx,\n        name: this.state.nameValue,\n        checked: value === child.props.value,\n        disabled: disabled || child.props.disabled,\n        style: { marginRight: 40 },\n        onChange: this.handleChange,\n      })\n    );\n\n    return (\n      <div\n        data-test-id={testId && `${testId}-radios`}\n        className={classNames(theme.radios, theme[`radios-orientation-${radiosOrientation}`])}\n      >\n        {radios}\n      </div>\n    );\n  }\n\n  render() {\n    const { orientation, label, className, testId, theme,\n      isDirty, isFocused, isValid } = this.props;\n\n    return (\n      <div\n        className={\n          classNames(\n            theme.radioGroup,\n            theme[`radio-valid-${isValid ? 'true' : 'false'}`],\n            theme[`orientation-${orientation}`],\n            isDirty ? theme['is-dirty'] : '',\n            isFocused ? theme['is-focused'] : '',\n            className\n          )\n        }\n        data-test-id={testId}\n        data-anypoint-component={RadioGroup.displayName}\n      >\n        <div className={theme.label} data-test-id={testId && `${testId}-label`}>{label}</div>\n        {this.renderRadioButtons()}\n      </div>\n    );\n  }\n}\n","description":"","displayName":"RadioGroup","methods":[{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"value","type":{"name":"any"}}],"returns":null},{"name":"renderRadioButtons","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"label":{"flowType":{"name":"string"},"required":true,"description":"Set the text to display with the checkbox","defaultValue":{"value":"''","computed":false}},"name":{"flowType":{"name":"string"},"required":false,"description":"Set the name to inputs from radiogroup"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"if true, radio group will be disabled","defaultValue":{"value":"false","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Your event handler for when radio group value has changed","defaultValue":{"value":"() => {}","computed":false}},"value":{"flowType":{"name":"any"},"required":false,"description":""},"radiosOrientation":{"flowType":{"name":"union","raw":"'horizontal'|'vertical'","elements":[{"name":"literal","value":"'horizontal'"},{"name":"literal","value":"'vertical'"}]},"required":true,"description":"Set Alignment of label","defaultValue":{"value":"'horizontal'","computed":false}},"children":{"flowType":{"name":"any"},"required":true,"description":""},"className":{"flowType":{"name":"string"},"required":true,"description":"className applied to the control"},"orientation":{"flowType":{"name":"union","raw":"'horizontal'|'vertical'","elements":[{"name":"literal","value":"'horizontal'"},{"name":"literal","value":"'vertical'"}]},"required":true,"description":"Orientation of the radio elements (default: horizontal)","defaultValue":{"value":"'horizontal'","computed":false}},"isValid":{"flowType":{"name":"boolean"},"required":true,"description":"Is component valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the RadioGroup has been touched by the user","defaultValue":{"value":"false","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the RadioGroup is focused","defaultValue":{"value":"false","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to RadioGroup component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for RadioGroup","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/RadioGroup/examples/1_RadioGroup_usage.js","requirePath":"../src/components/RadioGroup/examples/1_RadioGroup_usage.js","description":"","source":"import React from 'react';\nimport { RadioGroup } from '../../';\nimport { Radio } from '../../Radio';\nimport { Checkbox } from '../../Checkbox';\n/**\n * @component ../../RadioGroup\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: null, otherValue: '2', isDirty: true, isFocused: false };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleDirty = this.handleDirty.bind(this);\n    this.handleFocused = this.handleFocused.bind(this);\n  }\n\n  handleChange(e) {\n    const value = e.value;\n    console.log('value', e);\n    this.setState({ value });\n  }\n\n  handleChange2(e) {\n    const value = e.value;\n    console.log('value', e);\n    this.setState({ otherValue: value });\n  }\n\n  handleFocused() {\n    this.setState({ isFocused: !this.state.isFocused });\n  }\n\n  handleDirty() {\n    this.setState({ isDirty: !this.state.isDirty });\n  }\n\n  render() {\n    const { value, otherValue, isDirty, isFocused } = this.state;\n\n    return (\n      <div>\n        <RadioGroup\n          label=\"Radio group 1\"\n          onChange={this.handleChange}\n          value={value}\n          isDirty={isDirty}\n          isFocused={isFocused}\n        >\n          <Radio label=\"Choice 1\" value=\"1\" />\n          <Radio label=\"Choice 2\" value=\"2\" />\n          <Radio label=\"Choice 3\" value=\"3\" />\n        </RadioGroup>\n        <div style={{ margin: '10px 0' }}>\n          <RadioGroup\n            label=\"Radio group 2\"\n            onChange={this.handleChange2}\n            value={otherValue}\n            name=\"Vegetables\"\n          >\n            <Radio label=\"Choice 1\" value=\"1\" />\n            <Radio label=\"Choice 2\" value=\"2\" />\n            <Radio label=\"Choice 3\" value=\"3\" />\n          </RadioGroup>\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleDirty}\n            name=\"firstCheckbox\"\n            checked={isDirty}\n            label=\"Turn on/off dirty value\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleFocused}\n            name=\"firstCheckbox\"\n            checked={isFocused}\n            label=\"Turn on/off focused value\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        value,\n        otherValue,\n        isDirty,\n        isFocused\n    } = this.state;\n\n    return (\n        <div>\n            <RadioGroup\n                label=\"Radio group 1\"\n                onChange={this.handleChange}\n                value={value}\n                isDirty={isDirty}\n                isFocused={isFocused}>\n                <Radio label=\"Choice 1\" value=\"1\" />\n                <Radio label=\"Choice 2\" value=\"2\" />\n                <Radio label=\"Choice 3\" value=\"3\" />\n            </RadioGroup>\n            <div\n                style={{\n                    margin: \"10px 0\"\n                }}>\n                <RadioGroup\n                    label=\"Radio group 2\"\n                    onChange={this.handleChange2}\n                    value={otherValue}\n                    name=\"Vegetables\">\n                    <Radio label=\"Choice 1\" value=\"1\" />\n                    <Radio label=\"Choice 2\" value=\"2\" />\n                    <Radio label=\"Choice 3\" value=\"3\" />\n                </RadioGroup>\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDirty}\n                    name=\"firstCheckbox\"\n                    checked={isDirty}\n                    label=\"Turn on/off dirty value\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleFocused}\n                    name=\"firstCheckbox\"\n                    checked={isFocused}\n                    label=\"Turn on/off focused value\" />\n            </div>\n        </div>\n    );\n}"}]},{"name":"Rating","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Rating/Rating","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport Star from './components/Star';\n\ntype Props = {\n  /** Classname applied to rating */\n  className?: string,\n  /** theme object for rating */\n  theme: ThemeT,\n  /** rating out of total */\n  rating: number,\n  /** number of stars to display */\n  total: number,\n  /** id to put on the element for automation test */\n  testId: string,\n  /** if true, stars will be disabled */\n  disabled: boolean,\n  /** call after change rating */\n  onChange: () => void,\n};\n\ntype State = {\n  rating: number,\n  tempRating: any,\n}\n\ntype DefaultProps = {\n  theme: ThemeT,\n  disabled: boolean,\n  total: number,\n};\n\nconst defaultProps = {\n  theme: {},\n  disabled: false,\n  total: 5,\n};\n\n/**\n * Used for displaying stars\n */\nexport default class Rating extends React.Component {\n  state: State;\n  props: Props;\n\n  handleClick: () => void;\n  handleMouseOver: () => void;\n  handleMouseOut: () => void;\n\n  static displayName = 'Rating';\n  static defaultProps: DefaultProps = defaultProps;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    const { rating } = props;\n\n    this.state = {\n      rating,\n      tempRating: null\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  componentWillUpdate(nextProps: Props, nextState: State) {\n    const { disabled, rating, total } = this.props;\n    const { tempRating } = this.state;\n    if (!disabled && nextProps.rating >= 0 && nextProps.rating <= total) {\n      if (nextState.rating !== nextProps.rating && nextProps.rating !== rating) {\n        this.setState({ rating: nextProps.rating });\n        if (this.props.onChange) { this.props.onChange({ value: nextProps.rating }); }\n      }\n      if (nextState.rating === nextState.tempRating && nextState.tempRating !== tempRating) {\n        this.setState({ rating: nextState.rating });\n        if (this.props.onChange) { this.props.onChange({ value: nextState.rating }); }\n      }\n    }\n  }\n\n  handleClick(rating: number) {\n    if (!this.props.disabled) {\n      this.setState({\n        rating,\n        tempRating: rating\n      });\n    }\n  }\n\n  handleMouseOver(rating: number) {\n    if (!this.props.disabled) {\n      this.state.tempRating = this.state.rating;\n      this.state.rating = rating;\n      this.setState({\n        rating: this.state.rating,\n        tempRating: this.state.tempRating\n      });\n    }\n  }\n\n  handleMouseOut() {\n    if (!this.props.disabled) {\n      this.state.rating = this.state.tempRating;\n      this.setState({\n        rating: this.state.rating\n      });\n    }\n  }\n\n  renderStars() {\n    const { rating } = this.state;\n    const { total, disabled, theme } = this.props;\n    const stars = [];\n    for (let i = 1; i <= total; i += 1) {\n      const isSelected = (rating >= i && rating !== null) ? ` ${theme.selected}` : '';\n      const isDisabled = (disabled) ? ` ${theme.disabled}` : '';\n      stars.push(\n        <Star\n          key={i}\n          indexInRating={i}\n          className={classNames(theme.star, isSelected, isDisabled)}\n          onClick={this.handleClick}\n          onMouseOver={this.handleMouseOver}\n          onMouseOut={this.handleMouseOut}\n        />\n      );\n    }\n    return (\n      <div className={theme.foreground}>\n        {stars}\n      </div>\n    );\n  }\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      total,\n      rating,\n      ...props\n    } = this.props;\n\n    const {\n      tempRating,\n    } = this.state;\n\n    const currentRating = tempRating || rating;\n    const stars = [];\n\n    for (let i = 0; i < total; i += 1) {\n      stars.push({ isSelected: (i + 1) <= currentRating });\n    }\n    // unnecesary props\n    delete props.disabled;\n\n    return (\n      <div\n        className={classNames(className, theme.rating)}\n        data-test-id={testId}\n        data-anypoint-component={Rating.displayName}\n        {...props}\n      >\n        {this.renderStars()}\n      </div>\n    );\n  }\n}\n","description":"Used for displaying stars","displayName":"Rating","methods":[{"name":"handleClick","docblock":null,"modifiers":[],"params":[{"name":"rating","type":{"name":"number"}}],"returns":null},{"name":"handleMouseOver","docblock":null,"modifiers":[],"params":[{"name":"rating","type":{"name":"number"}}],"returns":null},{"name":"handleMouseOut","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderStars","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"Classname applied to rating"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for rating","defaultValue":{"value":"{}","computed":false}},"rating":{"flowType":{"name":"number"},"required":true,"description":"rating out of total"},"total":{"flowType":{"name":"number"},"required":true,"description":"number of stars to display","defaultValue":{"value":"5","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"id to put on the element for automation test"},"disabled":{"flowType":{"name":"boolean"},"required":true,"description":"if true, stars will be disabled","defaultValue":{"value":"false","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"call after change rating"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Rating/examples/1_rating_usage.js","requirePath":"../src/components/Rating/examples/1_rating_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Rating } from '../../';\nimport Checkbox from '../../Checkbox/Checkbox';\nimport Button from '../../Button/Button';\n/**\n * @component ../../Rating\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDisabled = this.handleDisabled.bind(this);\n    this.handleUpRating = this.handleUpRating.bind(this);\n    this.handleDownRating = this.handleDownRating.bind(this);\n    this.state = {\n      rating: 3,\n      loading: false,\n      disabled: false\n    };\n  }\n\n  handleDisabled(e) {\n    this.setState({ disabled: e.value });\n  }\n\n  handleUpRating() {\n    const newRating = this.state.rating + 1;\n    this.setState({ rating: newRating });\n  }\n\n  handleDownRating() {\n    const newRating = this.state.rating - 1;\n    this.setState({ rating: newRating });\n  }\n\n  handleChange(e) {\n    this.setState({ loading: true });\n    console.log('ratingChanged to ', e);\n    const self = this;\n    setTimeout(() => {\n      self.setState({ rating: e.value, loading: false });\n    }, 1000);\n  }\n  render() {\n    const renderComponent = this.state.loading\n      ?\n        <h4>Loading...</h4>\n      :\n        (<Rating\n          testId=\"rating\"\n          rating={this.state.rating}\n          disabled={this.state.disabled}\n          onChange={this.handleChange}\n        />);\n    return (\n      <div>\n        <h4>Rating component</h4>\n        <div style={{ padding: '10px 0' }}>\n          {renderComponent}\n        </div>\n        <div style={{ padding: '10px 0' }}>\n          <Checkbox\n            onChange={this.handleDisabled}\n            name=\"EditableCheckbox\"\n            checked={this.state.disabled}\n            label=\"Turn on/off disabled rating\"\n          />\n        </div>\n        <h5>Button for manage rating</h5>\n        <div>\n          <Button\n            style={{ marginRight: 10 }}\n            onClick={this.handleUpRating}\n            disabled={this.state.rating >= 5 || this.state.disabled}\n          >\n            <span>Up rating</span>\n          </Button>\n          <Button\n            onClick={this.handleDownRating}\n            disabled={this.state.rating <= 0 || this.state.disabled}\n          >\n            <span>Down rating</span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const renderComponent = (this.state.loading ? <h4>Loading...</h4> : <Rating\n        testId=\"rating\"\n        rating={this.state.rating}\n        disabled={this.state.disabled}\n        onChange={this.handleChange} />);\n\n    return (\n        <div>\n            <h4>Rating component</h4>\n            <div\n                style={{\n                    padding: \"10px 0\"\n                }}>\n                {renderComponent}\n            </div>\n            <div\n                style={{\n                    padding: \"10px 0\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDisabled}\n                    name=\"EditableCheckbox\"\n                    checked={this.state.disabled}\n                    label=\"Turn on/off disabled rating\" />\n            </div>\n            <h5>Button for manage rating</h5>\n            <div>\n                <Button\n                    style={{\n                        marginRight: 10\n                    }}\n                    onClick={this.handleUpRating}\n                    disabled={this.state.rating >= 5 || this.state.disabled}>\n                    <span>Up rating</span>\n                </Button>\n                <Button\n                    onClick={this.handleDownRating}\n                    disabled={this.state.rating <= 0 || this.state.disabled}>\n                    <span>Down rating</span>\n                </Button>\n            </div>\n        </div>\n    );\n}"}]},{"name":"ResizablePanel","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ResizablePanel/ResizablePanel","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** className applied to ResizablePanel component */\n  className?: string,\n  /** position \"top\" | \"left\" | \"right\" | \"bottom\" */\n  position?: \"top\" | \"left\" | \"right\" | \"bottom\",\n  /** width applied to ResizablePanel component */\n  width?: number,\n  /** height applied to ResizablePanel component */\n  height?: number,\n  /** minWidth for the ResizablePanel */\n  minWidth?: number,\n  /** maxWidth for the ResizablePanel */\n  maxWidth?: number,\n  /** minHeight for the ResizablePanel */\n  minHeight?: number,\n  /** maxHeight for the ResizablePanel */\n  maxHeight?: number,\n  /** set the default open/closed state to ResizablePanel */\n  isOpen?: boolean,\n  /** set isResizable */\n  isResizable?: boolean,\n  /** onToggle handler */\n  onToggle?: Function,\n  /** onResize handler */\n  onResize?: Function,\n  /** the content that will be in ResizablePanel */\n  children?: any,\n  /** theme object for ResizablePanel */\n  theme?: ThemeT,\n  /** id applied to ResizablePanel component */\n  testId?: string,\n};\n\ntype DefaultProps = {\n  position: 'top' | 'left' | 'right' | 'bottom',\n  isResizable: boolean,\n  isOpen: boolean,\n  width: number,\n  height: number,\n  minWidth: number,\n  maxWidth: number,\n  minHeight: number,\n  maxHeight: number,\n  onResize: Function,\n  onToggle: Function,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  position: 'left',\n  isResizable: true,\n  isOpen: true,\n  width: 400,\n  height: 400,\n  minWidth: 200,\n  maxWidth: 600,\n  minHeight: 200,\n  maxHeight: 600,\n  onToggle: () => {},\n  theme: {},\n};\n\n/**\n * Describe the purpose of ResizablePanel here\n */\nexport default class ResizablePanel extends React.Component {\n  props: Props;\n\n  static displayName = 'ResizablePanel';\n  static defaultProps: DefaultProps = defaultProps;\n  static defaultToggleSize = 100;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isOpen: this.props.isOpen,\n    };\n  }\n\n  onElementRef = (ref) => {\n    this.element = ref;\n  };\n\n  resize: {\n    isResizing: boolean,\n    startWidth: number,\n    startHeight: number,\n    startX: number,\n    startY: number,\n  } = {\n    isResizing: false\n  };\n\n  handleMouseDown = (e) => {\n    const { isResizable } = this.props;\n\n    if (isResizable) {\n      this.resize.startX = e.clientX;\n      this.resize.startY = e.clientY;\n      this.resize.startWidth = this.element.offsetWidth;\n      this.resize.startHeight = this.element.offsetHeight;\n      this.resize.isResizing = true;\n\n      document.addEventListener('mousemove', this.handleMouseMove);\n      document.addEventListener('mouseup', this.handleMouseUp);\n    }\n  };\n\n  handleMouseMove = (e) => {\n    if (this.resize.isResizing) {\n      const { position, onResize, onToggle, minHeight, maxHeight, minWidth, maxWidth }\n        = this.props;\n\n      let newValue;\n      let beyondMinWidth;\n      let startValue;\n\n      switch (position) {\n        case 'top':\n        case 'bottom': {\n          startValue = this.resize.startHeight;\n\n          const diff = (e.clientY - this.resize.startY) * (position === 'bottom' ? -1 : 1);\n\n          newValue = startValue + diff;\n          if (newValue < minHeight) {\n            document.body.style.cursor = 'n-resize';\n            if (minHeight - newValue > ResizablePanel.defaultToggleSize) {\n              beyondMinWidth = true;\n            }\n          } else if (newValue > maxHeight) {\n            document.body.style.cursor = 's-resize';\n          } else {\n            document.body.style.cursor = 'ns-resize';\n          }\n\n          if (onResize) {\n            onResize({ value: newValue });\n          } else {\n            this.element.style.height = `${newValue}px`;\n          }\n\n          break;\n        }\n\n        case 'left':\n        case 'right':\n        default: {\n          startValue = this.resize.startWidth;\n\n          const diff = (e.clientX - this.resize.startX) * (position === 'right' ? -1 : 1);\n\n          newValue = startValue + diff;\n          if (newValue < minWidth) {\n            document.body.style.cursor = 'e-resize';\n            if (minWidth - newValue > ResizablePanel.defaultToggleSize) {\n              beyondMinWidth = true;\n            }\n          } else if (newValue > maxWidth) {\n            document.body.style.cursor = 'w-resize';\n          } else {\n            document.body.style.cursor = 'ew-resize';\n          }\n\n          if (onResize) {\n            onResize({ value: newValue });\n          } else {\n            this.element.style.width = `${newValue}px`;\n          }\n        }\n      }\n\n      if (beyondMinWidth) {\n        this.handleMouseUp();\n        onToggle({ value: false });\n      }\n    }\n  };\n\n  handleMouseUp = () => {\n    this.resize.isResizing = false;\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('mouseup', this.handleMouseUp);\n    document.body.style.cursor = '';\n  };\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      isOpen,\n      position,\n      width,\n      height,\n      minHeight,\n      maxHeight,\n      minWidth,\n      maxWidth,\n      children,\n    } = this.props;\n\n    const style = {};\n\n    if (isOpen) {\n      switch (position) {\n        case 'top':\n        case 'bottom': {\n          style.height = `${height}px`;\n          style.maxHeight = `${maxHeight}px`;\n          style.minHeight = `${minHeight}px`;\n          break;\n        }\n\n        case 'left':\n        case 'right':\n        default: {\n          style.width = `${width}px`;\n          style.maxWidth = `${maxWidth}px`;\n          style.minWidth = `${minWidth}px`;\n        }\n      }\n    }\n\n    return (\n      <div\n        className={classNames(\n          className,\n          theme.resizablePanel,\n          theme[position],\n          isOpen && theme.open,\n        )}\n        ref={this.onElementRef}\n        data-test-id={testId}\n        data-anypoint-component={ResizablePanel.displayName}\n        style={style}\n      >\n        <div className={theme.content} data-test-id={testId && `${testId}-content`} >\n          {children}\n        </div>\n        <button\n          data-test-id={testId && `${testId}-button`}\n          className={theme.handle}\n          onMouseDown={this.handleMouseDown}\n        />\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of ResizablePanel here","displayName":"ResizablePanel","methods":[],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to ResizablePanel component"},"position":{"flowType":{"name":"union","raw":"\"top\" | \"left\" | \"right\" | \"bottom\"","elements":[{"name":"literal","value":"\"top\""},{"name":"literal","value":"\"left\""},{"name":"literal","value":"\"right\""},{"name":"literal","value":"\"bottom\""}]},"required":false,"description":"position \"top\" | \"left\" | \"right\" | \"bottom\"","defaultValue":{"value":"'left'","computed":false}},"width":{"flowType":{"name":"number"},"required":false,"description":"width applied to ResizablePanel component","defaultValue":{"value":"400","computed":false}},"height":{"flowType":{"name":"number"},"required":false,"description":"height applied to ResizablePanel component","defaultValue":{"value":"400","computed":false}},"minWidth":{"flowType":{"name":"number"},"required":false,"description":"minWidth for the ResizablePanel","defaultValue":{"value":"200","computed":false}},"maxWidth":{"flowType":{"name":"number"},"required":false,"description":"maxWidth for the ResizablePanel","defaultValue":{"value":"600","computed":false}},"minHeight":{"flowType":{"name":"number"},"required":false,"description":"minHeight for the ResizablePanel","defaultValue":{"value":"200","computed":false}},"maxHeight":{"flowType":{"name":"number"},"required":false,"description":"maxHeight for the ResizablePanel","defaultValue":{"value":"600","computed":false}},"isOpen":{"flowType":{"name":"boolean"},"required":false,"description":"set the default open/closed state to ResizablePanel","defaultValue":{"value":"true","computed":false}},"isResizable":{"flowType":{"name":"boolean"},"required":false,"description":"set isResizable","defaultValue":{"value":"true","computed":false}},"onToggle":{"flowType":{"name":"Function"},"required":false,"description":"onToggle handler","defaultValue":{"value":"() => {}","computed":false}},"onResize":{"flowType":{"name":"Function"},"required":false,"description":"onResize handler"},"children":{"flowType":{"name":"any"},"required":false,"description":"the content that will be in ResizablePanel"},"theme":{"flowType":{"name":"ThemeT"},"required":false,"description":"theme object for ResizablePanel","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to ResizablePanel component"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ResizablePanel/examples/1_ResizablePanel_usage.js","requirePath":"../src/components/ResizablePanel/examples/1_ResizablePanel_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { ResizablePanel } from '../../';\nimport { Button } from '../../Button';\n\n/**\n * @component ../../ResizablePanel\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: true,\n      width: 300,\n    };\n  }\n\n  render() {\n    return (\n      <div style={{ height: '400p' }}>\n        <div style={{ position: 'relative', height: '400px' }}>\n          <ResizablePanel\n            isOpen={this.state.open}\n            width={this.state.width}\n            onResize={e => this.setState({ width: e.value })}\n            onToggle={e => this.setState({ open: e.value })}\n          >\n            <p>Hello</p>\n          </ResizablePanel>\n        </div>\n        <div>\n          <Button onClick={() => this.setState({ open: !this.state.open })}>\n            Toggle\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                height: \"400p\"\n            }}>\n            <div\n                style={{\n                    position: \"relative\",\n                    height: \"400px\"\n                }}>\n                <ResizablePanel\n                    isOpen={this.state.open}\n                    width={this.state.width}\n                    onResize={e => this.setState({\n                        width: e.value\n                    })}\n                    onToggle={e => this.setState({\n                        open: e.value\n                    })}>\n                    <p>Hello</p>\n                </ResizablePanel>\n            </div>\n            <div>\n                <Button\n                    onClick={() => this.setState({\n                        open: !this.state.open\n                    })}>Toggle</Button>\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/ResizablePanel/examples/2_ResizablePanel_usage.js","requirePath":"../src/components/ResizablePanel/examples/2_ResizablePanel_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { ResizablePanel } from '../../';\n\n/**\n * @component ../../ResizablePanel\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div style={{ position: 'relative' }}>\n        <ResizablePanel>\n          <p>Hello</p>\n        </ResizablePanel>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                position: \"relative\"\n            }}>\n            <ResizablePanel>\n                <p>Hello</p>\n            </ResizablePanel>\n        </div>\n    );\n}"}]},{"name":"Row","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Row/Row","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport View from 'react-flexbox';\nimport { formatVerticalFlex, formatHorizontalFlex } from '../../utils/formatFlexAlign';\nimport type { AlignT } from '../../utils/align.type';\n\ntype Props = {\n  /**\n   Flexbox alignment. This prop takes in a string with two values:<br />\n   <pre>horizontalAlignment verticalAlignment</pre>\n   <h4>horizontalCases</h4>\n   <pre>'left', 'right', 'center', 'space-around', 'space-between'</pre>\n   <h4>verticalCases</h4>\n   <pre>'top', 'bottom', 'center', 'stretch', 'space-around', 'space-between'</pre>\n   */\n  align?: AlignT,\n  /** className applied to Row component */\n  className?: string,\n  /** id applied to Row component */\n  testId?: string,\n  /** style of the Row container */\n  style?: Object,\n  /** row contents */\n  children?: any,\n  /** wrap of Row box, can be boolen */\n  wrap?: bool,\n  /** output debug information and background highlighting */\n  debug?: string,\n  /** theme object for Row */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\nfunction mixingDebugMode() {\n  /* add outlines for flexbox debugging */\n  const debugStyle = {\n    background: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n    outline: '3px solid #F2BE24',\n  };\n  return debugStyle;\n}\n\n/**\n * Describe the purpose of Row here\n */\nexport default class Row extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Row';\n\n  getFlexAlignment() {\n    const { align } = this.props;\n    /* default alignment for Row  */\n    const defaultAlignment = ['space-between', 'center'];\n    const alignment = (align) ? align.split(' ') : defaultAlignment;\n    const horizontal: AlignT = alignment[0];\n    const vertical: AlignT = alignment[1];\n    const horizontalFlex: AlignT = formatHorizontalFlex(horizontal);\n    const verticalFlex: AlignT = formatVerticalFlex(vertical);\n    return [horizontalFlex, verticalFlex];\n  }\n\n  getFlexStyle() {\n    const horizontal = this.getFlexAlignment()[0];\n    const vertical = this.getFlexAlignment()[1];\n\n    // Do mapping specifically for row style\n    const alignmentStyle = {\n      alignItems: vertical,\n      alignContent: vertical,\n      justifyContent: horizontal,\n    };\n\n    return alignmentStyle;\n  }\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      children,\n      style,\n      wrap,\n      debug,\n      ...other\n    } = this.props;\n\n    const emptyObject = {};\n\n    const flexStyle = this.getFlexStyle();\n    const wrapStyle = (wrap) ? { flexWrap: 'wrap' } : emptyObject;\n    const debugMode = (debug) ? mixingDebugMode() : emptyObject;\n    const mergeStyles = { ...flexStyle, ...wrapStyle, ...style, ...debugMode };\n\n    // unnecesary props\n    delete other.align;\n\n    return (\n      <View\n        {...other}\n        data-anypoint-component={Row.displayName}\n        data-test-id={testId}\n        className={classNames(className, theme.row)}\n        style={mergeStyles}\n        row\n      >\n        {children}\n      </View>\n    );\n  }\n}\n","description":"Describe the purpose of Row here","displayName":"Row","methods":[{"name":"getFlexAlignment","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getFlexStyle","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"align":{"flowType":{"name":"AlignT"},"required":false,"description":"Flexbox alignment. This prop takes in a string with two values:<br />\n   <pre>horizontalAlignment verticalAlignment</pre>\n   <h4>horizontalCases</h4>\n   <pre>'left', 'right', 'center', 'space-around', 'space-between'</pre>\n   <h4>verticalCases</h4>\n   <pre>'top', 'bottom', 'center', 'stretch', 'space-around', 'space-between'</pre>"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Row component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Row component"},"style":{"flowType":{"name":"Object"},"required":false,"description":"style of the Row container"},"children":{"flowType":{"name":"any"},"required":false,"description":"row contents"},"wrap":{"flowType":{"name":"boolean"},"required":false,"description":"wrap of Row box, can be boolen"},"debug":{"flowType":{"name":"string"},"required":false,"description":"output debug information and background highlighting"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Row","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Row/examples/1_Row_usage.js","requirePath":"../src/components/Row/examples/1_Row_usage.js","description":"","source":"import React from 'react';\nimport { Row } from '../../';\n\n/**\n * @component ../../Row\n */\n\nconst rowStyles = { background: '#CACBCC', border: '2px solid #17BC65' };\nconst rowItemStyles = { border: '2px solid #48C1ED' };\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <Row style={rowStyles} className=\"custom-class\">\n        <div style={rowItemStyles}>Row Item</div>\n        <div style={rowItemStyles}>Row Item</div>\n        <div style={rowItemStyles}>Row Item</div>\n        <div style={rowItemStyles}>Row Item</div>\n        <div style={rowItemStyles}>Row Item</div>\n      </Row>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <Row style={rowStyles} className=\"custom-class\">\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n        </Row>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Row/examples/2_Row_usage.js","requirePath":"../src/components/Row/examples/2_Row_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Row } from '../../';\n/**\n * @component ../../Row\n */\n\nconst rowStyles = { background: '#CACBCC', border: '2px solid #17BC65', height: '60px' };\nconst rowItemStyles = { border: '2px solid #48C1ED' };\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with defaults</h3>\n          <Row style={rowStyles}>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with align left</h3>\n          <Row style={rowStyles} align=\"left center\">\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with align right</h3>\n          <Row style={rowStyles} align=\"right center\">\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with align center</h3>\n          <Row style={rowStyles} align=\"center\">\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with align space-around</h3>\n          <Row style={rowStyles} align=\"space-around\">\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n            <div style={rowItemStyles}>Row Item</div>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with defaults</h3>\n                <Row style={rowStyles}>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with align left</h3>\n                <Row style={rowStyles} align=\"left center\">\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with align right</h3>\n                <Row style={rowStyles} align=\"right center\">\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with align center</h3>\n                <Row style={rowStyles} align=\"center\">\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with align space-around</h3>\n                <Row style={rowStyles} align=\"space-around\">\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                    <div style={rowItemStyles}>Row Item</div>\n                </Row>\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Row/examples/3_Row_usage.js","requirePath":"../src/components/Row/examples/3_Row_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Row } from '../../';\n/**\n * @component ../../Row\n */\n\nconst rowStyles = { background: '#CACBCC', border: '2px solid #17BC65' };\nconst divStyles = { border: '2px solid #48C1ED', padding: 10 };\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row Wrap example</h3>\n          <Row style={rowStyles} wrap align=\"left top\">\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row debug example</h3>\n          <Row style={rowStyles} debug>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n          </Row>\n        </div>\n        <div style={{ padding: '0 0 30px 0' }}>\n          <h3>Row with style width 50% and red border</h3>\n          <Row style={{ width: '50%', border: '1px solid red' }}>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n            <div style={divStyles}>Row Item</div>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n }\n","renderSource":"render() {\n    return (\n        <div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row Wrap example</h3>\n                <Row style={rowStyles} wrap align=\"left top\">\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row debug example</h3>\n                <Row style={rowStyles} debug>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                </Row>\n            </div>\n            <div\n                style={{\n                    padding: \"0 0 30px 0\"\n                }}>\n                <h3>Row with style width 50% and red border</h3>\n                <Row\n                    style={{\n                        width: \"50%\",\n                        border: \"1px solid red\"\n                    }}>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                    <div style={divStyles}>Row Item</div>\n                </Row>\n            </div>\n        </div>\n    );\n}"}]},{"name":"Search","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Search/Search","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport searchIcon from './searchIcon';\n\nimport TextField from '../TextField';\nimport Select from '../Select';\n\ntype FilterOptionT = string | number | Object;\n\ntype Props = {\n  /** className applied to Search component */\n  className?: string,\n  /** id for Search component */\n  id?: string,\n  /** placeholder to show for Search component */\n  placeholder: string,\n  /** search filter options */\n  filterOptions?: Array<FilterOptionT>,\n  /** selected search filter if use array of objects,\n   * each element need to hasvalue and label fields or use simple array*/\n  filter?: FilterOptionT,\n  /** search query */\n  query: ?string,\n  /** callback when search has changed (query or filter) */\n  onChange?: (query: any, filter: any) => void,\n  /** callback when search is submitted (by hitting enter) */\n  onSearch?: (value: any, filter: any) => void,\n  /** id applied to Search component */\n  testId?: string,\n  /** theme object for Search */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  placeholder: string,\n  theme: ThemeT,\n}\n\nconst defaultProps = {\n  placeholder: 'Search',\n  theme: {},\n};\n\nexport default class Search extends React.Component {\n\n  props: Props;\n\n  handleKeyPress: () => void;\n  optionsArray: any;\n  input: any;\n\n  static displayName: string = 'Search';\n  static defaultProps: DefaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    const isExistSimpleOption = !!props.filterOptions;\n    if (props.filterOptions instanceof Array) {\n      if (typeof props.filterOptions[0] === 'string' ||\n            typeof props.filterOptions[0] === 'number') {\n        this.optionsArray = [];\n        for (let i = 0; i < props.filterOptions.length; (i += 1)) {\n          this.optionsArray.push({ value: props.filterOptions[i], label: props.filterOptions[i] });\n        }\n      } else {\n        this.optionsArray = props.filterOptions;\n      }\n    } else if (isExistSimpleOption && typeof props.filterOptions !== 'object') {\n      this.optionsArray = [{ value: props.filterOptions, label: props.filterOptions }];\n    } else {\n      this.optionsArray = undefined;\n    }\n  }\n\n  onQueryChange = (e: any) => {\n    const { query, filter, onChange } = this.props;\n    if (onChange && e.value !== query) {\n      onChange({ value: e.value, filter });\n    }\n  }\n\n  onFilterChange = (e: any) => {\n    const { query, filter, onChange } = this.props;\n    if (onChange && e.value !== filter) {\n      onChange({ value: query, filter: e.value });\n    }\n  }\n\n  handleClick = (e: any) => {\n    const { onSearch, filter } = this.props;\n    e.preventDefault();\n    if (onSearch) {\n      onSearch({ value: this.input.props.value, filter });\n    }\n  }\n\n  handleKeyPress(event: any) {\n    const { onSearch, onChange, query, filter } = this.props;\n\n    switch (event.keyCode) {\n      case 13: // enter\n        event.preventDefault();\n        if (onSearch) {\n          onSearch(event.target.value, filter);\n        }\n        break;\n      case 27: // exit\n        event.preventDefault();\n        if (onChange && query) {\n          onChange('', filter);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      className,\n      placeholder,\n      filterOptions,\n      filter,\n      query,\n      theme,\n      testId,\n    } = this.props;\n    return (\n      <div\n        data-test-id={testId}\n        data-anypoint-component={Search.displayName}\n        className={classNames(\n          theme.search,\n          className,\n          'anypoint-select-search-layout'\n        )}\n      >\n        <Select\n          data-test-id={testId && `${testId}-search-select`}\n          display-if={filter}\n          className={theme.filter}\n          options={this.optionsArray || [{ value: filter, label: filter }]}\n          value={filter}\n          searchable={false}\n          clearable={false}\n          onChange={this.onFilterChange}\n          disabled={!filterOptions || filterOptions.length < 2}\n        />\n        <TextField\n          data-test-id={testId && `${testId}-search-text`}\n          ref={node => (this.input = node)}\n          className={theme.query}\n          placeholder={placeholder}\n          value={query}\n          onChange={this.onQueryChange}\n          onKeyDown={this.handleKeyPress}\n        />\n        <div  // eslint-disable-line\n          className={theme['search-icon']}\n          onClick={this.handleClick}\n          data-test-id={testId && `${testId}-search-button`}\n        >\n          {searchIcon()}\n        </div>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"Search","methods":[{"name":"handleKeyPress","docblock":null,"modifiers":[],"params":[{"name":"event","type":{"name":"any"}}],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Search component"},"id":{"flowType":{"name":"string"},"required":false,"description":"id for Search component"},"placeholder":{"flowType":{"name":"string"},"required":true,"description":"placeholder to show for Search component","defaultValue":{"value":"'Search'","computed":false}},"filterOptions":{"flowType":{"name":"Array","elements":[{"name":"union","raw":"string | number | Object","elements":[{"name":"string"},{"name":"number"},{"name":"Object"}]}],"raw":"Array<FilterOptionT>"},"required":false,"description":"search filter options"},"filter":{"flowType":{"name":"union","raw":"string | number | Object","elements":[{"name":"string"},{"name":"number"},{"name":"Object"}]},"required":false,"description":"selected search filter if use array of objects,\neach element need to hasvalue and label fields or use simple array"},"query":{"flowType":{"name":"string","nullable":true},"required":true,"description":"search query"},"onChange":{"flowType":{"name":"signature","type":"function","raw":"(query: any, filter: any) => void","signature":{"arguments":[{"name":"query","type":{"name":"any"}},{"name":"filter","type":{"name":"any"}}],"return":{"name":"void"}}},"required":false,"description":"callback when search has changed (query or filter)"},"onSearch":{"flowType":{"name":"signature","type":"function","raw":"(value: any, filter: any) => void","signature":{"arguments":[{"name":"value","type":{"name":"any"}},{"name":"filter","type":{"name":"any"}}],"return":{"name":"void"}}},"required":false,"description":"callback when search is submitted (by hitting enter)"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Search component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Search","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Search/examples/1_search_usage.js","requirePath":"../src/components/Search/examples/1_search_usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React, { Component } from 'react';\nimport { Search } from '../../';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../Search\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"onSearch\"] }] */\nexport default class YourApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: undefined,\n    };\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n  onSearchChange(e) {\n    console.log('Change', e);\n    this.setState({ query: e.value });\n  }\n\n  onSearch(e) {\n    console.log('Search:', e.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <Search\n          onSearch={this.onSearch}\n          onChange={this.onSearchChange}\n          query={this.state.query}\n          placeholder=\"Search for things\"\n          id=\"playground-search\"\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Search\n                onSearch={this.onSearch}\n                onChange={this.onSearchChange}\n                query={this.state.query}\n                placeholder=\"Search for things\"\n                id=\"playground-search\" />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Search/examples/2_search_usage.js","requirePath":"../src/components/Search/examples/2_search_usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React, { Component } from 'react';\nimport { Search } from '../../';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../Search\n */\n\n\nconst categories = ['All', 'Electronics', 'Kitchen', 'Outdoors'];\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"onSearch\"] }] */\nexport default class YourApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: undefined,\n      filter: 'All',\n    };\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n  onSearchChange(e) {\n    console.log('Change', e);\n    this.setState({ query: e.value, filter: e.filter });\n  }\n\n  onSearch(e) {\n    console.log('Search: %s filter by %s', e.value, e.filter);\n  }\n\n  render() {\n    const { query, filter } = this.state;\n    return (\n      <div>\n        <Search\n          onSearch={this.onSearch}\n          onChange={this.onSearchChange}\n          query={query}\n          filter={filter}\n          filterOptions={categories}\n          placeholder=\"Search for things\"\n          id=\"playground-search\"\n        />\n        <p>\n          You can also specify filter without filter options, which is\n          equivilant to having a controlled filter:\n        </p>\n        <Search\n          onSearch={this.onSearch}\n          onChange={this.onSearchChange}\n          query={query}\n          filter={filter}\n          theme={Search.themes.LightTheme}\n          placeholder=\"Search for things\"\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        query,\n        filter\n    } = this.state;\n\n    return (\n        <div>\n            <Search\n                onSearch={this.onSearch}\n                onChange={this.onSearchChange}\n                query={query}\n                filter={filter}\n                filterOptions={categories}\n                placeholder=\"Search for things\"\n                id=\"playground-search\" />\n            <p>You can also specify filter without filter options, which is\n                          equivilant to having a controlled filter:</p>\n            <Search\n                onSearch={this.onSearch}\n                onChange={this.onSearchChange}\n                query={query}\n                filter={filter}\n                theme={Search.themes.LightTheme}\n                placeholder=\"Search for things\" />\n        </div>\n    );\n}"}]},{"name":"Section","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Section/Section","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** className applied to Section component */\n  className?: string,\n  /** id applied to Section component */\n  testId?: string,\n  /** Section title */\n  title?: string,\n  /** Section contents */\n  children: any,\n  /** theme object for Section */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  theme: {},\n};\n\n/**\n * Describe the purpose of Section here\n */\nexport default class Section extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Section';\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      title,\n      children,\n      ...props\n    } = this.props;\n\n    const titleBlock = title ? <h3 className={theme.title}>{title}</h3> : '';\n    return (\n      <div\n        className={classNames(className, theme.section)}\n        data-test-id={testId}\n        data-anypoint-component={Section.displayName}\n        {...props}\n      >\n        {titleBlock}\n        {children}\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Section here","displayName":"Section","methods":[],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Section component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Section component"},"title":{"flowType":{"name":"string"},"required":false,"description":"Section title"},"children":{"flowType":{"name":"any"},"required":true,"description":"Section contents"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Section","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Section/examples/1_Section_usage.js","requirePath":"../src/components/Section/examples/1_Section_usage.js","description":"","source":"import React from 'react';\nimport { Section } from '../../';\n\n/**\n * @component ../../Section\n */\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div>\n        <Section title=\"Section Title\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          Integer vitae mauris arcu, eu pretium nisi. Praesent\n          fringilla ornare ullamcorper.\n        </Section>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Section title=\"Section Title\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                          Integer vitae mauris arcu, eu pretium nisi. Praesent\n                          fringilla ornare ullamcorper.</Section>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Section/examples/2_Section_usage.js","requirePath":"../src/components/Section/examples/2_Section_usage.js","description":"","source":"import React from 'react';\nimport { Section } from '../../';\n\n/**\n * @component ../../Section\n */\nexport default class YourApp extends React.Component {\n  render() {\n    return (\n      <div>\n        <Section>\n          Section without title\n        </Section>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Section>Section without title</Section>\n        </div>\n    );\n}"}]},{"name":"Select","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Select/Select","source":"/* @flow */\nimport React from 'react';\nimport AutosizeInput from 'react-input-autosize';\nimport classNames from 'classnames';\n\nimport stringifyValue from './utils/stringifyValue';\nimport defaultArrowRenderer from './utils/defaultArrowRenderer';\nimport defaultFilterOptions from './utils/defaultFilterOptions';\nimport defaultMenuRenderer from './utils/defaultMenuRenderer';\n\nimport Option from './components/Option';\nimport Value from './components/Value';\n\nimport RenderInBody from '../RenderInBody';\n\n/**\n * Need turn on if you need this functionality\n * import Async from './Async';\n * import AsyncCreatable from './AsyncCreatable';\n * import Creatable from './Creatable';\n */\n\nlet instanceId = 1;\n\ntype Props = {\n  /** onChange handler: function (newValue) {} */\n  onChange: () => void,\n  /** array of options */\n  options: [],\n  /** initial field value */\n  value: any,\n  /** value component to render */\n  valueComponent: () => any,\n  /** path of the label value in option objects */\n  valueKey?: string,\n  /** className applied to Select component */\n  className?: string,\n  /** id applied to Select component */\n  testId?: string,\n  /** theme object for Select */\n  theme: ThemeT,\n  /** Aria label (for assistive tech) */\n  'aria-label': string,\n  /** HTML ID of an element that should be used as the label (for assistive tech) */\n  'aria-labelledby': string,\n  /** Create drop-down caret element */\n  arrowRenderer: () => void,\n  /** automatically blur the component when an option is selected */\n  autoBlur?: boolean,\n  /** multi-value input */\n  multi?: boolean,\n  /** autofocus the component on mount */\n  autofocus?: boolean,\n  /** whether backspace removes an item if there is no text input */\n  backspaceRemoves?: boolean,\n  /** Message to use for screenreaders to press backspace to remove the current\n   * item - {label} is replaced with the item label */\n  backspaceToRemoveMessage: string,\n  /** title for the \"clear\" control when multi: true */\n  clearAllText?: any,\n  /** title for the \"clear\" control */\n  clearValueText?: any,\n  /** should it be possible to reset value */\n  clearable?: boolean,\n  /** whether backspace removes an item if there is no text input */\n  deleteRemoves?: boolean,\n  /** delimiter to use to join multiple values for the hidden field value */\n  delimiter?: string,\n  /** whether the Select is disabled or not */\n  disabled?: boolean,\n  /** whether escape clears the value when the menu is closed */\n  escapeClearsValue?: boolean,\n  /** method to filter a single option (option, filterString) */\n  filterOption?: () => void,\n  /** boolean to enable default filtering or function to filter the options array ([options],\n   * filterString, [values]) */\n  filterOptions?: any,\n  /** whether to strip diacritics when filtering */\n  ignoreAccents?: boolean,\n  /** whether to perform case-insensitive filtering */\n  ignoreCase?: boolean,\n  /** custom attributes for the Input */\n  inputProps: Object,\n  /** returns a custom input component */\n  inputRenderer?: () => void,\n  /** set the components instanceId */\n  instanceId?: string,\n  /** whether the Select is loading externally or not (such as options being loaded) */\n  isLoading?: boolean,\n  /** joins multiple values into a single form field with the delimiter (legacy mode) */\n  joinValues?: boolean,\n  /** path of the label value in option objects */\n  labelKey?: string,\n  /** (any|start) match the start or entire string when filtering */\n  matchPos?: string,\n  /** (any|label|value) which option property to filter on */\n  matchProp?: string,\n  /** optional buffer (in px) between the bottom of the viewport and the bottom of the menu */\n  menuBuffer?: number,\n  /** optional style to apply to the menu container */\n  menuContainerStyle?: Object,\n  /** renders a custom menu with options */\n  menuRenderer: () => void,\n  /** optional style to apply to the menu */\n  menuStyle?: Object,\n  /** generates a hidden input tag with this field name for html forms */\n  name?: string,\n  /** placeholder displayed when there are no matching search results */\n  noResultsText?: any,\n  /** onBlur handler: function (event) {} */\n  onBlur?: () => void,\n  /** whether input is cleared on blur */\n  onBlurResetsInput?: boolean,\n  /** fires when the menu is closed */\n  onClose?: () => void,\n  /** whether input is cleared when menu is closed through the arrow */\n  onCloseResetsInput?: boolean,\n  /** onFocus handler: function (event) {} */\n  onFocus?: () => void,\n  /** onInputChange handler: function (inputValue) {} */\n  onInputChange?: () => void,\n  /** input keyDown handler: function (event) {} */\n  onInputKeyDown?: () => void,\n  /** fires when the menu is scrolled to the bottom; can be used to paginate options */\n  onMenuScrollToBottom?: () => void,\n  /** fires when the menu is opened */\n  onOpen?: () => void,\n  /** onClick handler for value labels: function (value, event) {} */\n  onValueClick?: () => void,\n  /** boolean to enable opening dropdown when focused */\n  openAfterFocus?: boolean,\n  /** always open options menu on focus */\n  openOnFocus?: boolean,\n  /**  additional class(es) to apply to the <Option /> elements */\n  optionClassName?: string,\n  /** option component to render in dropdown */\n  optionComponent?: () => void,\n  /** optionRenderer: function (option) {} */\n  optionRenderer?: () => void,\n  /** number of entries to page when using page up/down keys */\n  pageSize: number,\n  /** field placeholder, displayed when there's no value */\n  placeholder?: any,\n  /** applies HTML5 required attribute when needed */\n  required?: boolean,\n  /** value to use when you clear the control */\n  resetValue?: any,\n  /** boolean to enable the viewport to shift so that the full menu fully visible when engaged */\n  scrollMenuIntoView?: boolean,\n  /** whether to enable searching feature or not */\n  searchable?: boolean,\n  /** pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false */\n  simpleValue?: boolean,\n  /** optional style to apply to the control */\n  style?: Object,\n  /** optional tab index of the control */\n  tabindex?: number | string,\n  /** whether to treat tabbing out while focused to be value selection */\n  tabSelectsValue?: boolean,\n  /** valueRenderer: function (option) {} */\n  valueRenderer?: () => void,\n  /** optional style to apply to the component wrapper */\n  wrapperStyle?: Object,\n  /** if true, the value is valid */\n  isValid?: boolean,\n  /** if true, the Select has been touched by the user */\n  isDirty?: boolean,\n  /** if true, the Select has been focused*/\n  isFocused?: boolean,\n};\n\ntype DefaultProps = {\n  theme: ThemeT,\n  arrowRenderer: any,\n  backspaceRemoves: boolean,\n  backspaceToRemoveMessage: string,\n  clearable: boolean,\n  clearAllText: string,\n  clearValueText: string,\n  deleteRemoves: boolean,\n  delimiter: string,\n  disabled: boolean,\n  escapeClearsValue: boolean,\n  filterOptions: any,\n  ignoreAccents: boolean,\n  ignoreCase: boolean,\n  inputProps: Object,\n  isLoading: boolean,\n  joinValues: boolean,\n  labelKey: string,\n  matchPos: string,\n  matchProp: string,\n  menuBuffer: number,\n  menuRenderer: any,\n  multi: boolean,\n  noResultsText: string,\n  onBlurResetsInput: boolean,\n  onCloseResetsInput: boolean,\n  openAfterFocus: boolean,\n  optionComponent: any,\n  pageSize: number,\n  placeholder: string,\n  required: bool,\n  scrollMenuIntoView: boolean,\n  searchable: boolean,\n  simpleValue: boolean,\n  tabSelectsValue: boolean,\n  valueComponent: any,\n  valueKey: string,\n  isDirty: boolean,\n  isValid: boolean,\n};\n\n\ntype State = {\n  inputValue: string,\n  isFocused: boolean,\n  isOpen: any,\n  isPseudoFocused: boolean,\n  required: boolean,\n  focusedIndex: any,\n  focusedOption: any\n};\n\nconst defaultProps = {\n  theme: {},\n  arrowRenderer: defaultArrowRenderer,\n  backspaceRemoves: true,\n  backspaceToRemoveMessage: 'Press backspace to remove {label}',\n  clearable: false,\n  clearAllText: 'Clear all',\n  clearValueText: 'Clear value',\n  deleteRemoves: true,\n  delimiter: ',',\n  disabled: false,\n  escapeClearsValue: true,\n  filterOptions: defaultFilterOptions,\n  ignoreAccents: true,\n  ignoreCase: true,\n  inputProps: {},\n  isLoading: false,\n  joinValues: false,\n  labelKey: 'label',\n  matchPos: 'any',\n  matchProp: 'any',\n  menuBuffer: 0,\n  menuRenderer: defaultMenuRenderer,\n  multi: false,\n  noResultsText: 'No results found',\n  onBlurResetsInput: true,\n  onCloseResetsInput: true,\n  openAfterFocus: false,\n  optionComponent: Option,\n  pageSize: 5,\n  placeholder: 'Select...',\n  required: false,\n  scrollMenuIntoView: true,\n  searchable: true,\n  simpleValue: false,\n  tabSelectsValue: true,\n  valueComponent: Value,\n  valueKey: 'value',\n  isDirty: false,\n  isValid: true,\n};\n\n/**\n * Describe the purpose of Select here\n */\nexport default class Select extends React.Component {\n  props: Props;\n  state: State;\n\n  instancePrefix: string;\n  hasScrolledToOption: boolean;\n  scrollToFocusedOptionOnUpdate: boolean;\n  hasScrolledToOption: boolean;\n  dragging: boolean;\n  openAfterFocus: boolean;\n  input: any;\n  menu: any;\n  wrapper: any;\n  focused: any;\n  control: any;\n  menuContainer: any;\n  focusedOption: any;\n  visibleOptions: any;\n  expandValue: any\n  value: any;\n\n  static defaultProps: DefaultProps = defaultProps;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      valueDefine: (props.value || props.value === null) ? true : false, // eslint-disable-line\n      inputValue: '',\n      isFocused: false,\n      isOpen: false,\n      isPseudoFocused: false,\n      required: props.required,\n      focusedIndex: false,\n      focusedOption: false\n    };\n  }\n\n  componentWillMount() {\n    this.instancePrefix = `react-select-${this.props.instanceId || (instanceId += 1)}-`;\n    const valueArray = this.state.valueDefine\n      ?\n      this.getValueArray(this.props.value)\n      :\n      this.getValueArray(this.state.value);\n\n    if (this.props.required) {\n      this.setState({\n        required: this.handleRequired(valueArray[0], this.props.multi),\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.autofocus) {\n      this.focus();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.value || nextProps.value === null) {\n      this.setState({ valueDefine: true });\n    } else {\n      this.setState({ valueDefine: false });\n    }\n  }\n\n  componentWillUpdate(nextProps: Props, nextState: State) {\n    if (nextState.isOpen !== this.state.isOpen) {\n      this.toggleTouchOutsideEvent(nextState.isOpen);\n      const handler = nextState.isOpen ? nextProps.onOpen : nextProps.onClose;\n      if (handler) {\n        handler();\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.renderClear();\n    // focus to the selected option\n    if (this.menu && this.focused && this.state.isOpen && !this.hasScrolledToOption) {\n      this.menu.scrollTop = this.focused.offsetTop;\n      this.hasScrolledToOption = true;\n    } else if (!this.state.isOpen) {\n      this.hasScrolledToOption = false;\n    }\n\n    if (this.scrollToFocusedOptionOnUpdate && this.focused && this.menu) {\n      this.scrollToFocusedOptionOnUpdate = false;\n      const focusedRect = this.focused.getBoundingClientRect();\n      const menuRect = this.menu.getBoundingClientRect();\n      if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {\n        this.menu.scrollTop = (\n          (this.focused.offsetTop + this.focused.clientHeight) - this.focused.offsetHeight\n        );\n      }\n    }\n\n    if (prevProps.disabled !== this.props.disabled) {\n      this.setState({ isFocused: false }); // eslint-disable-line react/no-did-update-set-state\n      this.closeMenu();\n    }\n\n    if (this.state.isOpen && this.menuContainer) {\n      this.setMenuPosition();\n      document.addEventListener('scroll', this.onScrollListener, true);\n      window.addEventListener('resize', this.onResizeListener, true);\n    } else {\n      document.removeEventListener('scroll', this.onScrollListener, true);\n      window.removeEventListener('resize', this.onResizeListener, true);\n    }\n\n    if (this.props.scrollMenuIntoView && this.menuContainer) {\n      this.scrollMenuIntoView();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!document.removeEventListener && document.detachEvent) {\n      document.detachEvent('ontouchstart', this.handleTouchOutside);\n    } else {\n      document.removeEventListener('touchstart', this.handleTouchOutside);\n    }\n  }\n\n  setMenuPosition() {\n    setTimeout(() => {\n      const controlClientRect = this.control.getBoundingClientRect();\n      const upwardsClasses = this.props.theme['select-menu-outer-upwards'];\n      const upwardsClassesArray = upwardsClasses ? upwardsClasses.split(' ') : [];\n      let top = controlClientRect.top + controlClientRect.height;\n\n      if (top + this.menuContainer.offsetHeight > window.innerHeight) {\n        this.menuContainer.classList.add(...upwardsClassesArray);\n        top = controlClientRect.top - this.menuContainer.offsetHeight;\n      } else {\n        this.menuContainer.classList.remove(...upwardsClassesArray);\n      }\n\n      this.menuContainer.style.top = `${top}px`;\n      this.menuContainer.style.left = `${controlClientRect.left}px`;\n      this.menuContainer.style.width = `${controlClientRect.width}px`;\n    }, 0);\n  }\n\n  onResizeListener = () => {\n    this.setMenuPosition();\n  };\n\n  onScrollListener = () => {\n    this.setMenuPosition();\n  };\n\n  toggleTouchOutsideEvent = (enabled: any) => {// eslint-disable-line\n    if (enabled) {\n      if (!document.addEventListener && document.attachEvent) {\n        document.attachEvent('ontouchstart', this.handleTouchOutside);\n      } else {\n        document.addEventListener('touchstart', this.handleTouchOutside);\n      }\n    } else if (!document.removeEventListener && document.detachEvent) {\n      document.detachEvent('ontouchstart', this.handleTouchOutside);\n    } else {\n      document.removeEventListener('touchstart', this.handleTouchOutside);\n    }\n  };\n\n  handleTouchOutside = (event: any) => {\n    // handle touch outside on ios to dismiss menu\n    if (this.wrapper && !this.wrapper.contains(event.target)) {\n      this.closeMenu();\n    }\n  };\n\n  focus = () => {\n    if (!this.input) return;\n    this.input.focus();\n\n    if (this.props.openAfterFocus) {\n      this.setState({\n        isOpen: true,\n      });\n    }\n  };\n\n  blurInput = () => {\n    if (!this.input) return;\n    this.input.blur();\n  };\n\n  handleTouchMove = () => {\n    // Set a flag that the view is being dragged\n    this.dragging = true;\n  };\n\n  handleTouchStart = () => {\n    // Set a flag that the view is not being dragged\n    this.dragging = false;\n  };\n\n  handleTouchEnd = (event: any) => {\n    // Check if the view is being dragged, In this case\n    // we don't want to fire the click event (because the user only wants to scroll)\n    if (this.dragging) return;\n\n    // Fire the mouse events\n    this.handleMouseDown(event);\n  };\n\n  handleTouchEndClearValue = (event: any) => {\n    // Check if the view is being dragged, In this case\n    // we don't want to fire the click event (because the user only wants to scroll)\n    if (this.dragging) return;\n\n    // Clear the value\n    this.clearValue(event);\n  };\n\n  handleMouseDown = (event: any) => {\n    // if the event was triggered by a mousedown and not the primary\n    // button, or if the component is disabled, ignore it.\n    if (this.props.disabled || (event.type === 'mousedown' && event.button !== 0)) {\n      return false;\n    }\n\n    if (event.target.tagName === 'INPUT') {\n      return false;\n    }\n\n    // prevent default event handlers\n    event.stopPropagation();\n    event.preventDefault();\n    // for the non-searchable select, toggle the menu\n    if (!this.props.searchable) {\n      this.focus();\n      return this.setState({\n        isOpen: !this.state.isOpen,\n      });\n    }\n\n    if (this.state.isFocused) {\n      // On iOS, we can get into a state where we think the input is focused but it isn't really,\n      // since iOS ignores programmatic calls to input.focus()\n      // that weren't triggered by a click event.\n      // Call focus() again here to be safe.\n      this.focus();\n      let input = this.input;\n      if (typeof input.getInput === 'function') {\n        // Get the actual DOM input if the ref is an <AutosizeInput /> component\n        input = input.getInput();\n      }\n\n      // clears the value so that the cursor will be at the end\n      // of input when the component re-renders\n      input.value = '';\n\n      // if the input is focused, ensure the menu is open\n      this.setState({\n        isOpen: true,\n        isPseudoFocused: false,\n      });\n    } else {\n      // otherwise, focus the input and open the menu\n      this.openAfterFocus = true;\n      this.focus();\n    }\n    return false;\n  };\n\n  handleMouseDownOnArrow = (event: any) => {\n    // if the event was triggered by a mousedown and not the primary\n    // button, or if the component is disabled, ignore it.\n    if (this.props.disabled || (event.type === 'mousedown' && event.button !== 0)) {\n      return;\n    }\n    // If the menu isn't open, let the event bubble to the main handleMouseDown\n    if (!this.state.isOpen) {\n      return;\n    }\n    // prevent default event handlers\n    event.stopPropagation();\n    event.preventDefault();\n    // close the menu\n    this.closeMenu();\n  };\n\n  handleMouseDownOnMenu = (event: any) => {\n    // if the event was triggered by a mousedown and not the primary\n    // button, or if the component is disabled, ignore it.\n    if (this.props.disabled || (event.type === 'mousedown' && event.button !== 0)) {\n      return;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n\n    this.openAfterFocus = true;\n    this.focus();\n  };\n\n  closeMenu = () => {\n    const value = this.props.onCloseResetsInput ? '' : this.state.inputValue;\n    this.setState({\n      isOpen: false,\n      isPseudoFocused: this.state.isFocused && !this.props.multi,\n      inputValue: value,\n    });\n    this.hasScrolledToOption = false;\n  };\n\n  handleInputFocus = (event: any) => {\n    if (this.props.disabled) return;\n    const isOpen = this.state.isOpen || this.openAfterFocus || this.props.openOnFocus;\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n    this.setState({\n      isFocused: true,\n      isOpen\n    });\n    this.openAfterFocus = false;\n  };\n\n  handleInputBlur = (event: any) => {\n    // The check for menu.contains(activeElement) is necessary to prevent IE11's\n    // scrollbar from closing the menu in certain contexts.\n    if (\n      this.menu &&\n      (this.menu === document.activeElement || this.menu.contains(document.activeElement))\n    ) {\n      this.focus();\n      return;\n    }\n\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n    const onBlurredState: Object = {\n      isFocused: false,\n      isOpen: false,\n      isPseudoFocused: false,\n    };\n    if (this.props.onBlurResetsInput) {\n      onBlurredState.inputValue = '';\n    }\n    this.setState(onBlurredState);\n  };\n\n  handleInputChange = (event: any) => {\n    let newInputValue = event.target.value;\n    if (this.state.inputValue !== event.target.value && this.props.onInputChange) {\n      const nextState = this.props.onInputChange(newInputValue);\n      // Note: != used deliberately here to catch undefined and null\n      if (typeof nextState !== 'object' && nextState != null) {\n        newInputValue = `${nextState}`;\n      }\n    }\n\n    this.setState({\n      isOpen: true,\n      isPseudoFocused: false,\n      inputValue: newInputValue\n    });\n  };\n\n  handleKeyDown = (event: any) => {\n    if (this.props.disabled) return;\n\n    if (typeof this.props.onInputKeyDown === 'function') {\n      this.props.onInputKeyDown(event);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n\n    switch (event.keyCode) {\n      case 8: // backspace\n        if (!this.state.inputValue && this.props.backspaceRemoves) {\n          event.preventDefault();\n          this.popValue();\n        }\n        return;\n      case 9: // tab\n        if (event.shiftKey || !this.state.isOpen || !this.props.tabSelectsValue) {\n          return;\n        }\n        this.selectFocusedOption();\n        return;\n      case 13: // enter\n        if (!this.state.isOpen) return;\n        event.stopPropagation();\n        this.selectFocusedOption();\n        break;\n      case 27: // escape\n        if (this.state.isOpen) {\n          this.closeMenu();\n          event.stopPropagation();\n        } else if (this.props.clearable && this.props.escapeClearsValue) {\n          this.clearValue(event);\n          event.stopPropagation();\n        }\n        break;\n      case 38: // up\n        this.focusPreviousOption();\n        break;\n      case 40: // down\n        this.focusNextOption();\n        break;\n      case 33: // page up\n        this.focusPageUpOption();\n        break;\n      case 34: // page down\n        this.focusPageDownOption();\n        break;\n      case 35: // end key\n        if (event.shiftKey) {\n          return;\n        }\n        this.focusEndOption();\n        break;\n      case 36: // home key\n        if (event.shiftKey) {\n          return;\n        }\n        this.focusStartOption();\n        break;\n      case 46: // backspace\n        if (!this.state.inputValue && this.props.deleteRemoves) {\n          event.preventDefault();\n          this.popValue();\n        }\n        return;\n      default: return;\n    }\n    event.preventDefault();\n  };\n\n  handleValueClick = (option: any, event: any) => {\n    if (!this.props.onValueClick) return;\n    this.props.onValueClick(option, event);\n  };\n\n  handleMenuScroll = (event: any) => {\n    if (!this.props.onMenuScrollToBottom) return;\n    const { target } = event;\n    if (\n      target.scrollHeight > target.offsetHeight &&\n      !(target.scrollHeight - target.offsetHeight - target.scrollTop)\n    ) {\n      this.props.onMenuScrollToBottom();\n    }\n  };\n\n  handleRequired = (value: any, multi: any) => {\n    if (!value) return true;\n    return (multi ? value.length === 0 : Object.keys(value).length === 0);\n  };\n\n  getOptionLabel = (op: any) => {\n    const optionLabel = op[this.props.labelKey];\n    return optionLabel;\n  };\n\n  /**\n   * Turns a value into an array from the given options\n   * @param {String|Number|Array} value - the value of the select input\n   * @param {Object} nextProps - optionally specify the nextProps so the returned\n   * array uses the latest configuration\n   * @returns {Array} the value of the select represented in an array\n   */\n  getValueArray = (value: any, nextProps: any) => {\n    /** support optionally passing in the `nextProps` so `componentWillReceiveProps`\n     * updates will function as expected */\n    const props = typeof nextProps === 'object' ? nextProps : this.props;\n    let valueData = value;\n    if (props.multi) {\n      if (typeof valueData === 'string') valueData = valueData.split(props.delimiter);\n      if (!Array.isArray(valueData)) {\n        if (valueData === null || valueData === undefined) return [];\n        valueData = [valueData];\n      }\n      return valueData.map(valueProp => this.expandValue(valueProp, props)).filter(i => i);\n    }\n\n    const expandedValue: any = this.expandValue(valueData, props);\n    const resultExpandedValue: Array<any> = [];\n    if (expandedValue) { resultExpandedValue.push(expandedValue); }\n    return resultExpandedValue;\n  };\n\n  /**\n   * Retrieve a value from the given options and valueKey\n   * {String|Number|Array} value - the selected value(s)\n   * {Object} props - the Select component's props (or nextProps)\n   */\n  expandValue = (value: any, props: any) => {\n    const valueType = typeof value;\n    if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;\n    const { options, valueKey } = props;\n    if (!options) return false;\n    for (let i = 0; i < options.length; (i += 1)) {\n      if (options[i][valueKey] === value) return options[i];\n    }\n    return false;\n  };\n\n  setValue = (value: any) => {\n    let valueData = value;\n    if (this.props.autoBlur) {\n      this.blurInput();\n    }\n    this.setState({ value });\n    if (this.props.required) {\n      const required = this.handleRequired(value, this.props.multi);\n      this.setState({ required });\n    }\n    if (!this.props.onChange) return;\n    if (this.props.simpleValue && valueData) {\n      valueData = this.props.multi\n      ?\n      valueData.map(i => i[this.props.valueKey]).join(this.props.delimiter)\n      :\n      valueData[this.props.valueKey];\n    }\n    if (this.props.multi) {\n      this.props.onChange({ value: valueData });\n    } else {\n      this.props.onChange(valueData);\n    }\n  };\n\n  selectValue = (value: any) => {\n    // NOTE: update value in the callback to make sure the input value is empty so that\n    // there are no styling issues (Chrome had issue otherwise)\n    this.hasScrolledToOption = false;\n    if (this.props.multi) {\n      this.setState({\n        inputValue: '',\n        focusedIndex: null\n      }, () => {\n        this.addValue(value);\n      });\n    } else {\n      this.setState({\n        isOpen: false,\n        inputValue: '',\n        isPseudoFocused: this.state.isFocused,\n      }, () => {\n        this.setValue(value);\n      });\n    }\n  };\n\n  addValue = (value: any) => {\n    const valueArray = this.state.valueDefine\n      ?\n      this.getValueArray(this.props.value)\n      :\n      this.getValueArray(this.state.value);\n    this.setValue(valueArray.concat(value));\n  };\n\n  popValue = () => {\n    const valueArray = this.state.valueDefine\n      ?\n      this.getValueArray(this.props.value)\n      :\n      this.getValueArray(this.state.value);\n    if (!valueArray.length) return;\n    if (valueArray[valueArray.length - 1].clearableValue === false) return;\n    this.setValue(valueArray.slice(0, valueArray.length - 1));\n  };\n\n  removeValue = (value: any) => {\n    const valueArray = this.state.valueDefine\n      ?\n      this.getValueArray(this.props.value)\n      :\n      this.getValueArray(this.state.value);\n    this.setValue(valueArray.filter(i => i !== value));\n    this.focus();\n  };\n\n  clearValue = (event: any) => {\n    // if the event was triggered by a mousedown and not the primary\n    // button, ignore it.\n    if (event && event.type === 'mousedown' && event.button !== 0) {\n      return;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    this.setValue(this.getResetValue());\n    this.setState({\n      isOpen: false,\n      inputValue: '',\n    }, this.focus);\n  };\n\n  getResetValue = () => {\n    if (this.props.resetValue !== undefined) {\n      return this.props.resetValue;\n    } else if (this.props.multi) {\n      return [];\n    }\n    return false;\n  };\n\n  focusOption = (option: any) => {\n    this.setState({\n      focusedOption: option\n    });\n  };\n\n  focusNextOption = () => {\n    this.focusAdjacentOption('next');\n  };\n\n  focusPreviousOption = () => {\n    this.focusAdjacentOption('previous');\n  };\n\n  focusPageUpOption = () => {\n    this.focusAdjacentOption('page_up');\n  };\n\n  focusPageDownOption = () => {\n    this.focusAdjacentOption('page_down');\n  };\n\n  focusStartOption = () => {\n    this.focusAdjacentOption('start');\n  };\n\n  focusEndOption = () => {\n    this.focusAdjacentOption('end');\n  };\n\n  focusAdjacentOption = (dir: string) => {\n    const options = this.visibleOptions\n      .map((option, index) => ({ option, index }))\n      .filter(option => !option.option.disabled);\n    this.scrollToFocusedOptionOnUpdate = true;\n    if (!this.state.isOpen) {\n      this.setState({\n        isOpen: true,\n        inputValue: '',\n        focusedOption: this.focusedOption || options[dir === 'next' ? 0 : options.length - 1].option\n      });\n      return;\n    }\n    if (!options.length) return;\n    let focusedIndex = -1;\n    for (let i = 0; i < options.length; (i += 1)) {\n      if (this.focusedOption === options[i].option) {\n        focusedIndex = i;\n        break;\n      }\n    }\n    if (dir === 'next' && focusedIndex !== -1) {\n      focusedIndex = (focusedIndex + 1) % options.length;\n    } else if (dir === 'previous') {\n      if (focusedIndex > 0) {\n        focusedIndex -= 1;\n      } else {\n        focusedIndex = options.length - 1;\n      }\n    } else if (dir === 'start') {\n      focusedIndex = 0;\n    } else if (dir === 'end') {\n      focusedIndex = options.length - 1;\n    } else if (dir === 'page_up') {\n      const potentialIndex = focusedIndex - this.props.pageSize;\n      if (potentialIndex < 0) {\n        focusedIndex = 0;\n      } else {\n        focusedIndex = potentialIndex;\n      }\n    } else if (dir === 'page_down') {\n      const potentialIndex = focusedIndex + this.props.pageSize;\n      if (potentialIndex > (options.length - 1)) {\n        focusedIndex = options.length - 1;\n      } else {\n        focusedIndex = potentialIndex;\n      }\n    }\n\n    this.setState({\n      focusedIndex: options[focusedIndex].index,\n      focusedOption: options[focusedIndex].option\n    });\n  };\n\n  selectFocusedOption = () => {\n    if (this.focusedOption) {\n      return this.selectValue(this.focusedOption);\n    }\n    return false;\n  };\n\n  renderLoading = () => {\n    if (this.props.isLoading) {\n      return (\n        <span\n          className={this.props.theme['select-loading-zone']}\n          data-test-id={this.props.testId && `${this.props.testId}-select-loading`}\n          aria-hidden=\"true\"\n        >\n          <span className={classNames(this.props.theme['select-loading'], 'select-loading')} />\n        </span>\n      );\n    }\n    return false;\n  };\n\n  renderValue = (valueArray: any, isOpen: any) => {\n    const renderLabel = this.props.valueRenderer || this.getOptionLabel;\n    const ValueComponent = this.props.valueComponent;\n    if (!valueArray.length || (valueArray.length === 1 && valueArray[0].length === 0)) {\n      return !this.state.inputValue ? <div className={this.props.theme['select-placeholder']}>{this.props.placeholder}</div> : null;\n    }\n    let onClick = this.props.onValueClick ? this.handleValueClick : null;\n    if (this.props.multi) {\n      return valueArray.map((value, i) => {\n        const ValueComponentData = (\n          <ValueComponent\n            id={`${this.instancePrefix}-value-${i}`}\n            instancePrefix={this.instancePrefix}\n            disabled={this.props.disabled || value.clearableValue === false}\n            key={`value-${i}-${value[this.props.valueKey]}`}\n            onClick={onClick}\n            onRemove={this.removeValue}\n            value={value}\n            className={this.props.theme['select-value']}\n            classNameLabel={this.props.theme['select-value-label']}\n            classNameValueIcon={this.props.theme['select-value-icon']}\n            testId={this.props.testId && `${this.props.testId}-value`}\n          >\n            {renderLabel(value, i)}\n            <span className={this.props.theme['select-aria-only']}>&nbsp;</span>\n          </ValueComponent>\n        );\n        return ValueComponentData;\n      });\n    } else if (!this.state.inputValue) {\n      if (isOpen) onClick = null;\n      return (\n        <ValueComponent\n          id={`${this.instancePrefix}-value-item`}\n          disabled={this.props.disabled}\n          instancePrefix={this.instancePrefix}\n          onClick={onClick}\n          value={valueArray[0]}\n          className={this.props.theme['select-value']}\n          classNameLabel={this.props.theme['select-value-label']}\n          testId={this.props.testId && `${this.props.testId}-value`}\n        >\n          {renderLabel(valueArray[0])}\n        </ValueComponent>\n      );\n    }\n    return false;\n  };\n\n  renderInput = (valueArray: any, focusedOptionIndex: any) => {\n    const className = classNames(this.props.theme['select-input'], this.props.theme[this.props.inputProps.className]);\n    const isOpen = !!this.state.isOpen;\n\n    const ariaOwns = classNames({\n      [`${this.instancePrefix}-list`]: isOpen,\n      [`${this.instancePrefix}-backspace-remove-message`]: this.props.multi\n      && !this.props.disabled\n      && this.state.isFocused\n      && !this.state.inputValue\n    });\n\n    // TODO: Check how this project includes Object.assign()\n    const tabIndexValue = this.props.tabindex || '';\n    let inputName;\n    if ((this.state.valueDefine && !this.props.value) ||\n      (!this.state.valueDefine && !this.state.value) ||\n      (this.props.multi && this.state.valueDefine && !this.props.value.length) ||\n      (this.props.multi && !this.state.valueDefine && !this.state.value.length)) {\n      inputName = this.props.name;\n    } else {\n      inputName = '';\n    }\n    const inputProps = Object.assign({}, this.props.inputProps, {\n      'role': 'combobox',\n      'aria-expanded': `${isOpen}`,\n      'aria-owns': ariaOwns,\n      'aria-haspopup': `${isOpen}`,\n      'aria-activedescendant': isOpen ? `${this.instancePrefix}-option-${focusedOptionIndex}` : `${this.instancePrefix}-value`,\n      'aria-labelledby': '',\n      'aria-label': '',\n      'className': className,\n      'tabIndex': tabIndexValue,\n      'onBlur': this.handleInputBlur,\n      'onChange': this.handleInputChange,\n      'onFocus': this.handleInputFocus,\n      'ref': ref => (this.input = ref),\n      'required': this.state.required,\n      'value': this.state.inputValue,\n      'name': inputName,\n    });\n\n    if (this.props.inputRenderer) {\n      return this.props.inputRenderer(inputProps);\n    }\n\n    if (this.props.disabled || !this.props.searchable) {\n      const { inputClassName, ...divProps } = this.props.inputProps; // eslint-disable-line\n      return (\n        <div // eslint-disable-line\n          {...divProps}\n          role=\"combobox\"\n          aria-expanded={isOpen}\n          aria-owns={isOpen ? `${this.instancePrefix}-list` : `${this.instancePrefix}-value`}\n          aria-activedescendant={isOpen ? `${this.instancePrefix}-option-${focusedOptionIndex}` : `${this.instancePrefix}-value`}\n          className={className}\n          tabIndex={tabIndexValue}\n          onBlur={this.handleInputBlur}\n          onFocus={this.handleInputFocus}\n          ref={ref => (this.input = ref)}\n          aria-readonly={!!this.props.disabled}\n        />\n      );\n    }\n\n\n    return (\n      <AutosizeInput\n        data-test-id={this.props.testId && `${this.props.testId}-filter-value`}\n        {...inputProps}\n        minWidth=\"5\"\n      />\n    );\n  };\n\n  renderClear = () => {\n    if (\n      ((this.state.valueDefine && !this.props.value) ||\n      (!this.state.valueDefine && !this.state.value)) ||\n      !this.props.clearable ||\n      (this.state.valueDefine && this.props.multi && !this.props.value.length) ||\n      (!this.state.valueDefine && this.props.multi && !this.state.value.length) ||\n      this.props.disabled ||\n      this.props.isLoading\n    ) return false;\n    const clearNote = (\n      <span\n        className={this.props.theme['select-clear-zone']}\n        title={this.props.multi ? this.props.clearAllText : this.props.clearValueText}\n        aria-label={this.props.multi ? this.props.clearAllText : this.props.clearValueText}\n        data-test-id={this.props.testId && `${this.props.testId}-select-clear-zone`}\n        onMouseDown={this.clearValue}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n        onTouchEnd={this.handleTouchEndClearValue}\n      >\n        <span className={this.props.theme['select-clear']} dangerouslySetInnerHTML={{ __html: '&times;' }} />\n      </span>\n    );\n    return clearNote;\n  };\n\n  renderArrow = () => {\n    const onMouseDown = this.handleMouseDownOnArrow;\n    const theme = this.props.theme;\n    const testId = this.props.testId;\n    const arrow = this.props.arrowRenderer({ onMouseDown, theme });\n\n    return (\n      <span\n        className={theme['select-arrow-zone']}\n        data-test-id={testId && `${testId}-select-arrow-zone`}\n        onMouseDown={onMouseDown}\n      >\n        {arrow}\n      </span>\n    );\n  };\n\n  filterOptions = (excludeOptions: any) => {\n    const filterValue = this.state.inputValue;\n    const options = this.props.options || [];\n    if (this.props.filterOptions) {\n      // Maintain backwards compatibility with boolean attribute\n      const filterOptions = typeof this.props.filterOptions === 'function'\n        ? this.props.filterOptions\n        : defaultFilterOptions;\n\n      return filterOptions(\n        options,\n        filterValue,\n        excludeOptions,\n        {\n          filterOption: this.props.filterOption,\n          ignoreAccents: this.props.ignoreAccents,\n          ignoreCase: this.props.ignoreCase,\n          labelKey: this.props.labelKey,\n          matchPos: this.props.matchPos,\n          matchProp: this.props.matchProp,\n          valueKey: this.props.valueKey,\n          theme: this.props.theme,\n        }\n      );\n    }\n    return options;\n  };\n\n  onOptionRef = (ref: any, isFocused: boolean) => {\n    if (isFocused) {\n      this.focused = ref;\n    }\n  };\n\n  renderMenu = (options: any, valueArray: any, focusedOption: any, testId: any) => {\n    if (options && options.length) {\n      return this.props.menuRenderer({\n        focusedOption,\n        focusOption: this.focusOption,\n        instancePrefix: this.instancePrefix,\n        labelKey: this.props.labelKey,\n        onFocus: this.focusOption,\n        onSelect: this.selectValue,\n        optionClassName: this.props.optionClassName,\n        optionComponent: this.props.optionComponent,\n        optionRenderer: this.props.optionRenderer || this.getOptionLabel,\n        options,\n        selectValue: this.selectValue,\n        valueArray,\n        valueKey: this.props.valueKey,\n        onOptionRef: this.onOptionRef,\n        testId,\n        theme: this.props.theme\n      });\n    } else if (this.props.noResultsText) {\n      return (\n        <div\n          className={this.props.theme['select-noresults']}\n          data-test-id={testId && `${testId}-no-result`}\n        >\n          {this.props.noResultsText}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  renderHiddenField = (valueArray: any) => {\n    if (!this.props.name) return false;\n    if (this.props.joinValues) {\n      const value = valueArray.map(\n        i => stringifyValue(i[this.props.valueKey])\n      ).join(this.props.delimiter);\n      const hiddenField = (\n        <input\n          type=\"hidden\"\n          ref={ref => (this.value = ref)}\n          name={this.props.name}\n          value={value}\n          disabled={this.props.disabled}\n          required={this.props.required}\n        />\n      );\n      return hiddenField;\n    }\n    return valueArray.map((item, index) => (\n      <input\n        key={`hidden.${index}`}\n        type=\"hidden\"\n        ref={`value${index}`}\n        name={this.props.name}\n        value={stringifyValue(item[this.props.valueKey])}\n        disabled={this.props.disabled}\n        required={this.props.required}\n      />\n    ));\n  };\n\n  getFocusableOptionIndex = (selectedOption: any) => {\n    const options = this.visibleOptions;\n    if (!options.length) return null;\n\n    const focusedOption = this.state.focusedOption || selectedOption;\n    if (focusedOption && !focusedOption.disabled) {\n      const focusedOptionIndex = options.indexOf(focusedOption);\n      if (focusedOptionIndex !== -1) {\n        return focusedOptionIndex;\n      }\n    }\n\n    for (let i = 0; i < options.length; (i += 1)) {\n      if (!options[i].disabled) return i;\n    }\n    return null;\n  };\n\n  scrollMenuIntoView() {\n    setTimeout(() => {\n      const menuContainerRect = this.menuContainer.getBoundingClientRect();\n\n      if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {\n        window.scrollBy(0,\n          (menuContainerRect.bottom + this.props.menuBuffer) - window.innerHeight);\n      }\n    }, 0);\n  }\n\n  renderOuter = (options: any, valueArray: any, focusedOption: any, testId: any) => {\n    const menu = this.renderMenu(options, valueArray, focusedOption, testId);\n    if (!menu) {\n      return null;\n    }\n\n    return (\n      <RenderInBody>\n        <div\n          ref={ref => (this.menuContainer = ref)}\n          className={this.props.theme['select-menu-outer']}\n          style={this.props.menuContainerStyle}\n        >\n          <div\n            ref={ref => (this.menu = ref)}\n            role=\"listbox\"\n            data-test-id={this.props.testId && `${this.props.testId}-select-menu`}\n            className={this.props.theme['select-menu']}\n            id={`${this.instancePrefix}-list`}\n            style={this.props.menuStyle}\n            onScroll={this.handleMenuScroll}\n            onMouseDown={this.handleMouseDownOnMenu}\n          >\n            {menu}\n          </div>\n        </div>\n      </RenderInBody>\n    );\n  };\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      isValid,\n      isDirty,\n      isFocused,\n      } = this.props;\n\n    const valueArray = this.state.valueDefine\n      ?\n      this.getValueArray(this.props.value)\n      :\n      this.getValueArray(this.state.value);\n    this.visibleOptions = this.filterOptions(\n      this.props.multi  // eslint-disable-line\n        ?\n        this.state.valueDefine\n          ?\n          this.getValueArray(this.props.value)\n          :\n          this.getValueArray(this.state.value)\n        :\n        null\n    );\n    const options = this.visibleOptions;\n    let isOpen = this.state.isOpen;\n    if (this.props.multi && !options.length && valueArray.length && !this.state.inputValue) {\n      isOpen = false;\n    }\n    const focusedOptionIndex = this.getFocusableOptionIndex(valueArray[0]);\n\n    let focusedOption = null;\n    if (focusedOptionIndex !== null) {\n      focusedOption = this.focusedOption = options[focusedOptionIndex];\n    } else {\n      focusedOption = this.focusedOption = null;\n    }\n\n    const multi = this.props.multi ? theme['select--multi'] : theme['select--single'];\n    const disabled = this.props.disabled ? theme['is-disabled'] : '';\n    const focusedStatus = typeof isFocused === 'undefined' ? this.state.isFocused : isFocused;\n    const focused = focusedStatus ? theme['is-focused'] : '';\n    const loading = this.props.isLoading ? theme['is-loading'] : '';\n    const valid = isValid ? theme['is-valid'] : theme['has-error'];\n    const dirty = isDirty ? theme['is-dirty'] : '';\n    const pseudoFocused = this.state.isPseudoFocused ? theme['is-pseudo-focused'] : '';\n    const searchable = this.props.searchable ? theme['is-searchable'] : '';\n    const valueClass = valueArray.length ? theme['has-value'] : '';\n    const open = isOpen ? theme['is-open'] : '';\n    const focusSelect = this.state.isFocused ? theme['focus-select'] : '';\n    let removeMessage = null;\n    if (this.props.multi &&\n      !this.props.disabled &&\n      valueArray.length &&\n      !this.state.inputValue &&\n      this.state.isFocused &&\n      this.props.backspaceRemoves) {\n      removeMessage = (\n        <span\n          data-test-id={testId && `${testId}-select-remove-message`}\n          id={`${this.instancePrefix}-backspace-remove-message`}\n          className={this.props.theme['select-aria-only']}\n          aria-live=\"assertive\"\n        >\n          {\n            this.props.backspaceToRemoveMessage.replace(\n              '{label}',\n              valueArray[valueArray.length - 1][this.props.labelKey]\n            )\n          }\n        </span>\n      );\n    }\n    return (\n      <div\n        className={classNames(\n          className,\n          theme.select,\n          multi,\n          disabled,\n          focused,\n          loading,\n          pseudoFocused,\n          searchable,\n          valueClass,\n          dirty,\n          valid,\n          focusSelect,\n          open\n        )}\n        data-test-id={testId}\n        data-anypoint-component=\"Select\"\n        ref={ref => (this.wrapper = ref)}\n        style={this.props.wrapperStyle}\n      >\n        {this.renderHiddenField(valueArray)}\n        <div // eslint-disable-line\n          ref={ref => (this.control = ref)}\n          className={this.props.theme['select-control']}\n          data-test-id={testId && `${testId}-select-control`}\n          style={this.props.style}\n          onKeyDown={this.handleKeyDown}\n          onMouseDown={this.handleMouseDown}\n          onTouchEnd={this.handleTouchEnd}\n          onTouchStart={this.handleTouchStart}\n          onTouchMove={this.handleTouchMove}\n        >\n          <span\n            className={this.props.theme['select-multi-value-wrapper']}\n            id={`${this.instancePrefix}-value`}\n          >\n            {this.renderValue(valueArray, isOpen)}\n            {this.renderInput(valueArray, focusedOptionIndex)}\n          </span>\n          {removeMessage}\n          {this.renderLoading()}\n          {this.renderClear()}\n          {this.renderArrow()}\n        </div>\n        {\n          isOpen\n            ?\n            this.renderOuter(\n              options,\n              !this.props.multi ? valueArray : null,\n              focusedOption,\n              this.props.testId\n            )\n            :\n            null\n        }\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Select here","methods":[{"name":"setMenuPosition","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"scrollMenuIntoView","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"onChange handler: function (newValue) {}"},"options":{"flowType":{"name":"tuple","raw":"[]","elements":[]},"required":true,"description":"array of options"},"value":{"flowType":{"name":"any"},"required":true,"description":"initial field value"},"valueComponent":{"flowType":{"name":"signature","type":"function","raw":"() => any","signature":{"arguments":[],"return":{"name":"any"}}},"required":true,"description":"value component to render","defaultValue":{"value":"Value","computed":true}},"valueKey":{"flowType":{"name":"string"},"required":false,"description":"path of the label value in option objects","defaultValue":{"value":"'value'","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Select component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Select component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Select","defaultValue":{"value":"{}","computed":false}},"aria-label":{"flowType":{"name":"string"},"required":true,"description":"Aria label (for assistive tech)"},"aria-labelledby":{"flowType":{"name":"string"},"required":true,"description":"HTML ID of an element that should be used as the label (for assistive tech)"},"arrowRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"Create drop-down caret element","defaultValue":{"value":"defaultArrowRenderer","computed":true}},"autoBlur":{"flowType":{"name":"boolean"},"required":false,"description":"automatically blur the component when an option is selected"},"multi":{"flowType":{"name":"boolean"},"required":false,"description":"multi-value input","defaultValue":{"value":"false","computed":false}},"autofocus":{"flowType":{"name":"boolean"},"required":false,"description":"autofocus the component on mount"},"backspaceRemoves":{"flowType":{"name":"boolean"},"required":false,"description":"whether backspace removes an item if there is no text input","defaultValue":{"value":"true","computed":false}},"backspaceToRemoveMessage":{"flowType":{"name":"string"},"required":true,"description":"Message to use for screenreaders to press backspace to remove the current\nitem - {label} is replaced with the item label","defaultValue":{"value":"'Press backspace to remove {label}'","computed":false}},"clearAllText":{"flowType":{"name":"any"},"required":false,"description":"title for the \"clear\" control when multi: true","defaultValue":{"value":"'Clear all'","computed":false}},"clearValueText":{"flowType":{"name":"any"},"required":false,"description":"title for the \"clear\" control","defaultValue":{"value":"'Clear value'","computed":false}},"clearable":{"flowType":{"name":"boolean"},"required":false,"description":"should it be possible to reset value","defaultValue":{"value":"false","computed":false}},"deleteRemoves":{"flowType":{"name":"boolean"},"required":false,"description":"whether backspace removes an item if there is no text input","defaultValue":{"value":"true","computed":false}},"delimiter":{"flowType":{"name":"string"},"required":false,"description":"delimiter to use to join multiple values for the hidden field value","defaultValue":{"value":"','","computed":false}},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"whether the Select is disabled or not","defaultValue":{"value":"false","computed":false}},"escapeClearsValue":{"flowType":{"name":"boolean"},"required":false,"description":"whether escape clears the value when the menu is closed","defaultValue":{"value":"true","computed":false}},"filterOption":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"method to filter a single option (option, filterString)"},"filterOptions":{"flowType":{"name":"any"},"required":false,"description":"boolean to enable default filtering or function to filter the options array ([options],\nfilterString, [values])","defaultValue":{"value":"defaultFilterOptions","computed":true}},"ignoreAccents":{"flowType":{"name":"boolean"},"required":false,"description":"whether to strip diacritics when filtering","defaultValue":{"value":"true","computed":false}},"ignoreCase":{"flowType":{"name":"boolean"},"required":false,"description":"whether to perform case-insensitive filtering","defaultValue":{"value":"true","computed":false}},"inputProps":{"flowType":{"name":"Object"},"required":true,"description":"custom attributes for the Input","defaultValue":{"value":"{}","computed":false}},"inputRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"returns a custom input component"},"instanceId":{"flowType":{"name":"string"},"required":false,"description":"set the components instanceId"},"isLoading":{"flowType":{"name":"boolean"},"required":false,"description":"whether the Select is loading externally or not (such as options being loaded)","defaultValue":{"value":"false","computed":false}},"joinValues":{"flowType":{"name":"boolean"},"required":false,"description":"joins multiple values into a single form field with the delimiter (legacy mode)","defaultValue":{"value":"false","computed":false}},"labelKey":{"flowType":{"name":"string"},"required":false,"description":"path of the label value in option objects","defaultValue":{"value":"'label'","computed":false}},"matchPos":{"flowType":{"name":"string"},"required":false,"description":"(any|start) match the start or entire string when filtering","defaultValue":{"value":"'any'","computed":false}},"matchProp":{"flowType":{"name":"string"},"required":false,"description":"(any|label|value) which option property to filter on","defaultValue":{"value":"'any'","computed":false}},"menuBuffer":{"flowType":{"name":"number"},"required":false,"description":"optional buffer (in px) between the bottom of the viewport and the bottom of the menu","defaultValue":{"value":"0","computed":false}},"menuContainerStyle":{"flowType":{"name":"Object"},"required":false,"description":"optional style to apply to the menu container"},"menuRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"renders a custom menu with options","defaultValue":{"value":"defaultMenuRenderer","computed":true}},"menuStyle":{"flowType":{"name":"Object"},"required":false,"description":"optional style to apply to the menu"},"name":{"flowType":{"name":"string"},"required":false,"description":"generates a hidden input tag with this field name for html forms"},"noResultsText":{"flowType":{"name":"any"},"required":false,"description":"placeholder displayed when there are no matching search results","defaultValue":{"value":"'No results found'","computed":false}},"onBlur":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onBlur handler: function (event) {}"},"onBlurResetsInput":{"flowType":{"name":"boolean"},"required":false,"description":"whether input is cleared on blur","defaultValue":{"value":"true","computed":false}},"onClose":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"fires when the menu is closed"},"onCloseResetsInput":{"flowType":{"name":"boolean"},"required":false,"description":"whether input is cleared when menu is closed through the arrow","defaultValue":{"value":"true","computed":false}},"onFocus":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onFocus handler: function (event) {}"},"onInputChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onInputChange handler: function (inputValue) {}"},"onInputKeyDown":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"input keyDown handler: function (event) {}"},"onMenuScrollToBottom":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"fires when the menu is scrolled to the bottom; can be used to paginate options"},"onOpen":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"fires when the menu is opened"},"onValueClick":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onClick handler for value labels: function (value, event) {}"},"openAfterFocus":{"flowType":{"name":"boolean"},"required":false,"description":"boolean to enable opening dropdown when focused","defaultValue":{"value":"false","computed":false}},"openOnFocus":{"flowType":{"name":"boolean"},"required":false,"description":"always open options menu on focus"},"optionClassName":{"flowType":{"name":"string"},"required":false,"description":"additional class(es) to apply to the <Option /> elements"},"optionComponent":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"option component to render in dropdown","defaultValue":{"value":"Option","computed":true}},"optionRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"optionRenderer: function (option) {}"},"pageSize":{"flowType":{"name":"number"},"required":true,"description":"number of entries to page when using page up/down keys","defaultValue":{"value":"5","computed":false}},"placeholder":{"flowType":{"name":"any"},"required":false,"description":"field placeholder, displayed when there's no value","defaultValue":{"value":"'Select...'","computed":false}},"required":{"flowType":{"name":"boolean"},"required":false,"description":"applies HTML5 required attribute when needed","defaultValue":{"value":"false","computed":false}},"resetValue":{"flowType":{"name":"any"},"required":false,"description":"value to use when you clear the control"},"scrollMenuIntoView":{"flowType":{"name":"boolean"},"required":false,"description":"boolean to enable the viewport to shift so that the full menu fully visible when engaged","defaultValue":{"value":"true","computed":false}},"searchable":{"flowType":{"name":"boolean"},"required":false,"description":"whether to enable searching feature or not","defaultValue":{"value":"true","computed":false}},"simpleValue":{"flowType":{"name":"boolean"},"required":false,"description":"pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false","defaultValue":{"value":"false","computed":false}},"style":{"flowType":{"name":"Object"},"required":false,"description":"optional style to apply to the control"},"tabindex":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":false,"description":"optional tab index of the control"},"tabSelectsValue":{"flowType":{"name":"boolean"},"required":false,"description":"whether to treat tabbing out while focused to be value selection","defaultValue":{"value":"true","computed":false}},"valueRenderer":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"valueRenderer: function (option) {}"},"wrapperStyle":{"flowType":{"name":"Object"},"required":false,"description":"optional style to apply to the component wrapper"},"isValid":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the value is valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the Select has been touched by the user","defaultValue":{"value":"false","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the Select has been focused"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Select/examples/1_Select_usage.js","requirePath":"../src/components/Select/examples/1_Select_usage.js","description":"","source":"import React from 'react';\nimport { Select } from '../../';\nimport { Checkbox } from '../../Checkbox';\n\n/**\n * @component ../../Select\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 'two', isDirty: true, isValid: true, isFocused: false };\n    this.handleValid = this.handleValid.bind(this);\n    this.handleDirty = this.handleDirty.bind(this);\n    this.handleFocused = this.handleFocused.bind(this);\n    this.setValue = this.setValue.bind(this);\n  }\n\n  setValue(e) {\n    console.log('Change', e);\n    this.setState({ value: e.value });\n  }\n\n  handleFocused() {\n    this.setState({ isFocused: !this.state.isFocused });\n  }\n\n  handleValid() {\n    this.setState({ isValid: !this.state.isValid });\n  }\n\n  handleDirty() {\n    this.setState({ isDirty: !this.state.isDirty });\n  }\n\n  render() {\n    const { value, isValid, isDirty, isFocused } = this.state;\n    const options = [\n      { value: 'one', label: 'One' },\n      { value: 'two', label: 'Two' }\n    ];\n\n    return (\n      <div>\n        <h2>Default select</h2>\n        <Select\n          onChange={this.setValue}\n          options={options}\n          name=\"Select\"\n          value={value}\n          isValid={isValid}\n          isDirty={isDirty}\n          isFocused={isFocused}\n          tabindex=\"4\"     // eslint-disable-line\n        />\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleValid}\n            name=\"firstCheckbox\"\n            checked={isValid}\n            label=\"Turn on/off valid value\"\n            tabindex=\"3\"   // eslint-disable-line\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleDirty}\n            name=\"firstCheckbox\"\n            checked={isDirty}\n            label=\"Turn on/off dirty value\"\n            tabindex=\"2\"   // eslint-disable-line\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleFocused}\n            name=\"firstCheckbox\"\n            checked={isFocused}\n            label=\"Turn on/off focused value\"\n            tabindex=\"1\"   // eslint-disable-line\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        value,\n        isValid,\n        isDirty,\n        isFocused\n    } = this.state;\n\n    const options = [{\n        value: \"one\",\n        label: \"One\"\n    }, {\n        value: \"two\",\n        label: \"Two\"\n    }];\n\n    return (\n        <div>\n            <h2>Default select</h2>\n            <Select\n                onChange={this.setValue}\n                options={options}\n                name=\"Select\"\n                value={value}\n                isValid={isValid}\n                isDirty={isDirty}\n                isFocused={isFocused}\n                tabindex=\"4\" />\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleValid}\n                    name=\"firstCheckbox\"\n                    checked={isValid}\n                    label=\"Turn on/off valid value\"\n                    tabindex=\"3\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDirty}\n                    name=\"firstCheckbox\"\n                    checked={isDirty}\n                    label=\"Turn on/off dirty value\"\n                    tabindex=\"2\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleFocused}\n                    name=\"firstCheckbox\"\n                    checked={isFocused}\n                    label=\"Turn on/off focused value\"\n                    tabindex=\"1\" />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Select/examples/2_Select_usage.js","requirePath":"../src/components/Select/examples/2_Select_usage.js","description":"","source":"import React from 'react';\nimport { Select } from '../../';\nimport { Checkbox } from '../../Checkbox';\n\n/**\n * @component ../../Select\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"valueClick\"] }] */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'two',\n      isLoading: false,\n      isSearchable: true,\n      isClearable: true,\n      isDisabled: false\n    };\n    this.setValue = this.setValue.bind(this);\n    this.handleSearchable = this.handleSearchable.bind(this);\n    this.handleClearable = this.handleClearable.bind(this);\n    this.handleDisabled = this.handleDisabled.bind(this);\n    this.handleLoading = this.handleLoading.bind(this);\n    this.valueClick = this.valueClick.bind(this);\n  }\n\n  setValue(e) {\n    console.log('Change', e);\n    this.setState({ value: e.value });\n  }\n\n  valueClick() {\n    alert('Value click');\n  }\n\n  handleSearchable(e) {\n    this.setState({ isSearchable: e.value });\n  }\n\n  handleClearable(e) {\n    this.setState({ isClearable: e.value });\n  }\n\n  handleDisabled(e) {\n    this.setState({ isDisabled: e.value });\n  }\n\n  handleLoading(e) {\n    this.setState({ isLoading: e.value });\n  }\n\n  render() {\n    const options = [\n      { value: 'one', label: 'One' },\n      { value: 'two', label: 'Two' },\n      { value: 'three', label: 'Three' },\n      { value: 'four', label: 'Link to google site', href: 'http://www.google.com', target: 'blank' },\n      { value: 'five', label: 'Disabled point', disabled: true },\n      { value: 'six', label: 'Very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value ' }\n    ];\n    return (\n      <div>\n        <h2>\n          Custom select where fourth point is link with open in new window and fifth\n          point is disabled and also customer text for no results\n        </h2>\n        <Select\n          onChange={this.setValue}\n          options={options}\n          searchable={this.state.isSearchable}\n          clearable={this.state.isClearable}\n          disabled={this.state.isDisabled}\n          noResultsText=\"No results custom text\"\n          isLoading={this.state.isLoading}\n          name=\"select\"\n          value={this.state.value}\n          theme={Select.themes.LightTheme}\n        />\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleSearchable}\n            name=\"firstCheckbox2\"\n            checked={this.state.isSearchable}\n            label=\"Turn on/off searchable in select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleDisabled}\n            name=\"secondCheckbox2\"\n            checked={this.state.isDisabled}\n            label=\"Turn on/off disabled select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleClearable}\n            name=\"thirthCheckbox2\"\n            checked={this.state.isClearable}\n            label=\"Turn on/off clearable in select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleLoading}\n            name=\"fourthCheckbox2\"\n            checked={this.state.isLoading}\n            label=\"Turn on/off loading in select\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const options = [{\n        value: \"one\",\n        label: \"One\"\n    }, {\n        value: \"two\",\n        label: \"Two\"\n    }, {\n        value: \"three\",\n        label: \"Three\"\n    }, {\n        value: \"four\",\n        label: \"Link to google site\",\n        href: \"http://www.google.com\",\n        target: \"blank\"\n    }, {\n        value: \"five\",\n        label: \"Disabled point\",\n        disabled: true\n    }, {\n        value: \"six\",\n        label: \"Very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value \"\n    }];\n\n    return (\n        <div>\n            <h2>Custom select where fourth point is link with open in new window and fifth\n                          point is disabled and also customer text for no results</h2>\n            <Select\n                onChange={this.setValue}\n                options={options}\n                searchable={this.state.isSearchable}\n                clearable={this.state.isClearable}\n                disabled={this.state.isDisabled}\n                noResultsText=\"No results custom text\"\n                isLoading={this.state.isLoading}\n                name=\"select\"\n                value={this.state.value}\n                theme={Select.themes.LightTheme} />\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleSearchable}\n                    name=\"firstCheckbox2\"\n                    checked={this.state.isSearchable}\n                    label=\"Turn on/off searchable in select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDisabled}\n                    name=\"secondCheckbox2\"\n                    checked={this.state.isDisabled}\n                    label=\"Turn on/off disabled select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleClearable}\n                    name=\"thirthCheckbox2\"\n                    checked={this.state.isClearable}\n                    label=\"Turn on/off clearable in select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleLoading}\n                    name=\"fourthCheckbox2\"\n                    checked={this.state.isLoading}\n                    label=\"Turn on/off loading in select\" />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Select/examples/3_Select_usage.js","requirePath":"../src/components/Select/examples/3_Select_usage.js","description":"","source":"import React from 'react';\nimport { Select } from '../../';\nimport { Checkbox } from '../../Checkbox';\n\n/**\n * @component ../../Select\n */\n\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'two',\n      isLoadingMulti: false,\n      isSearchableMulti: true,\n      isClearableMulti: true,\n      isDisabledMulti: false\n    };\n    this.setValueMulti = this.setValueMulti.bind(this);\n    this.handleSearchableMulti = this.handleSearchableMulti.bind(this);\n    this.handleClearableMulti = this.handleClearableMulti.bind(this);\n    this.handleDisabledMulti = this.handleDisabledMulti.bind(this);\n    this.handleLoadingMulti = this.handleLoadingMulti.bind(this);\n  }\n\n  setValueMulti(e) {\n    console.log('Change', e);\n    this.setState({ value: e.value });\n  }\n\n  handleLoadingMulti(e) {\n    this.setState({ isLoadingMulti: e.value });\n  }\n\n  handleSearchableMulti(e) {\n    this.setState({ isSearchableMulti: e.value });\n  }\n\n  handleClearableMulti(e) {\n    this.setState({ isClearableMulti: e.value });\n  }\n\n  handleDisabledMulti(e) {\n    this.setState({ isDisabledMulti: e.value });\n  }\n\n  render() {\n    const optionsMulti = [\n      { customValue: 'one', customName: 'Disabled point', disabled: true },\n      { customValue: 'two', customName: 'Link to Google site', href: 'http://www.google.com', target: 'blank' },\n      { customValue: 'three', customName: '3' },\n      { customValue: 'four', customName: '4' },\n      { customValue: 'five', customName: '5' },\n      { customValue: 'six', customName: '6' },\n      { customValue: 'seven', customName: '7' },\n      { customValue: 'eight', customName: '8' },\n      { customValue: 'nine', customName: '9' },\n      { customValue: 'ten', customName: '10' },\n      { customValue: 'eleven', customName: '11' },\n      { customValue: 'twelve', customName: '12' },\n      { customValue: 'thirteen', customName: '13' },\n      { customValue: 'fourteen', customName: '14' },\n      { customValue: 'fifteen', customName: '15' },\n      { customValue: 'sixteen', customName: '16' },\n      { customValue: 'seventeen', customName: 'Very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value' }\n    ];\n    return (\n      <div>\n        <h2>Multi select</h2>\n        <Select\n          onChange={this.setValueMulti}\n          options={optionsMulti}\n          name=\"Multiselect\"\n          multi\n          searchable={this.state.isSearchableMulti}\n          clearable={this.state.isClearableMulti}\n          disabled={this.state.isDisabledMulti}\n          noResultsText=\"No results custom text\"\n          isLoading={this.state.isLoadingMulti}\n          value={this.state.value}\n          valueKey=\"customValue\"\n          labelKey=\"customName\"\n        />\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleSearchableMulti}\n            name=\"SearchableMultiCheckbox\"\n            checked={this.state.isSearchableMulti}\n            label=\"Turn on/off searchable in select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleDisabledMulti}\n            name=\"DisabledMultiCheckbox\"\n            checked={this.state.isDisabledMulti}\n            label=\"Turn on/off disabled select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleClearableMulti}\n            name=\"ClearableMultiCheckbox\"\n            checked={this.state.isClearableMulti}\n            label=\"Turn on/off clearable in select\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleLoadingMulti}\n            name=\"LoadingMultiCheckbox\"\n            checked={this.state.isLoadingMulti}\n            label=\"Turn on/off loading in select\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const optionsMulti = [{\n        customValue: \"one\",\n        customName: \"Disabled point\",\n        disabled: true\n    }, {\n        customValue: \"two\",\n        customName: \"Link to Google site\",\n        href: \"http://www.google.com\",\n        target: \"blank\"\n    }, {\n        customValue: \"three\",\n        customName: \"3\"\n    }, {\n        customValue: \"four\",\n        customName: \"4\"\n    }, {\n        customValue: \"five\",\n        customName: \"5\"\n    }, {\n        customValue: \"six\",\n        customName: \"6\"\n    }, {\n        customValue: \"seven\",\n        customName: \"7\"\n    }, {\n        customValue: \"eight\",\n        customName: \"8\"\n    }, {\n        customValue: \"nine\",\n        customName: \"9\"\n    }, {\n        customValue: \"ten\",\n        customName: \"10\"\n    }, {\n        customValue: \"eleven\",\n        customName: \"11\"\n    }, {\n        customValue: \"twelve\",\n        customName: \"12\"\n    }, {\n        customValue: \"thirteen\",\n        customName: \"13\"\n    }, {\n        customValue: \"fourteen\",\n        customName: \"14\"\n    }, {\n        customValue: \"fifteen\",\n        customName: \"15\"\n    }, {\n        customValue: \"sixteen\",\n        customName: \"16\"\n    }, {\n        customValue: \"seventeen\",\n        customName: \"Very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value, very long text in value\"\n    }];\n\n    return (\n        <div>\n            <h2>Multi select</h2>\n            <Select\n                onChange={this.setValueMulti}\n                options={optionsMulti}\n                name=\"Multiselect\"\n                multi\n                searchable={this.state.isSearchableMulti}\n                clearable={this.state.isClearableMulti}\n                disabled={this.state.isDisabledMulti}\n                noResultsText=\"No results custom text\"\n                isLoading={this.state.isLoadingMulti}\n                value={this.state.value}\n                valueKey=\"customValue\"\n                labelKey=\"customName\" />\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleSearchableMulti}\n                    name=\"SearchableMultiCheckbox\"\n                    checked={this.state.isSearchableMulti}\n                    label=\"Turn on/off searchable in select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDisabledMulti}\n                    name=\"DisabledMultiCheckbox\"\n                    checked={this.state.isDisabledMulti}\n                    label=\"Turn on/off disabled select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleClearableMulti}\n                    name=\"ClearableMultiCheckbox\"\n                    checked={this.state.isClearableMulti}\n                    label=\"Turn on/off clearable in select\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleLoadingMulti}\n                    name=\"LoadingMultiCheckbox\"\n                    checked={this.state.isLoadingMulti}\n                    label=\"Turn on/off loading in select\" />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Select/examples/4_Select_usage.js","requirePath":"../src/components/Select/examples/4_Select_usage.js","description":"","source":"import React from 'react';\nimport { Select } from '../../';\nimport Modal from '../../Modal';\nimport Button from '../../Button';\n\n/**\n * @component ../../Select\n */\n\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDismiss = this.handleDismiss.bind(this);\n    this.renderModal = this.renderModal.bind(this);\n    this.state = { open: false };\n  }\n\n  handleOpen() {\n    this.setState({ open: true });\n  }\n\n  handleSubmit() {\n    this.setState({ open: false });\n  }\n\n  handleDismiss() {\n    this.setState({ open: false });\n  }\n\n  renderModal() {\n    if (this.state.open) {\n      return (\n        <Modal\n          title=\"I'm a Modal\"\n          onSubmit={this.handleSubmit}\n          onCancel={this.handleDismiss}\n        >\n          <Select\n            options={[\n              { value: 'one', label: 'One' },\n              { value: 'two', label: 'Two' }\n            ]}\n          />\n        </Modal>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Select inside a modal</h2>\n        <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h2>Select inside a modal</h2>\n            <Button kind=\"primary\" onClick={this.handleOpen}>Open</Button>\n            {this.renderModal()}\n        </div>\n    );\n}"}]},{"name":"SidebarToggle","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/SidebarToggle/SidebarToggle","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport SidebarItem from '../SidebarItem';\nimport ResizablePanel from '../ResizablePanel';\n\ntype Props = {\n  isOpen?: boolean,\n  width?: number,\n  selected?: string,\n  onResize?: Function,\n  onToggle?: Function,\n  onChange?: Function,\n  children?: any,\n  className?: string,\n  /** theme object for SidebarToggle */\n  theme?: ThemeT,\n  /** id applied to SidebarToggle component */\n  testId?: string,\n};\n\ntype DefaultProps = {\n  isOpen: boolean,\n  width: number,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  isOpen: true,\n  width: 400,\n  theme: {},\n};\n\n/**\n * Describe the purpose of SidebarToggle here\n */\nexport default class SidebarToggle extends React.Component {\n  props: Props;\n\n  static displayName = 'SidebarToggle';\n  static defaultProps: DefaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: this.props.isOpen,\n      selected: this.props.selected,\n      width: this.props.width,\n      sizes: {}\n    };\n\n    if (this.state.isOpen && !this.state.selected) {\n      const panels = this.getPanels();\n      if (panels.length) {\n        this.state.selected = panels[0].props.name;\n      } else {\n        this.state.isOpen = false;\n      }\n    }\n  }\n\n  componentWillReceiveProps(props: Props) {\n    const newState = {};\n\n    if (this.state.isOpen !== props.isOpen) {\n      newState.isOpen = props.isOpen;\n    }\n\n    if (this.state.selected !== props.selected) {\n      newState.selected = props.selected;\n    }\n\n    if (this.state.width !== props.width) {\n      newState.width = props.width;\n    }\n\n    this.setState(newState);\n  }\n\n  getList() {\n    const { children } = this.props;\n    return children && children.filter(c => c && c.type.displayName === 'SidebarList')[0];\n  }\n\n  getPanels() {\n    const { children } = this.props;\n    return (children && children.filter(c => c && c.type.displayName === 'SidebarPanel')) || [];\n  }\n\n  getSelectedPanel() {\n    const { selected } = this.state;\n    const panels = this.getPanels();\n    return panels.find(p => p.props.name === selected);\n  }\n\n  change = ({ value }) => {\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange({ value });\n    } else if (this.state.selected !== value) {\n      this.setState({\n        isOpen: true,\n        selected: value\n      });\n    } else {\n      this.toggle();\n    }\n  };\n\n  resize = ({ value }) => {\n    const { onResize } = this.props;\n    if (onResize) {\n      onResize({ value });\n    } else {\n      const { selected, sizes } = this.state;\n      sizes[selected] = value;\n      this.setState({\n        sizes\n      });\n    }\n  };\n\n  toggle = () => {\n    const { onToggle } = this.props;\n\n    if (onToggle) {\n      onToggle({ value: !this.state.isOpen });\n    } else {\n      const newState = {\n        isOpen: !this.state.isOpen\n      };\n      if (newState.isOpen && !this.state.selected) {\n        const panels = this.getPanels();\n        if (panels.length) {\n          newState.selected = panels[0].props.name;\n        } else {\n          newState.isOpen = false;\n        }\n      }\n      this.setState(newState);\n    }\n  };\n\n  renderList() {\n    const { theme, testId } = this.props;\n    const { isOpen, selected } = this.state;\n    const list = this.getList();\n    return (\n      <div\n        data-test-id={testId && `${testId}-bar`}\n        className={theme.bar}\n      >\n        {\n          list && React.cloneElement(list, {\n            testId,\n            key: 0,\n            onChange: this.change,\n            selected: isOpen && selected,\n          })\n        }\n        <SidebarItem\n          testId={testId && `${testId}-toggle`}\n          className={theme.toggle}\n          onClick={this.toggle}\n        >\n          {isOpen ? '<' : '>' }\n        </SidebarItem>\n      </div>\n    );\n  }\n\n  renderPanels() {\n    const { theme, testId } = this.props;\n    const { isOpen, sizes, selected, width } = this.state;\n    const currentPanel = this.getSelectedPanel();\n\n    return (\n      <div\n        data-test-id={testId && `${testId}-content`}\n        className={theme.content}\n      >\n        <ResizablePanel\n          position=\"left\"\n          isOpen={isOpen}\n          minWidth={currentPanel && currentPanel.props.minWidth}\n          maxWidth={currentPanel && currentPanel.props.maxWidth}\n          width={sizes[selected] || (currentPanel && currentPanel.props.initialWidth) || width}\n          onResize={this.resize}\n          onToggle={this.toggle}\n        >\n          {currentPanel}\n        </ResizablePanel>\n      </div>\n    );\n  }\n\n  render() {\n    const { testId, theme, className } = this.props;\n\n    return (\n      <div\n        className={classNames(\n          theme.sidebarToggle,\n          className\n        )}\n        data-test-id={testId}\n        data-anypoint-component={SidebarToggle.displayName}\n      >\n        {this.renderList()}\n        {this.renderPanels()}\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of SidebarToggle here","displayName":"SidebarToggle","methods":[{"name":"getList","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getPanels","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getSelectedPanel","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderList","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderPanels","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"isOpen":{"flowType":{"name":"boolean"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"width":{"flowType":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"400","computed":false}},"selected":{"flowType":{"name":"string"},"required":false,"description":""},"onResize":{"flowType":{"name":"Function"},"required":false,"description":""},"onToggle":{"flowType":{"name":"Function"},"required":false,"description":""},"onChange":{"flowType":{"name":"Function"},"required":false,"description":""},"children":{"flowType":{"name":"any"},"required":false,"description":""},"className":{"flowType":{"name":"string"},"required":false,"description":""},"theme":{"flowType":{"name":"ThemeT"},"required":false,"description":"theme object for SidebarToggle","defaultValue":{"value":"{}","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to SidebarToggle component"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/SidebarToggle/examples/1_SidebarToggle_usage.js","requirePath":"../src/components/SidebarToggle/examples/1_SidebarToggle_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { SidebarToggle } from '../../';\nimport SidebarList from '../../SidebarList';\nimport SidebarItem from '../../SidebarItem';\nimport SidebarPanel from '../../SidebarPanel';\nimport Button from '../../Button';\n\n/**\n * @component ../../SidebarToggle\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div style={{ position: 'relative', height: '300px' }}>\n        <SidebarToggle>\n          <SidebarList>\n            <SidebarItem name=\"projects\">1</SidebarItem>\n            <SidebarItem name=\"search\">2</SidebarItem>\n            <SidebarItem name=\"team\">3</SidebarItem>\n            <SidebarItem name=\"chat\">4</SidebarItem>\n          </SidebarList>\n          <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n            <div style={{ padding: '20px' }}>\n              <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                consectetur adipiscing elit.\n                Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                hendrerit lectus dignissim.\n              </p>\n              <Button>Button</Button>\n              <Button>Button</Button>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"search\">\n            <div style={{ padding: '20px' }}>\n              <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                consectetur adipiscing elit.\n                Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                hendrerit lectus dignissim.\n              </p>\n              <Button>Button</Button>\n              <Button>Button</Button>\n              <Button>Button</Button>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"team\">\n            <div style={{ padding: '20px' }}>\n              <p>Team</p>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"chat\">\n            <div style={{ padding: '20px' }}>\n              <p>Chat</p>\n            </div>\n          </SidebarPanel>\n        </SidebarToggle>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                position: \"relative\",\n                height: \"300px\"\n            }}>\n            <SidebarToggle>\n                <SidebarList>\n                    <SidebarItem name=\"projects\">1</SidebarItem>\n                    <SidebarItem name=\"search\">2</SidebarItem>\n                    <SidebarItem name=\"team\">3</SidebarItem>\n                    <SidebarItem name=\"chat\">4</SidebarItem>\n                </SidebarList>\n                <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                                            consectetur adipiscing elit.\n                                            Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                                            hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"search\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                                            consectetur adipiscing elit.\n                                            Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                                            hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"team\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Team</p>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"chat\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Chat</p>\n                    </div>\n                </SidebarPanel>\n            </SidebarToggle>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/SidebarToggle/examples/2_SidebarToggle_usage.js","requirePath":"../src/components/SidebarToggle/examples/2_SidebarToggle_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { SidebarToggle } from '../../';\nimport SidebarList from '../../SidebarList';\nimport SidebarItem from '../../SidebarItem';\nimport SidebarPanel from '../../SidebarPanel';\nimport Button from '../../Button';\n\n/**\n * @component ../../SidebarToggle\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      selected: '',\n      width: 300,\n    };\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'relative', height: '300px' }}>\n        <SidebarToggle\n          isOpen={this.state.open}\n          onToggle={e => this.setState({ open: e.value })}\n          selected={this.state.selected}\n          onChange={e => this.setState({ open: true, selected: e.value })}\n          width={this.state.width}\n          onResize={e => this.setState({ width: e.value })}\n        >\n          <SidebarList>\n            <SidebarItem name=\"projects\">1</SidebarItem>\n            <SidebarItem name=\"search\">2</SidebarItem>\n            <SidebarItem name=\"team\">3</SidebarItem>\n            <SidebarItem name=\"chat\">4</SidebarItem>\n          </SidebarList>\n          <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n            <div style={{ padding: '20px' }}>\n              <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                consectetur adipiscing elit.\n                Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                hendrerit lectus dignissim.\n              </p>\n              <Button>Button</Button>\n              <Button>Button</Button>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"search\">\n            <div style={{ padding: '20px' }}>\n              <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                consectetur adipiscing elit.\n                Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                hendrerit lectus dignissim.\n              </p>\n              <Button>Button</Button>\n              <Button>Button</Button>\n              <Button>Button</Button>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"team\">\n            <div style={{ padding: '20px' }}>\n              <p>Team</p>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"chat\">\n            <div style={{ padding: '20px' }}>\n              <p>Chat</p>\n            </div>\n          </SidebarPanel>\n        </SidebarToggle>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                position: \"relative\",\n                height: \"300px\"\n            }}>\n            <SidebarToggle\n                isOpen={this.state.open}\n                onToggle={e => this.setState({\n                    open: e.value\n                })}\n                selected={this.state.selected}\n                onChange={e => this.setState({\n                    open: true,\n                    selected: e.value\n                })}\n                width={this.state.width}\n                onResize={e => this.setState({\n                    width: e.value\n                })}>\n                <SidebarList>\n                    <SidebarItem name=\"projects\">1</SidebarItem>\n                    <SidebarItem name=\"search\">2</SidebarItem>\n                    <SidebarItem name=\"team\">3</SidebarItem>\n                    <SidebarItem name=\"chat\">4</SidebarItem>\n                </SidebarList>\n                <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                                            consectetur adipiscing elit.\n                                            Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                                            hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"search\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                                            consectetur adipiscing elit.\n                                            Quisque consequat ut augue a ultricies. Praesent dapibus mi ut nulla laoreet, at\n                                            hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"team\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Team</p>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"chat\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Chat</p>\n                    </div>\n                </SidebarPanel>\n            </SidebarToggle>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/SidebarToggle/examples/3_SidebarToggle_usage.js","requirePath":"../src/components/SidebarToggle/examples/3_SidebarToggle_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { SidebarToggle } from '../../';\nimport SidebarList from '../../SidebarList';\nimport SidebarItem from '../../SidebarItem';\nimport SidebarPanel from '../../SidebarPanel';\nimport Button from '../../Button';\n\n/**\n * @component ../../SidebarToggle\n */\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      selected: '',\n      width: 300,\n      panelToggle: true,\n    };\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'relative', height: '300px', display: 'flex' }}>\n        <SidebarToggle\n          isOpen={this.state.open}\n          onToggle={e => this.setState({ open: e.value })}\n          selected={this.state.selected}\n          onChange={e => this.setState({ open: true, selected: e.value })}\n          width={this.state.width}\n          onResize={e => this.setState({ width: e.value })}\n        >\n          <SidebarList>\n            { this.state.panelToggle ?\n              <SidebarItem name=\"projects\">1</SidebarItem> : null }\n            <SidebarItem name=\"search\">2</SidebarItem>\n            <SidebarItem name=\"team\">3</SidebarItem>\n            <SidebarItem name=\"chat\">4</SidebarItem>\n          </SidebarList>\n          {\n            this.state.panelToggle ?\n              <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n                <div style={{ padding: '20px' }}>\n                  <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                    consectetur adipiscing elit.\n                    Quisque consequat ut augue a ultricies.\n                    Praesent dapibus mi ut nulla laoreet, at\n                    hendrerit lectus dignissim.\n                  </p>\n                  <Button>Button</Button>\n                  <Button>Button</Button>\n                </div>\n              </SidebarPanel>\n            : null\n          }\n          <SidebarPanel name=\"search\">\n            <div style={{ padding: '20px' }}>\n              <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                consectetur adipiscing elit.\n                Quisque consequat ut augue a ultricies.\n                Praesent dapibus mi ut nulla laoreet, at\n                hendrerit lectus dignissim.\n              </p>\n              <Button>Button</Button>\n              <Button>Button</Button>\n              <Button>Button</Button>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"team\">\n            <div style={{ padding: '20px' }}>\n              <p>Team</p>\n            </div>\n          </SidebarPanel>\n          <SidebarPanel name=\"chat\">\n            <div style={{ padding: '20px' }}>\n              <p>Chat</p>\n            </div>\n          </SidebarPanel>\n        </SidebarToggle>\n        <div style={{ padding: '20px' }}>\n          <Button onClick={() => this.setState({ panelToggle: !this.state.panelToggle })}>\n            Toggle projects panel\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                position: \"relative\",\n                height: \"300px\",\n                display: \"flex\"\n            }}>\n            <SidebarToggle\n                isOpen={this.state.open}\n                onToggle={e => this.setState({\n                    open: e.value\n                })}\n                selected={this.state.selected}\n                onChange={e => this.setState({\n                    open: true,\n                    selected: e.value\n                })}\n                width={this.state.width}\n                onResize={e => this.setState({\n                    width: e.value\n                })}>\n                <SidebarList>\n                    {(this.state.panelToggle ? <SidebarItem name=\"projects\">1</SidebarItem> : null)}\n                    <SidebarItem name=\"search\">2</SidebarItem>\n                    <SidebarItem name=\"team\">3</SidebarItem>\n                    <SidebarItem name=\"chat\">4</SidebarItem>\n                </SidebarList>\n                {(this.state.panelToggle ? <SidebarPanel name=\"projects\" initialWidth={500} minWidth={150} maxWidth={700}>\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is the content of a panel. Lorem ipsum dolor sit amet,\n                                                consectetur adipiscing elit.\n                                                Quisque consequat ut augue a ultricies.\n                                                Praesent dapibus mi ut nulla laoreet, at\n                                                hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel> : null)}\n                <SidebarPanel name=\"search\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>This is wider content of a panel. Lorem ipsum dolor sit amet,\n                                            consectetur adipiscing elit.\n                                            Quisque consequat ut augue a ultricies.\n                                            Praesent dapibus mi ut nulla laoreet, at\n                                            hendrerit lectus dignissim.</p>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                        <Button>Button</Button>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"team\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Team</p>\n                    </div>\n                </SidebarPanel>\n                <SidebarPanel name=\"chat\">\n                    <div\n                        style={{\n                            padding: \"20px\"\n                        }}>\n                        <p>Chat</p>\n                    </div>\n                </SidebarPanel>\n            </SidebarToggle>\n            <div\n                style={{\n                    padding: \"20px\"\n                }}>\n                <Button\n                    onClick={() => this.setState({\n                        panelToggle: !this.state.panelToggle\n                    })}>Toggle projects panel</Button>\n            </div>\n        </div>\n    );\n}"}]},{"name":"Spinner","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Spinner/Spinner","source":"/* @flow */\nimport React       from 'react';                  // eslint-disable-line\nimport classNames  from 'classnames';             // eslint-disable-line\n\ntype SizeT = 's' | 'm' | 'l';\n\ntype Props = {\n  /** className applied to spinner */\n  className?: string,\n  /** Size of Spinner */\n  size: SizeT,\n  /** style applied to spinner wrapper */\n  testId?: string,\n  /** theme object for spinner */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  size: SizeT,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  size: 'm',\n  theme: {},\n};\n\n/**\n * This component is used to display wait states\n */\nexport default class Spinner extends React.Component {\n  props: Props;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Spinner';\n\n  render() {\n    const { size, className, testId, theme } = this.props;\n    const classes = classNames(\n      theme.spinner, /* themeCSSlocalized styles */\n      className,        /* user specified classNames */\n      theme[`${size}`]\n    );\n\n    const spinnerRender = (\n      <div className={classes} data-test-id={testId} data-anypoint-component={Spinner.displayName}>\n        <div className={theme.before} />\n        <div className={theme.after} />\n      </div>\n    );\n\n    return spinnerRender;\n  }\n}\n","description":"This component is used to display wait states","displayName":"Spinner","methods":[],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to spinner"},"size":{"flowType":{"name":"union","raw":"'s' | 'm' | 'l'","elements":[{"name":"literal","value":"'s'"},{"name":"literal","value":"'m'"},{"name":"literal","value":"'l'"}]},"required":true,"description":"Size of Spinner","defaultValue":{"value":"'m'","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"style applied to spinner wrapper"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for spinner","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Spinner/examples/1_Spinner_Usage.js","requirePath":"../src/components/Spinner/examples/1_Spinner_Usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Spinner } from '../../Spinner';\n\n/**\n * @component ../../Spinner\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <Spinner />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Spinner />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Spinner/examples/2_Spinner_Examples.js","requirePath":"../src/components/Spinner/examples/2_Spinner_Examples.js","description":"","source":"import React, { Component } from 'react';\nimport { Spinner } from '../../Spinner';\n\n/**\n * @component ../../Spinner\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <div>\n        <h4>Large Spinner</h4>\n        <Spinner size=\"l\" />\n        <h4>Medium Spinner</h4>\n        <Spinner size=\"m\" />\n        <h4>Small Spinner</h4>\n        <Spinner size=\"s\" />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h4>Large Spinner</h4>\n            <Spinner size=\"l\" />\n            <h4>Medium Spinner</h4>\n            <Spinner size=\"m\" />\n            <h4>Small Spinner</h4>\n            <Spinner size=\"s\" />\n        </div>\n    );\n}"}]},{"name":"Table","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Table/Table","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport EmptyResult from '../EmptyResult';\n\ntype HeaderT = {\n  key: string,\n  label: any,\n};\n\ntype RowT = {\n  [key: string]: any,\n};\n\ntype Props = {\n  /** header applied to Table component */\n  headers: HeaderT[],\n  /** rows applied to Table component */\n  rows: RowT[],\n  /** empty message applied to Table component */\n  emptyMessage?: string,\n  /** class applied to Table component */\n  className: string,\n  /** id applied to Table component */\n  testId: any,\n  /** theme object for List */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  headers: any[],\n  rows: any[],\n  theme: ThemeT\n};\n\nconst defaultProps = {\n  headers: [],\n  rows: [],\n  theme: {},\n};\n\nexport default class Table extends Component {\n  props: Props;\n\n  static displayName = 'Table';\n  static defaultProps: DefaultProps = defaultProps;\n  renderHeadersRow() {\n    const { testId, headers, theme } = this.props;\n    return (\n      headers.map(header =>\n        <th key={header.key} data-test-id={testId && `${testId}-header-th`} className={theme.cellHeader}>\n          {header.label}\n        </th>\n      )\n    );\n  }\n\n  renderBody() {\n    const { testId, headers, rows, theme } = this.props;\n    return (\n      rows.map((row, rowIndex) =>\n        <tr key={`row-${rowIndex}-${testId}`} data-test-id={testId && `${testId}-body-row`} className={theme.rowBody}>\n          {headers.map(header =>\n            <td\n              key={`row-${rowIndex}-${header.key}`}\n              data-test-id={testId && `${testId}-body-td`}\n              className={theme.cellBody}\n            >\n              {row[header.key]}\n            </td>\n          )}\n        </tr>\n      )\n    );\n  }\n\n  renderTable() {\n    const { testId, theme } = this.props;\n\n    return (\n      <table className={classNames(theme.table)} data-test-id={testId && `${testId}-table`}>\n        <thead>\n          <tr data-test-id={testId && `${testId}-header-row`} className={theme.rowHeader}>\n            {this.renderHeadersRow()}\n          </tr>\n        </thead>\n        <tbody>\n          {this.renderBody()}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    const { rows, emptyMessage, className, theme, testId } = this.props;\n\n    return (\n      <div\n        className={classNames(theme.tableWrap, className)}\n        data-test-id={testId}\n        data-anypoint-component={Table.displayName}\n      >\n        {\n          rows.length === 0 ?\n            (<EmptyResult message={emptyMessage} />) : this.renderTable()\n        }\n      </div>\n    );\n  }\n}\n","description":"","displayName":"Table","methods":[{"name":"renderHeadersRow","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderBody","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTable","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"headers":{"flowType":{"name":"unknown"},"required":true,"description":"header applied to Table component","defaultValue":{"value":"[]","computed":false}},"rows":{"flowType":{"name":"unknown"},"required":true,"description":"rows applied to Table component","defaultValue":{"value":"[]","computed":false}},"emptyMessage":{"flowType":{"name":"string"},"required":false,"description":"empty message applied to Table component"},"className":{"flowType":{"name":"string"},"required":true,"description":"class applied to Table component"},"testId":{"flowType":{"name":"any"},"required":true,"description":"id applied to Table component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for List","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Table/examples/1_Table_usage.js","requirePath":"../src/components/Table/examples/1_Table_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Table } from '../../';\n\n/**\n * @component ../../Table\n */\n\n/* eslint\n  class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getHeaders\", \"getRows\"] }]\n*/\nexport default class TableExample1 extends Component {\n\n  getHeaders() {\n    return [\n      { key: 'title', label: 'Title' },\n      { key: 'description', label: 'Description' },\n    ];\n  }\n\n  getRows() {\n    const count = 10;\n    const result = [];\n    for (let i = 0; i < count; i += 1) {\n      result.push({ title: `Title ${i}`, description: `Description ${i}` });\n    }\n    return result;\n  }\n\n  render() {\n    return (\n      <Table headers={this.getHeaders()} rows={this.getRows()} />\n    );\n  }\n}\n","renderSource":"render() {\n    return <Table headers={this.getHeaders()} rows={this.getRows()} />;\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Table/examples/2_Table_usage.js","requirePath":"../src/components/Table/examples/2_Table_usage.js","description":"<p>Here is an example with empty rows</p>","source":"import React, { Component } from 'react';\nimport { Table } from '../../';\n\n/**\n * Here is an example with empty rows\n * @component ../../Table\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getHeaders\"] }]*/\nexport default class TableExample1 extends Component {\n\n  getHeaders() {\n    return [\n      { key: 'title', label: 'Title' },\n      { key: 'description', label: 'Description' },\n    ];\n  }\n\n  render() {\n    return (\n      <Table headers={this.getHeaders()} emptyMessage=\"No data\" />\n    );\n  }\n}\n","renderSource":"render() {\n    return <Table headers={this.getHeaders()} emptyMessage=\"No data\" />;\n}"}]},{"name":"Tabs","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tabs/Tabs","source":"/* @flow */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport isTabNode from './utils/determineIsTab'; // eslint-disable-line\nimport isTabDisabled from './utils/determineIsDesabledTab'; // eslint-disable-line\n\ntype TypeT = 'primary' | 'secondary';\ntype SizeT = 'default' | 'small';\ntype AlignT = 'top' | 'left';\n\ntype Props = {\n  /** className applied to Tabs component */\n  className?: string,\n  /** id applied to Tabs component */\n  testId?: string,\n  /** Set the currently selected Tab */\n  selectedIndex: number,\n  /** Fire custom event on Tab selection */\n  onChange?: () => void,\n  /** Render the Tabs at the primary or secondary type */\n  type: TypeT,\n  /** Sets the size of Tabs to use */\n  size: SizeT,\n  /** Render the Tabs at the top or left */\n  align: AlignT,\n  /** Default true, If false, tabs will not stretch the full width of their parent container */\n  stretch: boolean,\n  /**  Default false, If true Tabs don't not use Tabpanel*/\n  excludePanels: boolean,\n  /** children of tabs component are <pre>Tablist Tab Tabpanel</pre> */\n  children: any,\n  /** theme object for Tabs */\n  theme: ThemeT,\n};\n\ntype State = {\n  type: TypeT,\n  selectedIndex: number,\n  stretch: boolean,\n  excludePanels: boolean,\n  align: AlignT,\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  type: TypeT,\n  selectedIndex: number,\n  stretch: boolean,\n  excludePanels: boolean,\n  align: AlignT,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  type: 'primary',\n  selectedIndex: 0,\n  stretch: true,\n  excludePanels: false,\n  align: 'top',\n  theme: {},\n};\n\ntype Context = {\n  registerBar: () => void,\n  registerTabList: () => void\n};\n\ntype DefaultContext = {\n  registerBar: () => void,\n  registerTabList: () => void\n}\n\nconst defaultContext = {\n  registerBar: () => {},\n  registerTabList: () => {}\n};\n\n/**\n * Describe the purpose of Tabs here\n */\nexport default class Tabs extends React.Component {\n  props: Props;\n  contexts: Context;\n  state: State;\n\n  barNode: any;\n  tablistNode: any;\n  handleClick: () => void;\n  registerBar: () => void;\n  registerTabList: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static childContextTypes: DefaultContext = defaultContext;\n  static displayName = 'Tabs';\n\n  constructor(props: Props) {\n    super(props);\n    this.state = props;\n    this.barNode = null;\n    this.tablistNode = null;\n    this.handleClick = this.handleClick.bind(this);\n    this.registerBar = this.registerBar.bind(this);\n    this.registerTabList = this.registerTabList.bind(this);\n  }\n\n  getChildContext() {\n    const { registerBar, registerTabList } = this;\n    return { registerBar, registerTabList };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.state.selectedIndex !== nextProps.selectedIndex) {\n      this.setState({\n        selectedIndex: nextProps.selectedIndex,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.moveTabBar();\n  }\n\n  setSelected(index: number, eventObject: any) {\n    // Don't do anything if nothing has changed\n    if (index === this.state.selectedIndex) return;\n\n    // Keep reference to last index for event handler\n    const last = this.state.selectedIndex;\n\n    // Update selected index\n    this.setState({ selectedIndex: index });\n    // Call change event handler\n    if (typeof this.props.onChange === 'function' && (last !== index)) {\n      this.props.onChange({ value: index, event: eventObject, prevValue: last });\n    }\n  }\n  getTab(index: number) {\n    return this.tablistNode.childNodes[index];\n  }\n\n  getChildren() {\n    let index = 0;\n    let count = 0;\n    const { children, align } = this.props;\n    const mustIgnoreStretch = align === 'left';\n    const state = this.state;\n\n    // Map children to dynamically setup refs\n    const DynamicallySetupRefs = (child) => { // eslint-disable-line\n      return React.cloneElement(child, {\n        ref: 'tablist',\n        children: React.Children.map(child.props.children, (tab) => {\n          if (tab) {\n            const ref = `tabs-${index}`;\n            const selected = state.selectedIndex === index;\n            const localIndex = index;\n            index += 1;\n\n            return React.cloneElement(tab, {\n              ref,\n              selected,\n              count: child.props.children.length,\n              size: this.props.size,\n              stretch: !mustIgnoreStretch && this.props.stretch,\n              onMouseOver: e => tab.props.onMouseOver &&\n              tab.props.onMouseOver({ event: e, value: localIndex }),\n            });\n          }\n          return tab;\n        }),\n      });\n    };\n\n    // Traversal of components\n    const traversalOfComponents = (child, firstStep) => { // eslint-disable-line\n      return React.cloneElement(child, {\n        children: React.Children.map(firstStep ? child : child.props.children, (subChild) => {  // eslint-disable-line\n          if (subChild.type && subChild.type.displayName === 'TabList') {\n            return DynamicallySetupRefs(subChild);\n          }\n          if (subChild && subChild.props && subChild.props.children) {\n            return traversalOfComponents(subChild, false);\n          }\n        })\n      });\n    };\n\n    // Map children to dynamically setup refs\n    return React.Children.map(children, (child) => {\n      if (child) {\n        let result = null;\n\n        // Clone TabList and Tab components to have refs\n        if (count === 0) {\n          count += 1;\n          // TODO try setting the uuid in the 'constructor' for `Tab`/`TabPanel`\n          if (child.type.displayName === 'TabList') {\n            result = DynamicallySetupRefs(child);\n          } else {\n            result = traversalOfComponents(child, true);\n          }\n          // Reset index for panels\n          index = 0;\n        } else {\n          // Clone TabPanel components to have refs\n          const ref = `panels-${index}`;\n          const selected = state.selectedIndex === index;\n\n          index += 1;\n\n          result = React.cloneElement(child, {\n            ref,\n            selected,\n          });\n        }\n        return result;\n      }\n      return child;\n    });\n  }\n\n  registerBar(node: any) {\n    const { theme } = this.props;\n\n    this.barNode = node;\n    if (this.barNode) this.barNode.className = theme.bar;\n  }\n\n  registerTabList(node: any) {\n    this.tablistNode = node;\n    this.moveTabBar();\n  }\n\n  /* move tab active bar to active tab */\n  moveTabBar() {\n    if (!this.barNode) return;\n\n    if (this.props.align === 'top') {\n      this.moveTabBarTop();\n    } else {\n      this.moveTabBarLeft();\n    }\n  }\n\n  moveTabBarTop() {\n    const { size } = this.props;\n    const { selectedIndex } = this.state;\n    const bar = this.barNode;\n\n    bar.style.transition = '0.15s ease-in-out';\n\n    const tab = ReactDOM.findDOMNode(this.getTab(selectedIndex));  // eslint-disable-line\n\n    const tabLeft = ((tab.offsetLeft - tab.scrollLeft) + tab.clientLeft);\n\n    bar.style.display = 'block';\n    bar.style.left = `${tabLeft}px`;\n    bar.style.width = `${tab.offsetWidth}px`;\n\n    if (size === 'small') {\n      /* if small apply different styles  */\n      bar.style.left = `${tabLeft + 1}px`;\n      bar.style.width = `${tab.offsetWidth - 2}px`;\n    }\n\n    bar.style.top = `${this.tablistNode.offsetHeight + 3}px`;\n    return false;\n  }\n\n  moveTabBarLeft() {\n    const { size } = this.props;\n    const { selectedIndex } = this.state;\n    const bar = this.barNode;\n\n    bar.style.transition = '0.15s ease-in-out';\n\n    const tab = ReactDOM.findDOMNode(this.getTab(selectedIndex));   // eslint-disable-line\n\n    const tabTop = ((tab.offsetTop - tab.scrollTop) + tab.clientTop);\n\n    bar.style.display = 'block';\n    bar.style.top = `${tabTop}px`;\n    bar.style.height = `${tab.offsetHeight}px`;\n    bar.style.left = 0;\n\n    if (size === 'small') {\n      /* if small apply different styles  */\n      bar.style.top = `${tabTop + 5}px`;\n      bar.style.height = `${tab.offsetHeight - 2}px`;\n      return false;\n    }\n    return false;\n  }\n\n\n  handleClick(e: any) {\n    let node = e.target;\n    do {\n      if (isTabNode(node)) {\n        if (isTabDisabled(node)) {\n          break;\n        }\n        const index = [].slice.call(node.parentNode.children).indexOf(node);\n        this.setSelected(index, e);\n        break;\n      }\n      node = node.parentNode;\n    } while (node !== null);\n    return false;\n  }\n\n  render() {\n    const {\n      className,\n      theme,\n      testId,\n      type,\n      size,\n      align,\n      ...props\n      } = this.props;\n\n    if (this.barNode) {\n      this.barNode.className = theme.bar;\n    }\n\n    // removing these props since they are no valid as div html attributes\n    delete props.stretch;\n    delete props.selectedIndex;\n    delete props.excludePanels;\n\n    const verticalClass = (align !== 'top') ? 'vertical' : '';\n\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n    return (\n      <div\n        className={classNames(className,\n        theme.tabs,\n        theme[type],\n        theme[size],\n        theme[verticalClass]\n        )}\n        data-test-id={testId}\n        data-anypoint-component={Tabs.displayName}\n        onClick={this.handleClick}\n        {...props}\n      >\n        {this.getChildren()}\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Tabs here","displayName":"Tabs","methods":[{"name":"setSelected","docblock":null,"modifiers":[],"params":[{"name":"index","type":{"name":"number"}},{"name":"eventObject","type":{"name":"any"}}],"returns":null},{"name":"getTab","docblock":null,"modifiers":[],"params":[{"name":"index","type":{"name":"number"}}],"returns":null},{"name":"getChildren","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"registerBar","docblock":null,"modifiers":[],"params":[{"name":"node","type":{"name":"any"}}],"returns":null},{"name":"registerTabList","docblock":null,"modifiers":[],"params":[{"name":"node","type":{"name":"any"}}],"returns":null},{"name":"moveTabBar","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"moveTabBarTop","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"moveTabBarLeft","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleClick","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Tabs component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Tabs component"},"selectedIndex":{"flowType":{"name":"number"},"required":true,"description":"Set the currently selected Tab","defaultValue":{"value":"0","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Fire custom event on Tab selection"},"type":{"flowType":{"name":"union","raw":"'primary' | 'secondary'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'secondary'"}]},"required":true,"description":"Render the Tabs at the primary or secondary type","defaultValue":{"value":"'primary'","computed":false}},"size":{"flowType":{"name":"union","raw":"'default' | 'small'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'small'"}]},"required":true,"description":"Sets the size of Tabs to use"},"align":{"flowType":{"name":"union","raw":"'top' | 'left'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'left'"}]},"required":true,"description":"Render the Tabs at the top or left","defaultValue":{"value":"'top'","computed":false}},"stretch":{"flowType":{"name":"boolean"},"required":true,"description":"Default true, If false, tabs will not stretch the full width of their parent container","defaultValue":{"value":"true","computed":false}},"excludePanels":{"flowType":{"name":"boolean"},"required":true,"description":"Default false, If true Tabs don't not use Tabpanel","defaultValue":{"value":"false","computed":false}},"children":{"flowType":{"name":"any"},"required":true,"description":"children of tabs component are <pre>Tablist Tab Tabpanel</pre>"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Tabs","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tabs/examples/1_Tabs_usage.js","requirePath":"../src/components/Tabs/examples/1_Tabs_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Tabs } from '../../';\nimport TabList from '../../TabList';\nimport Tab from '../../Tab';\nimport TabPanel from '../../TabPanel';\nimport { Select } from '../../Select';\n\n/**\n *  @component ../../Tabs\n */\n\nconst options = [\n  { value: 1, label: 'Option 1' },\n  { value: 2, label: 'Option 2' }\n];\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"handleSelect\"] }] */\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.state = { value: 1 };\n  }\n\n  handleSelect(e) {\n    console.log('value', e.value);\n    console.log('event', e.event);\n    console.log('prevValue', e.prevValue);\n  }\n\n  render() {\n    return (\n      <div>\n        <Tabs onChange={this.handleSelect}>\n          <TabList>\n            <Tab>Tab 1</Tab>\n            <Tab>Tab 2</Tab>\n            <Tab>Tab 3</Tab>\n          </TabList>\n          <TabPanel>\n            <Select\n              value={this.state.value}\n              onChange={e => this.setState(e)}\n              options={options}\n            />\n          </TabPanel>\n          <TabPanel>Tab 2 Content</TabPanel>\n          <TabPanel>Tab 3 Content</TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Tabs onChange={this.handleSelect}>\n                <TabList>\n                    <Tab>Tab 1</Tab>\n                    <Tab>Tab 2</Tab>\n                    <Tab>Tab 3</Tab>\n                </TabList>\n                <TabPanel>\n                    <Select\n                        value={this.state.value}\n                        onChange={e => this.setState(e)}\n                        options={options} />\n                </TabPanel>\n                <TabPanel>Tab 2 Content</TabPanel>\n                <TabPanel>Tab 3 Content</TabPanel>\n            </Tabs>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tabs/examples/2_Tabs_usage.js","requirePath":"../src/components/Tabs/examples/2_Tabs_usage.js","description":"","source":"import React from 'react';\nimport { Tabs } from '../../';\nimport TabList from '../../TabList';\nimport Tab from '../../Tab';\nimport TabPanel from '../../TabPanel';\n\n /**\n * @component ../../Tabs\n */\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.customTabEvent = this.customTabEvent.bind(this);\n  }\n  customTabEvent(e) {\n    console.log('tab select triggered');\n    const text = `Custom event triggered: ${e.event.target.innerHTML}`;\n    this.text.innerHTML = text;\n  }\n  render() {\n    const paddingStyle = { padding: '30px 0' };\n    return (\n      <div>\n        <div style={paddingStyle}>\n          <h3>Primary Tabs</h3>\n          <Tabs type=\"primary\" >\n            <TabList>\n              <Tab>Sign in</Tab>\n              <Tab>Register</Tab>\n            </TabList>\n\n            <TabPanel>Tab Content 1</TabPanel>\n            <TabPanel>Tab Content 2</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Secondary Tabs with second tab by default</h3>\n          <Tabs selectedIndex={1} type=\"secondary\" >\n            <TabList>\n              <Tab>Sign in</Tab>\n              <Tab>Register</Tab>\n            </TabList>\n\n            <TabPanel><h2>Sign in</h2></TabPanel>\n            <TabPanel><h2>Register</h2></TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Small Tabs</h3>\n          <Tabs selectedIndex={0} type=\"secondary\" size=\"small\">\n            <TabList>\n              <Tab>1h</Tab>\n              <Tab>3h</Tab>\n              <Tab>1d</Tab>\n            </TabList>\n\n            <TabPanel>values 1</TabPanel>\n            <TabPanel>values 2</TabPanel>\n            <TabPanel>values 3</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Primary Tabs (Left) with second tab by default</h3>\n          <Tabs selectedIndex={1} type=\"primary\" align=\"left\">\n            <TabList style={{ width: 150 }}>\n              <Tab>Sign in</Tab>\n              <Tab>Register</Tab>\n            </TabList>\n\n            <TabPanel>Tab Content 1</TabPanel>\n            <TabPanel>Tab Content 2</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Secondary Tabs (Left) </h3>\n          <Tabs type=\"secondary\" align=\"left\">\n            <TabList>\n              <Tab>Sign in</Tab>\n              <Tab>Register</Tab>\n            </TabList>\n\n            <TabPanel>\n              <h2>Sign in</h2>\n            </TabPanel>\n            <TabPanel>\n              <h2>Register</h2>\n            </TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Small Tabs (Left) </h3>\n          <Tabs type=\"secondary\" size=\"small\" align=\"left\">\n            <TabList>\n              <Tab>1h</Tab>\n              <Tab>3h</Tab>\n              <Tab>1d</Tab>\n            </TabList>\n\n            <TabPanel>values 1</TabPanel>\n            <TabPanel>values 2</TabPanel>\n            <TabPanel>values 3</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Tabs with stretch param = false</h3>\n          <Tabs stretch={false}>\n            <TabList>\n              <Tab>Tab1</Tab>\n              <Tab>Tab2</Tab>\n              <Tab>Tab3</Tab>\n            </TabList>\n\n            <TabPanel>values 1</TabPanel>\n            <TabPanel>values 2</TabPanel>\n            <TabPanel>values 3</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Tabs with disabled second tab</h3>\n          <Tabs>\n            <TabList>\n              <Tab>Tab1</Tab>\n              <Tab disabled>Tab2</Tab>\n              <Tab>Tab3</Tab>\n            </TabList>\n\n            <TabPanel>values 1</TabPanel>\n            <TabPanel>values 2</TabPanel>\n            <TabPanel>values 3</TabPanel>\n          </Tabs>\n        </div>\n\n        <div style={paddingStyle}>\n          <h3>Custom event handlers + Exclude Panels</h3>\n          <Tabs onChange={this.customTabEvent} excludePanels>\n            <TabList>\n              <Tab>on Click</Tab>\n              <Tab onMouseOver={this.customTabEvent}>\n                on MouseOver\n              </Tab>\n              <Tab>on Select</Tab>\n            </TabList>\n          </Tabs>\n\n        </div>\n        <div ref={(node) => { this.text = node; }}>Custom component here</div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const paddingStyle = {\n        padding: \"30px 0\"\n    };\n\n    return (\n        <div>\n            <div style={paddingStyle}>\n                <h3>Primary Tabs</h3>\n                <Tabs type=\"primary\">\n                    <TabList>\n                        <Tab>Sign in</Tab>\n                        <Tab>Register</Tab>\n                    </TabList>\n                    <TabPanel>Tab Content 1</TabPanel>\n                    <TabPanel>Tab Content 2</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Secondary Tabs with second tab by default</h3>\n                <Tabs selectedIndex={1} type=\"secondary\">\n                    <TabList>\n                        <Tab>Sign in</Tab>\n                        <Tab>Register</Tab>\n                    </TabList>\n                    <TabPanel><h2>Sign in</h2></TabPanel>\n                    <TabPanel><h2>Register</h2></TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Small Tabs</h3>\n                <Tabs selectedIndex={0} type=\"secondary\" size=\"small\">\n                    <TabList>\n                        <Tab>1h</Tab>\n                        <Tab>3h</Tab>\n                        <Tab>1d</Tab>\n                    </TabList>\n                    <TabPanel>values 1</TabPanel>\n                    <TabPanel>values 2</TabPanel>\n                    <TabPanel>values 3</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Primary Tabs (Left) with second tab by default</h3>\n                <Tabs selectedIndex={1} type=\"primary\" align=\"left\">\n                    <TabList\n                        style={{\n                            width: 150\n                        }}>\n                        <Tab>Sign in</Tab>\n                        <Tab>Register</Tab>\n                    </TabList>\n                    <TabPanel>Tab Content 1</TabPanel>\n                    <TabPanel>Tab Content 2</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Secondary Tabs (Left)</h3>\n                <Tabs type=\"secondary\" align=\"left\">\n                    <TabList>\n                        <Tab>Sign in</Tab>\n                        <Tab>Register</Tab>\n                    </TabList>\n                    <TabPanel>\n                        <h2>Sign in</h2>\n                    </TabPanel>\n                    <TabPanel>\n                        <h2>Register</h2>\n                    </TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Small Tabs (Left)</h3>\n                <Tabs type=\"secondary\" size=\"small\" align=\"left\">\n                    <TabList>\n                        <Tab>1h</Tab>\n                        <Tab>3h</Tab>\n                        <Tab>1d</Tab>\n                    </TabList>\n                    <TabPanel>values 1</TabPanel>\n                    <TabPanel>values 2</TabPanel>\n                    <TabPanel>values 3</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Tabs with stretch param = false</h3>\n                <Tabs stretch={false}>\n                    <TabList>\n                        <Tab>Tab1</Tab>\n                        <Tab>Tab2</Tab>\n                        <Tab>Tab3</Tab>\n                    </TabList>\n                    <TabPanel>values 1</TabPanel>\n                    <TabPanel>values 2</TabPanel>\n                    <TabPanel>values 3</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Tabs with disabled second tab</h3>\n                <Tabs>\n                    <TabList>\n                        <Tab>Tab1</Tab>\n                        <Tab disabled>Tab2</Tab>\n                        <Tab>Tab3</Tab>\n                    </TabList>\n                    <TabPanel>values 1</TabPanel>\n                    <TabPanel>values 2</TabPanel>\n                    <TabPanel>values 3</TabPanel>\n                </Tabs>\n            </div>\n            <div style={paddingStyle}>\n                <h3>Custom event handlers + Exclude Panels</h3>\n                <Tabs onChange={this.customTabEvent} excludePanels>\n                    <TabList>\n                        <Tab>on Click</Tab>\n                        <Tab onMouseOver={this.customTabEvent}>on MouseOver</Tab>\n                        <Tab>on Select</Tab>\n                    </TabList>\n                </Tabs>\n            </div>\n            <div\n                ref={node => {\n                    this.text = node;\n                }}>Custom component here</div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tabs/examples/3_Tabs_usage.js","requirePath":"../src/components/Tabs/examples/3_Tabs_usage.js","description":"<p>/**</p>","source":"import React from 'react';\nimport { Tabs } from '../../';\nimport TabList from '../../TabList';\nimport Tab from '../../Tab';\nimport TabPanel from '../../TabPanel';\n\n/**\n\n /**\n * @component ../../Tabs\n */\n\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: 0 };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ value }) {\n    this.setState({ selected: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <Tabs\n          selectedIndex={this.state.selected}\n          onChange={this.handleChange}\n        >\n          <TabList>\n            <Tab>Click</Tab>\n            <Tab onMouseOver={this.handleChange}>MouseOver</Tab>\n            <Tab>Click</Tab>\n          </TabList>\n          <TabPanel>Tab 1 Content</TabPanel>\n          <TabPanel>Tab 2 Content</TabPanel>\n          <TabPanel>Tab 3 Content</TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Tabs selectedIndex={this.state.selected} onChange={this.handleChange}>\n                <TabList>\n                    <Tab>Click</Tab>\n                    <Tab onMouseOver={this.handleChange}>MouseOver</Tab>\n                    <Tab>Click</Tab>\n                </TabList>\n                <TabPanel>Tab 1 Content</TabPanel>\n                <TabPanel>Tab 2 Content</TabPanel>\n                <TabPanel>Tab 3 Content</TabPanel>\n            </Tabs>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tabs/examples/4_Tabs_usage.js","requirePath":"../src/components/Tabs/examples/4_Tabs_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { Tabs } from '../../';\nimport TabList from '../../TabList';\nimport Tab from '../../Tab';\nimport TabPanel from '../../TabPanel';\nimport Button from '../../Button';\n\n/**\n *  @component ../../Tabs\n */\n\nconst margin = { marginTop: 50 };\n\nexport default class YourApp extends Component {\n  constructor(props) {\n    super(props);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.state = { hide: false };\n  }\n\n  handleToggle() {\n    this.setState({ hide: !this.state.hide });\n  }\n\n  render() {\n    return (\n      <div>\n        <Tabs onChange={this.handleSelect}>\n          <TabList>\n            {this.state.hide ? null : <Tab>Tab 1</Tab>}\n            <Tab>Tab 2</Tab>\n            <Tab>Tab 3</Tab>\n          </TabList>\n          {this.state.hide ? null : <TabPanel>Tab 1 Content</TabPanel>}\n          <TabPanel>Tab 2 Content</TabPanel>\n          <TabPanel>Tab 3 Content</TabPanel>\n        </Tabs>\n        <Button style={margin} onClick={this.handleToggle}>\n          {this.state.hide ? 'Show' : 'Hide'} Tab 1\n        </Button>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Tabs onChange={this.handleSelect}>\n                <TabList>\n                    {(this.state.hide ? null : <Tab>Tab 1</Tab>)}\n                    <Tab>Tab 2</Tab>\n                    <Tab>Tab 3</Tab>\n                </TabList>\n                {(this.state.hide ? null : <TabPanel>Tab 1 Content</TabPanel>)}\n                <TabPanel>Tab 2 Content</TabPanel>\n                <TabPanel>Tab 3 Content</TabPanel>\n            </Tabs>\n            <Button style={margin} onClick={this.handleToggle}>\n                {(this.state.hide ? \"Show\" : \"Hide\")}Tab 1</Button>\n        </div>\n    );\n}"}]},{"name":"TextArea","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextArea/TextArea","source":"import React, { Component } from 'react';\nimport classNames from 'classnames';\n\n/**\n * The TextArea is used for multi-line text value\n */\n\ntype AutocompleteT = 'on' | 'off';\n\ntype Props = {\n  /** Placeholder text inside the input */\n  placeholder?: string,\n  /** if true, input will be disabled */\n  disabled?: boolean,\n  /** if true, input will be required before form submission */\n  required?: boolean,\n  /** Set the text value of the textfield */\n  value?: string | number,\n  /** if true, the value is valid */\n  isValid?: boolean,\n  /** if true, the input has been touched by the user */\n  isDirty?: boolean,\n  /** if true, the input is focused */\n  isFocused?: boolean,\n  /** Autofocus attribute for input */\n  autoFocus?: boolean,\n  /** Callback for blur event on the textfield */\n  onBlur?: () => void,\n  /** Callback for value change event on the textfield */\n  onChange?: () => void,\n  /** Callback for focus event on the textfield */\n  onFocus?: () => void,\n  /** tab index of the control */\n  tabindex?: number | string,\n  /** Callback for keydown event on the textfield */\n  onKeyDown?: () => void,\n  /** className applied to TextArea */\n  className?: string,\n  /** Name attribute for textarea */\n  name?: string,\n  /** Autocomplete attribute for textarea */\n  autocomplete?: AutocompleteT,\n  /** style applied to TextArea */\n  style?: Object,\n  /** id applied to TextArea component */\n  testId?: string,\n  /** theme object for TextArea */\n  theme?: ThemeT,\n}\n\ntype State = {\n  autoFocusState: boolean\n};\n\ntype DefaultProps = {\n  disabled: boolean,\n  required: boolean,\n  autoFocus: boolean,\n  isDirty: boolean,\n  isValid: boolean,\n  onChange: () => void,\n  onKeyDown: () => void,\n  onFocus: () => void,\n  onBlur: () => void,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  disabled: false,\n  required: false,\n  autoFocus: false,\n  isDirty: false,\n  isValid: true,\n  onChange: () => {},\n  onKeyDown: () => {},\n  onFocus: () => {},\n  onBlur: () => {},\n  theme: {},\n};\n\nexport default class TextArea extends Component {\n\n  props: Props;\n  state: State;\n\n  handleKeyDown: any;\n  handleInputChange: () => void;\n  handleInputFocus: () => void;\n  handleInputBlur: () => void;\n  handleKeyDown: () => void;\n  static displayName = 'TextArea';\n  static defaultProps: DefaultProps = defaultProps;\n\n  /* istanbul ignore next */\n  constructor(props) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.state = { autoFocusState: this.props.autoFocus };\n  }\n\n  handleEvent(e, type) {\n    const { disabled } = this.props;\n    const handler = this.props[type];\n    if (disabled) {\n      return false;\n    }\n\n    return handler(e);\n  }\n\n  handleInputChange(e) {\n    const { disabled, onChange } = this.props;\n    if (disabled) {\n      return false;\n    }\n    const target = e.currentTarget;\n    return onChange({ value: target.value });\n  }\n\n  handleInputFocus(e) {\n    this.setState({\n      autoFocusState: true\n    });\n    return this.handleEvent(e, 'onFocus');\n  }\n\n  handleInputBlur(e) {\n    this.setState({\n      autoFocusState: false\n    });\n    return this.handleEvent(e, 'onBlur');\n  }\n\n  handleKeyDown(e) {\n    return this.handleEvent(e, 'onKeyDown');\n  }\n\n  render() {\n    const { placeholder, style, value, testId, className, tabindex, autocomplete, autoFocus,\n      disabled, theme, isValid, isDirty, isFocused, required, name } = this.props;\n\n    const tabIndexValue = tabindex || '';\n    let isFocusedStatus;\n    switch (isFocused) {\n      case true:\n        isFocusedStatus = isFocused;\n        break;\n      case false:\n        isFocusedStatus = isFocused;\n        break;\n      default:\n        isFocusedStatus = this.state.autoFocusState;\n    }\n\n    return (\n      <div\n        data-test-id={testId}\n        data-anypoint-component={TextArea.displayName}\n        className={classNames(\n          theme.textarea,\n          theme['input-base'],\n          disabled ? theme.disabled : '',\n          isDirty ? theme['is-dirty'] : '',\n          isValid ? theme['is-valid'] : '',\n          !isValid ? theme['has-error'] : '',\n          isFocusedStatus ? theme['is-focused'] : '',\n          className\n        )}\n      >\n        <textarea\n          className={theme['textarea-element']}\n          data-test-id={testId && `${testId}-textarea`}\n          style={style}\n          disabled={disabled}\n          value={value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          placeholder={placeholder}\n          required={required}\n          name={name}\n          tabIndex={tabIndexValue}\n          autoComplete={autocomplete}\n          autoFocus={autoFocus}\n        />\n      </div>\n    );\n  }\n}\n","description":"","displayName":"TextArea","methods":[{"name":"handleEvent","docblock":null,"modifiers":[],"params":[{"name":"e","type":null},{"name":"type","type":null}],"returns":null},{"name":"handleInputChange","docblock":null,"modifiers":[],"params":[{"name":"e","type":null}],"returns":null},{"name":"handleInputFocus","docblock":null,"modifiers":[],"params":[{"name":"e","type":null}],"returns":null},{"name":"handleInputBlur","docblock":null,"modifiers":[],"params":[{"name":"e","type":null}],"returns":null},{"name":"handleKeyDown","docblock":null,"modifiers":[],"params":[{"name":"e","type":null}],"returns":null}],"props":{"placeholder":{"flowType":{"name":"string"},"required":false,"description":"Placeholder text inside the input"},"disabled":{"flowType":{"name":"boolean"},"required":false,"description":"if true, input will be disabled","defaultValue":{"value":"false","computed":false}},"required":{"flowType":{"name":"boolean"},"required":false,"description":"if true, input will be required before form submission","defaultValue":{"value":"false","computed":false}},"value":{"flowType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Set the text value of the textfield"},"isValid":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the value is valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input has been touched by the user","defaultValue":{"value":"false","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input is focused"},"autoFocus":{"flowType":{"name":"boolean"},"required":false,"description":"Autofocus attribute for input","defaultValue":{"value":"false","computed":false}},"onBlur":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Callback for blur event on the textfield","defaultValue":{"value":"() => {}","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Callback for value change event on the textfield","defaultValue":{"value":"() => {}","computed":false}},"onFocus":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Callback for focus event on the textfield","defaultValue":{"value":"() => {}","computed":false}},"tabindex":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":false,"description":"tab index of the control"},"onKeyDown":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"Callback for keydown event on the textfield","defaultValue":{"value":"() => {}","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to TextArea"},"name":{"flowType":{"name":"string"},"required":false,"description":"Name attribute for textarea"},"autocomplete":{"flowType":{"name":"union","raw":"'on' | 'off'","elements":[{"name":"literal","value":"'on'"},{"name":"literal","value":"'off'"}]},"required":false,"description":"Autocomplete attribute for textarea"},"style":{"flowType":{"name":"Object"},"required":false,"description":"style applied to TextArea"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to TextArea component"},"theme":{"flowType":{"name":"ThemeT"},"required":false,"description":"theme object for TextArea","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextArea/examples/1_TextArea_Usage.js","requirePath":"../src/components/TextArea/examples/1_TextArea_Usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React, { Component } from 'react';\nimport TextArea from '../../TextArea/TextArea';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../TextArea\n */\n\n/* eslint\nclass-methods-use-this: [\"error\", { \"exceptMethods\": [\"onKeyDown\", \"onFocus\", \"onBlur\"] }]\n*/\nexport default class YourApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      isDirty: false,\n      isValid: true,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  onChange(e) {\n    console.log('onChange', e);\n    const newState = {\n      isDirty: true,\n      isValid: e.value.length <= 100,\n      value: e.value,\n    };\n    this.setState(newState);\n  }\n\n  onKeyDown() {\n    console.log('onKeyDown');\n  }\n\n  onFocus() {\n    console.log('onFocus');\n  }\n\n  onBlur() {\n    console.log('onBlur');\n  }\n\n  render() {\n    const { value, isValid, isDirty } = this.state;\n\n    return (\n      <div>\n        <TextArea\n          style={{ height: 100, width: '500px' }}\n          placeholder=\"Tell us about youself..\"\n          value={value}\n          isValid={isValid}\n          isDirty={isDirty}\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          tabindex={2}   // eslint-disable-line\n        />\n        <br />\n        <TextArea\n          style={{ height: 100, width: '500px' }}\n          placeholder=\"Tell us about youself..\"\n          value={value}\n          isValid={isValid}\n          isDirty={isDirty}\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          theme={TextArea.themes.LightTheme}\n          tabindex={1}   // eslint-disable-line\n          autoFocus\n          autocomplete=\"off\"\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        value,\n        isValid,\n        isDirty\n    } = this.state;\n\n    return (\n        <div>\n            <TextArea\n                style={{\n                    height: 100,\n                    width: \"500px\"\n                }}\n                placeholder=\"Tell us about youself..\"\n                value={value}\n                isValid={isValid}\n                isDirty={isDirty}\n                onChange={this.onChange}\n                onKeyDown={this.onKeyDown}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                tabindex={2} />\n            <br />\n            <TextArea\n                style={{\n                    height: 100,\n                    width: \"500px\"\n                }}\n                placeholder=\"Tell us about youself..\"\n                value={value}\n                isValid={isValid}\n                isDirty={isDirty}\n                onChange={this.onChange}\n                onKeyDown={this.onKeyDown}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                theme={TextArea.themes.LightTheme}\n                tabindex={1}\n                autoFocus\n                autocomplete=\"off\" />\n        </div>\n    );\n}"}]},{"name":"TextField","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextField/TextField","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\nimport searchIcon from './searchIcon';\nimport propsOrState from '../../utils/propsOrState';\n\ntype TextFieldTypeT = 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';\n\ntype AutocompleteT = 'on' | 'off';\n\ntype Props = {\n  /** Classname applied to the text field */\n  className?: string,\n  /** theme object for text field */\n  theme: ThemeT,\n  /** input name */\n  name?: string,\n  /** Autocomplete attribute for input */\n  autocomplete?: AutocompleteT,\n  /** determines the type of the input */\n  type?: TextFieldTypeT,\n  /** set the value of the field */\n  value: string,\n  /** placeholder text */\n  placeholder?: string,\n  /** if true, the value is valid */\n  isValid?: boolean,\n  /** if true, the input has been touched by the user */\n  isDirty?: boolean,\n  /** Autofocus attribute for input */\n  autoFocus: boolean,\n  /** if true, the input is focused */\n  isFocused?: boolean,\n  /** tab index of the control */\n  tabindex: number | string,\n  /** callback for value change event on the text field */\n  onChange: () => void,\n  /** callback for key press event on the text field */\n  onKeyPress: (event: SyntheticKeyboardEvent) => void,\n  /** callback for enter key press event on the text field */\n  onEnter: () => void,\n  /** callback for blur event on the text field */\n  onBlur: () => void,\n  /** callback for focus event on the text field */\n  onFocus: () => void,\n  /** id to put on the element for automation test */\n  testId: string,\n};\n\ntype State = {\n  showPassword: boolean,\n  value: string,\n};\n\ntype DefaultProps = {\n  autoFocus: boolean,\n  isDirty: boolean,\n  isValid: boolean,\n  type: TextFieldTypeT,\n  placeholder: string,\n  onChange: (value?: string) => void,\n  onKeyPress: (event: SyntheticKeyboardEvent) => void,\n  onEnter: () => void,\n  onBlur: () => void,\n  onFocus: () => void,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  autoFocus: false,\n  isDirty: false,\n  isValid: true,\n  type: 'text',\n  placeholder: '',\n  onChange: () => {},\n  onKeyPress: () => {},\n  onEnter: () => {},\n  onBlur: () => {},\n  onFocus: () => {},\n  theme: {},\n};\n\n/**\n * Used for displaying text fields\n */\nexport default class TextField extends React.Component {\n  props: Props;\n  state: State;\n\n  textInput: {\n    type: string,\n    addEventListener: () => void,\n    removeEventListener: () => void,\n    focus: () => void,\n    blur: () => void\n  };\n  togglePassword: () => void;\n  handleClear: () => void;\n  handleBlur: () => void;\n  handleScroll: () => void;\n  handleFocus: () => void;\n  handleChange: () => void;\n  handleKeyPress: () => void;\n  refInput: () => void;\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'TextField';\n\n  constructor(props: Props) {\n    super(props);\n    const { autoFocus, value } = this.props;\n    this.refInput = this.refInput.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.togglePassword = this.togglePassword.bind(this);\n    this.propsOrState = propsOrState.bind(this);\n\n    this.state = {\n      showPassword: false,\n      autoFocusState: autoFocus,\n      value,\n    };\n  }\n\n  componentDidMount() {\n    const node = this.textInput;\n    const { value, type } = this.props;\n\n    if (node && type === 'number') {\n      node.addEventListener('wheel', this.handleScroll);\n    }\n\n    if (!node || !value) { return; }\n\n    if (type === 'number') {\n      node.valueAsNumber = value;\n    } else {\n      node.value = value;\n    }\n  }\n\n  componentDidUpdate() {\n    // controlled input cursor jump issue https://github.com/facebook/react/issues/955\n    const { value, type } = this.props;\n    if (!this.textInput || !value || type === 'number') { return; }\n\n    const node = this.textInput;\n    const idx = node.selectionStart;\n    node.value = value;\n    node.selectionStart = node.selectionEnd = idx;\n  }\n\n  togglePassword() {\n    const { showPassword } = this.state;\n\n    this.setState({\n      showPassword: !showPassword\n    });\n  }\n\n  refInput(input: any) {\n    this.textInput = input;\n  }\n\n  handleFocus() {\n    if (this.textInput && this.textInput.type === 'number') {\n      this.textInput.addEventListener('wheel', this.handleScroll);\n    }\n    const { onFocus } = this.props;\n    this.setState({ autoFocusState: true });\n    onFocus();\n  }\n\n  handleBlur() {\n    if (this.textInput && this.textInput.type === 'number') {\n      this.textInput.removeEventListener('wheel', this.handleScroll);\n    }\n    const { onBlur } = this.props;\n    this.setState({ autoFocusState: false });\n    onBlur();\n  }\n\n  handleScroll() {\n    // this is to prevent number fields from changing while scrolling\n    if (this.state.autoFocusState) {\n      this.textInput.blur();\n      setTimeout(() => {\n        this.textInput.focus();\n      }, 10);\n    }\n  }\n\n  handleChange(e: SyntheticKeyboardEvent) {\n    const { onChange, value, type } = this.props;\n    const target:any = e.target;\n    const newValue = type === 'number' ? target.value.replace(/[^\\d.]/g, '') : target.value;\n    const newState = { value: newValue };\n\n    if (value === undefined) {\n      this.setState(newState, () => onChange(newState));\n    } else {\n      onChange(newState);\n    }\n  }\n\n  handleKeyPress(e: any) {\n    const { onKeyPress, onEnter } = this.props;\n    onKeyPress(e);\n    if (e.key === 'Enter') {\n      onEnter({ value: e.target.value });\n    }\n  }\n\n  handleClear() {\n    const { onChange, value } = this.props;\n    const newState = { value: '' };\n\n    if (value === undefined) {\n      this.setState(newState, () => onChange(newState));\n    } else {\n      onChange(newState);\n    }\n  }\n\n  render() {\n    const {\n      className,\n      theme,\n      name,\n      type,\n      placeholder,\n      testId,\n      isValid,\n      isDirty,\n      isFocused,\n      autoFocus,\n      autocomplete,\n      tabindex,\n      /* eslint-disable no-unused-vars */// pick out props that we don't want to spread\n      value,\n      onEnter,\n      onFocus,\n      onBlur,\n      onChange,\n      onKeyPress,\n      /* eslint-enable no-unused-vars */\n      ...props\n    } = this.props;\n\n    const { showPassword } = this.state;\n    const finalType = showPassword ? 'text' : type;\n    const tabIndexValue = tabindex || '';\n    const valueToUse = this.propsOrState.call(this, 'value');\n\n    let isFocusedStatus;\n    switch (isFocused) {\n      case true:\n        isFocusedStatus = isFocused;\n        break;\n      case false:\n        isFocusedStatus = isFocused;\n        break;\n      default:\n        isFocusedStatus = this.state.autoFocusState;\n    }\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\n    return (\n      <div\n        className={classNames(\n          className,\n          isDirty ? theme['is-dirty'] : '',\n          isValid ? theme['is-valid'] : '',\n          !isValid ? theme['has-error'] : '',\n          isFocusedStatus ? theme['is-focused'] : '',\n          theme['text-field'])\n        }\n        data-test-id={testId}\n        data-anypoint-component={TextField.displayName}\n      >\n        <div\n          display-if={type === 'search'}\n          data-test-id={testId && `search-text-field-input-${testId}`}\n          className={theme.search}\n        >\n          {searchIcon()}\n        </div>\n        <div\n          display-if={type === 'search'}\n          className={theme.clear}\n        >\n          <div\n            className={theme.icon}\n            data-test-id={testId && `clear-text-field-input-${testId}`}\n            onClick={this.handleClear}\n          />\n        </div>\n        <input\n          ref={this.refInput}\n          data-test-id={testId && `${testId}-input`}\n          name={name}\n          type={finalType}\n          value={valueToUse}\n          onChange={this.handleChange}\n          onFocus={this.handleFocus}\n          onBlur={this.handleBlur}\n          onKeyPress={this.handleKeyPress}\n          placeholder={placeholder}\n          tabIndex={tabIndexValue}\n          autoComplete={autocomplete}\n          autoFocus={autoFocus}\n          {...props}\n        />\n        <button\n          display-if={type === 'password' && value}\n          onClick={this.togglePassword}\n          className={theme['show-hide-password']}\n          data-test-id={testId && `${testId}-show-hide-password`}\n        >\n          {showPassword ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n","description":"Used for displaying text fields","displayName":"TextField","methods":[{"name":"togglePassword","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"refInput","docblock":null,"modifiers":[],"params":[{"name":"input","type":{"name":"any"}}],"returns":null},{"name":"handleFocus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleBlur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleScroll","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"SyntheticKeyboardEvent","alias":"SyntheticKeyboardEvent"}}],"returns":null},{"name":"handleKeyPress","docblock":null,"modifiers":[],"params":[{"name":"e","type":{"name":"any"}}],"returns":null},{"name":"handleClear","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"Classname applied to the text field"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for text field","defaultValue":{"value":"{}","computed":false}},"name":{"flowType":{"name":"string"},"required":false,"description":"input name"},"autocomplete":{"flowType":{"name":"union","raw":"'on' | 'off'","elements":[{"name":"literal","value":"'on'"},{"name":"literal","value":"'off'"}]},"required":false,"description":"Autocomplete attribute for input"},"type":{"flowType":{"name":"union","raw":"'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url'","elements":[{"name":"literal","value":"'email'"},{"name":"literal","value":"'number'"},{"name":"literal","value":"'password'"},{"name":"literal","value":"'search'"},{"name":"literal","value":"'tel'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'url'"}]},"required":false,"description":"determines the type of the input","defaultValue":{"value":"'text'","computed":false}},"value":{"flowType":{"name":"string"},"required":true,"description":"set the value of the field"},"placeholder":{"flowType":{"name":"string"},"required":false,"description":"placeholder text","defaultValue":{"value":"''","computed":false}},"isValid":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the value is valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input has been touched by the user","defaultValue":{"value":"false","computed":false}},"autoFocus":{"flowType":{"name":"boolean"},"required":true,"description":"Autofocus attribute for input","defaultValue":{"value":"false","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input is focused"},"tabindex":{"flowType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"required":true,"description":"tab index of the control"},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback for value change event on the text field","defaultValue":{"value":"() => {}","computed":false}},"onKeyPress":{"flowType":{"name":"signature","type":"function","raw":"(event: SyntheticKeyboardEvent) => void","signature":{"arguments":[{"name":"event","type":{"name":"SyntheticKeyboardEvent"}}],"return":{"name":"void"}}},"required":true,"description":"callback for key press event on the text field","defaultValue":{"value":"() => {}","computed":false}},"onEnter":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback for enter key press event on the text field","defaultValue":{"value":"() => {}","computed":false}},"onBlur":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback for blur event on the text field","defaultValue":{"value":"() => {}","computed":false}},"onFocus":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":"callback for focus event on the text field","defaultValue":{"value":"() => {}","computed":false}},"testId":{"flowType":{"name":"string"},"required":true,"description":"id to put on the element for automation test"}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextField/examples/1_textfield_usage.js","requirePath":"../src/components/TextField/examples/1_textfield_usage.js","description":"","source":"import React from 'react';\nimport { TextField } from '../../';\nimport { Checkbox } from '../../Checkbox';\n\n/**\n * @component ../../TextField\n */\n\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 'Some value', isDirty: false, isValid: true, isFocused: false };\n    this.handleValid = this.handleValid.bind(this);\n    this.handleDirty = this.handleDirty.bind(this);\n    this.handleFocused = this.handleFocused.bind(this);\n  }\n\n  handleValid() {\n    this.setState({ isValid: !this.state.isValid });\n  }\n\n  handleDirty() {\n    this.setState({ isDirty: !this.state.isDirty });\n  }\n\n  handleFocused() {\n    this.setState({ isFocused: !this.state.isFocused });\n  }\n\n  render() {\n    const { isValid, isDirty, isFocused } = this.state;\n\n    return (\n      <div>\n        <TextField\n          testId=\"foo\"\n          placeholder=\"Some text\"\n          onChange={function (e) { console.log('typing', e.value); }}\n          onEnter={function () { alert('Enter!'); }}\n          isValid={isValid}\n          isDirty={isDirty}\n          isFocused={isFocused}\n          tabindex={1}   // eslint-disable-line\n        />\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleValid}\n            name=\"firstCheckbox\"\n            checked={isValid}\n            label=\"Turn on/off valid value\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleDirty}\n            name=\"firstCheckbox\"\n            checked={isDirty}\n            label=\"Turn on/off dirty value\"\n          />\n        </div>\n        <div style={{ margin: '10px' }}>\n          <Checkbox\n            onChange={this.handleFocused}\n            name=\"firstCheckbox\"\n            checked={isFocused}\n            label=\"Turn on/off focused value\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const {\n        isValid,\n        isDirty,\n        isFocused\n    } = this.state;\n\n    return (\n        <div>\n            <TextField\n                testId=\"foo\"\n                placeholder=\"Some text\"\n                onChange={function(e) {\n                    console.log(\"typing\", e.value);\n                }}\n                onEnter={function() {\n                    alert(\"Enter!\");\n                }}\n                isValid={isValid}\n                isDirty={isDirty}\n                isFocused={isFocused}\n                tabindex={1} />\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleValid}\n                    name=\"firstCheckbox\"\n                    checked={isValid}\n                    label=\"Turn on/off valid value\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleDirty}\n                    name=\"firstCheckbox\"\n                    checked={isDirty}\n                    label=\"Turn on/off dirty value\" />\n            </div>\n            <div\n                style={{\n                    margin: \"10px\"\n                }}>\n                <Checkbox\n                    onChange={this.handleFocused}\n                    name=\"firstCheckbox\"\n                    checked={isFocused}\n                    label=\"Turn on/off focused value\" />\n            </div>\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextField/examples/2_textfield_usage.js","requirePath":"../src/components/TextField/examples/2_textfield_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { TextField } from '../../';\n\n/**\n * @component ../../TextField\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <TextField value=\"Disabled text\" disabled autocomplete=\"off\" />\n    );\n  }\n}\n","renderSource":"render() {\n    return <TextField value=\"Disabled text\" disabled autocomplete=\"off\" />;\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextField/examples/3_textfield_usage.js","requirePath":"../src/components/TextField/examples/3_textfield_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { TextField } from '../../';\n\n/**\n * @component ../../TextField\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <TextField\n        testId=\"foo\"\n        placeholder=\"Some text\"\n        type=\"search\"\n        onEnter={function () { alert('Enter!'); }}\n        theme={TextField.themes.LightTheme}\n        autocomplete=\"on\"\n      />\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <TextField\n            testId=\"foo\"\n            placeholder=\"Some text\"\n            type=\"search\"\n            onEnter={function() {\n                alert(\"Enter!\");\n            }}\n            theme={TextField.themes.LightTheme}\n            autocomplete=\"on\" />\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/TextField/examples/4_textfield_usage.js","requirePath":"../src/components/TextField/examples/4_textfield_usage.js","description":"","source":"import React, { Component } from 'react';\nimport { TextField } from '../../';\n\n/**\n * @component ../../TextField\n */\n\nexport default class YourApp extends Component {\n  render() {\n    return (\n      <TextField\n        testId=\"foo\"\n        placeholder=\"Number field\"\n        type=\"number\"\n        theme={TextField.themes.LightTheme}\n        autoFocus\n      />\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <TextField\n            testId=\"foo\"\n            placeholder=\"Number field\"\n            type=\"number\"\n            theme={TextField.themes.LightTheme}\n            autoFocus />\n    );\n}"}]},{"name":"Toast","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Toast/Toast","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\n/**\n Toast is used to diplay quick notifications to the user in the corners of the screen\n */\n\ntype Props = {\n  /** Make Toast close on click */\n  closeable?: boolean,\n  /** Set style of the toast. If 'custom' is set Toast padding is removed */\n  kind: 'success'|'error'|'info'|'custom',\n  /** Set text in the Toast */\n  title?: string,\n  /** onClose handler */\n  onClose?: () => void,\n  /** onClick handler */\n  onClick?: () => void,\n  /** Contents inside the toast */\n  children?: any,\n  /** className applied to <Toast> */\n  className?: string,\n  /** id applied to ListItem component */\n  testId?: string,\n  /** theme object for ListItem */\n  theme: ThemeT,\n}\n\ntype DefaultProps = {\n  kind: 'success'|'error'|'info'|'custom',\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  kind: 'info',\n  theme: {},\n};\n\nexport default class Toast extends Component {\n\n  props: Props;\n  static displayName = 'Toast';\n  static defaultProps: DefaultProps = defaultProps;\n\n  render() {\n    const { children, title, className, kind, theme, onClick, testId, onClose } = this.props;\n\n    return (\n      <div\n        data-test-id={testId}\n        data-anypoint-component={Toast.displayName}\n        className={classNames(\n          theme.toast,\n          theme[`toast-${kind}`],\n          className,\n        )}\n      >\n        {\n          (typeof onClose) === 'function' ?\n            <span className={theme.toastEsc} onClick={onClose} /> : // eslint-disable-line\n            null\n        }\n        <button\n          data-test-id={testId && `${testId}-click-handler`}\n          className={classNames(\n            theme.button,\n            kind === 'custom' ? theme.noPadding : theme.padding,\n          )}\n          onClick={onClick}\n        >\n          {title &&\n            <div className={theme.title} data-test-id={testId && `${testId}-title`}>\n              {title}\n            </div>\n          }\n          {children &&\n            <div className={theme.custom} data-test-id={testId && `${testId}-children`}>\n              {children}\n            </div>\n          }\n        </button>\n      </div>\n    );\n  }\n}\n","description":"","displayName":"Toast","methods":[],"props":{"closeable":{"flowType":{"name":"boolean"},"required":false,"description":"Make Toast close on click"},"kind":{"flowType":{"name":"union","raw":"'success'|'error'|'info'|'custom'","elements":[{"name":"literal","value":"'success'"},{"name":"literal","value":"'error'"},{"name":"literal","value":"'info'"},{"name":"literal","value":"'custom'"}]},"required":true,"description":"Set style of the toast. If 'custom' is set Toast padding is removed","defaultValue":{"value":"'info'","computed":false}},"title":{"flowType":{"name":"string"},"required":false,"description":"Set text in the Toast"},"onClose":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onClose handler"},"onClick":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":false,"description":"onClick handler"},"children":{"flowType":{"name":"any"},"required":false,"description":"Contents inside the toast"},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to <Toast>"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to ListItem component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for ListItem","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Toast/examples/1_Toast_Usage.js","requirePath":"../src/components/Toast/examples/1_Toast_Usage.js","description":"<p>Here is an example of all the possible button combinations</p>","source":"import React, { Component } from 'react';\nimport Toast from '../../Radio';\n\n/**\n * Here is an example of all the possible button combinations\n * @component ../../Toast\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"onClick\", \"onCancel\"] }] */\nexport default class ToastExample extends Component {\n\n  onClick() {\n    console.log('Click handler');\n  }\n\n  onCancel() {\n    console.log('Cancel handler');\n  }\n\n  render() {\n    return (\n      <div>\n        <Toast\n          title=\"Default (info) toast\"\n          onClose={this.onCancel}\n        />\n        <Toast\n          title=\"Success toast\"\n          kind=\"success\"\n        />\n        <Toast\n          title=\"Error toast\"\n          kind=\"error\"\n        />\n        <Toast\n          title=\"Custom toast wth click handler\"\n          kind=\"custom\"\n          onClick={this.onClick}\n          onClose={this.onCancel}\n        >\n          <h4>Custom Toast content</h4>\n        </Toast>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <Toast title=\"Default (info) toast\" onClose={this.onCancel} />\n            <Toast title=\"Success toast\" kind=\"success\" />\n            <Toast title=\"Error toast\" kind=\"error\" />\n            <Toast\n                title=\"Custom toast wth click handler\"\n                kind=\"custom\"\n                onClick={this.onClick}\n                onClose={this.onCancel}>\n                <h4>Custom Toast content</h4>\n            </Toast>\n        </div>\n    );\n}"}]},{"name":"Toggle","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Toggle/Toggle","source":"/* @flow */\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** className applied to Toggle component */\n  className?: string,\n  /** checkedValue applied to Toggle component */\n  checkedValue?: string,\n  /** uncheckedValue applied to Toggle component */\n  uncheckedValue?: string,\n  /** id applied to Toggle component */\n  testId?: string,\n  /* if true, toggle will be disabled */\n  disabled: boolean,\n  /* if true, the toggle value will be checked */\n  checked: boolean,\n  /** if true, the value is valid */\n  isValid?: boolean,\n  /** if true, the input has been touched by the user */\n  isDirty?: boolean,\n  /** if true, the input is focused */\n  isFocused?: boolean,\n  /* function to trigger when toggle value changed */\n  onChange: () => void,\n  align: 'horizontal' | 'vertical',\n  /** theme object for Toggle */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  disabled: boolean,\n  checked: boolean,\n  isDirty: boolean,\n  isFocused: boolean,\n  align: 'horizontal' | 'vertical',\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  disabled: false,\n  checked: false,\n  isFocused: false,\n  isDirty: false,\n  isValid: true,\n  align: 'horizontal',\n  theme: {},\n};\n\n/**\n * Describe the purpose of Toggle here\n */\nexport default class Toggle extends React.Component {\n  props: Props;\n\n  handleOnChange: () => void;\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Toggle';\n\n  constructor(props: Props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  handleOnChange() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange({ value: !this.props.checked });\n    } else {\n      console.warn('no change handler added to your toggle');\n    }\n  }\n\n  render() {\n    const {\n      align,\n      className,\n      theme,\n      testId,\n      disabled,\n      checkedValue,\n      uncheckedValue,\n      isValid,\n      isDirty,\n      isFocused,\n      checked,\n      ...props\n    } = this.props;\n\n    const checkedClass = (checked) ? theme.checked : '';\n    const disabledClass = (disabled) ? theme.disabled : '';\n    const isDirtyClass = isDirty ? theme['is-dirty'] : '';\n    const isValidClass = isValid ? theme['is-valid'] : '';\n    const isErrorClass = !isValid ? theme['has-error'] : '';\n    const isFocusedClass = isFocused ? theme['is-focused'] : '';\n    const visibleValue = (checked) ? checkedValue : uncheckedValue;\n\n    return (\n      <div\n        className={classNames(className, theme.toggle)}\n        data-test-id={testId}\n        data-anypoint-component={Toggle.displayName}\n        {...props}\n      >\n        <div\n          data-test-id={testId && `switch-${testId}`}\n          className={\n            classNames(\n              theme.switch,\n              checkedClass,\n              theme[align],\n              disabledClass,\n              isDirtyClass,\n              isValidClass,\n              isErrorClass,\n              isFocusedClass\n            )\n          }\n        >\n          <input\n            type=\"checkbox\"\n            disabled\n            checked={this.props.checked}\n            readOnly\n          />\n          <span >\n            <label // eslint-disable-line\n              onClick={this.handleOnChange}\n              htmlFor=\"switch1-input\"\n            >\n              <div />\n            </label>\n          </span>\n          <span\n            display-if={checkedValue && uncheckedValue}\n            className={theme['toggle-value']}\n          >\n            {visibleValue}\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Toggle here","displayName":"Toggle","methods":[{"name":"handleOnChange","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Toggle component"},"checkedValue":{"flowType":{"name":"string"},"required":false,"description":"checkedValue applied to Toggle component"},"uncheckedValue":{"flowType":{"name":"string"},"required":false,"description":"uncheckedValue applied to Toggle component"},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Toggle component"},"disabled":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"false","computed":false}},"checked":{"flowType":{"name":"boolean"},"required":true,"description":"","defaultValue":{"value":"false","computed":false}},"isValid":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the value is valid","defaultValue":{"value":"true","computed":false}},"isDirty":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input has been touched by the user","defaultValue":{"value":"false","computed":false}},"isFocused":{"flowType":{"name":"boolean"},"required":false,"description":"if true, the input is focused","defaultValue":{"value":"false","computed":false}},"onChange":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"align":{"flowType":{"name":"union","raw":"'horizontal' | 'vertical'","elements":[{"name":"literal","value":"'horizontal'"},{"name":"literal","value":"'vertical'"}]},"required":true,"description":"","defaultValue":{"value":"'horizontal'","computed":false}},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Toggle","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Toggle/examples/1_Toggle_usage.js","requirePath":"../src/components/Toggle/examples/1_Toggle_usage.js","description":"","source":"import React from 'react';\nimport { Toggle } from '../../';\nimport Checkbox from '../../Checkbox';\n\n/**\n * @component ../../Toggle\n */\n\nexport default class YourApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: false,\n      positonFirstStatus: false,\n      positionFirstElem: 'horizontal',\n      disabledFirstElem: false\n    };\n    this.onToggleChange = this.onToggleChange.bind(this);\n    this.handlePositionFirstElem = this.handlePositionFirstElem.bind(this);\n    this.handleDisabledFirstElem = this.handleDisabledFirstElem.bind(this);\n  }\n\n  onToggleChange(e) {\n    this.setState({ checked: e.value });\n    console.log('toggle change. toggle is', e.value);\n  }\n\n  handlePositionFirstElem() {\n    this.setState({ positionFirstElemStatus: !this.state.positionFirstElemStatus });\n    if (this.state.positionFirstElemStatus) {\n      this.setState({ positionFirstElem: 'horizontal' });\n    } else {\n      this.setState({ positionFirstElem: 'vertical' });\n    }\n  }\n  handleDisabledFirstElem() {\n    this.setState({ disabledFirstElem: !this.state.disabledFirstElem });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 style={{ margin: 0 }}>Dark theme</h3>\n        <Toggle\n          align={this.state.positionFirstElem}\n          checked={this.state.checked}\n          onChange={this.onToggleChange}\n          disabled={this.state.disabledFirstElem}\n        />\n        <Checkbox\n          onChange={this.handlePositionFirstElem}\n          name=\"firstCheckbox\"\n          checked={this.state.positionFirstElemStatus}\n          label=\"Align: \"\n        />\n        <span style={{ position: 'relative', top: '-4px', fontSize: '14px', paddingRight: '10px' }}>\n          {this.state.positionFirstElem}\n        </span>\n        <Checkbox\n          onChange={this.handleDisabledFirstElem}\n          name=\"firstCheckbox\"\n          checked={this.state.disabledFirstElem}\n          label=\"Turn on/off disabled value\"\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3\n                style={{\n                    margin: 0\n                }}>Dark theme</h3>\n            <Toggle\n                align={this.state.positionFirstElem}\n                checked={this.state.checked}\n                onChange={this.onToggleChange}\n                disabled={this.state.disabledFirstElem} />\n            <Checkbox\n                onChange={this.handlePositionFirstElem}\n                name=\"firstCheckbox\"\n                checked={this.state.positionFirstElemStatus}\n                label=\"Align: \" />\n            <span\n                style={{\n                    position: \"relative\",\n                    top: \"-4px\",\n                    fontSize: \"14px\",\n                    paddingRight: \"10px\"\n                }}>\n                {this.state.positionFirstElem}\n            </span>\n            <Checkbox\n                onChange={this.handleDisabledFirstElem}\n                name=\"firstCheckbox\"\n                checked={this.state.disabledFirstElem}\n                label=\"Turn on/off disabled value\" />\n        </div>\n    );\n}"},{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Toggle/examples/2_Toggle_usage.js","requirePath":"../src/components/Toggle/examples/2_Toggle_usage.js","description":"","source":"import React from 'react';\nimport { Toggle } from '../../';\nimport Checkbox from '../../Checkbox';\n\n/**\n * @component ../../Toggle\n */\n\nexport default class YourApp extends React.Component { // eslint-disable-line\n  constructor(props) {\n    super(props);\n    this.state = {\n      positonSecondStatus: false,\n      positionSecondElem: 'horizontal',\n      positonThirdStatus: false,\n      positionThirdElem: 'horizontal',\n      checkedSecondElem: false,\n      checkedThirdElem: false,\n      disabledSecondElem: false,\n      disabledThirdElem: false\n    };\n    this.onToggleChangeSecondElem = this.onToggleChangeSecondElem.bind(this);\n    this.onToggleChangeThirdElem = this.onToggleChangeThirdElem.bind(this);\n    this.handlePositionSecondElem = this.handlePositionSecondElem.bind(this);\n    this.handlePositionThirdElem = this.handlePositionThirdElem.bind(this);\n    this.handleDisabledSecondElem = this.handleDisabledSecondElem.bind(this);\n    this.handleDisabledThirdElem = this.handleDisabledThirdElem.bind(this);\n  }\n\n  onToggleChangeSecondElem(e) {\n    this.setState({ checkedSecondElem: e.value });\n    console.log('toggle change. toggle is', e.value);\n  }\n  onToggleChangeThirdElem(e) {\n    this.setState({ checkedThirdElem: e.value });\n    console.log('toggle change. toggle is', e.value);\n  }\n  handlePositionSecondElem() {\n    this.setState({ positionSecondElemStatus: !this.state.positionSecondElemStatus });\n    if (this.state.positionSecondElemStatus) {\n      this.setState({ positionSecondElem: 'horizontal' });\n    } else {\n      this.setState({ positionSecondElem: 'vertical' });\n    }\n  }\n  handlePositionThirdElem() {\n    this.setState({ positionThirdElemStatus: !this.state.positionThirdElemStatus });\n    if (this.state.positionThirdElemStatus) {\n      this.setState({ positionThirdElem: 'horizontal' });\n    } else {\n      this.setState({ positionThirdElem: 'vertical' });\n    }\n  }\n  handleDisabledSecondElem() {\n    this.setState({ disabledSecondElem: !this.state.disabledSecondElem });\n  }\n  handleDisabledThirdElem() {\n    this.setState({ disabledThirdElem: !this.state.disabledThirdElem });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 style={{ margin: '30px 0 0 0' }}>Light theme</h3>\n        <Toggle\n          checkedValue=\"Yes\"\n          uncheckedValue=\"No\"\n          disabled={this.state.disabledSecondElem}\n          align={this.state.positionSecondElem}\n          checked={this.state.checkedSecondElem}\n          onChange={this.onToggleChangeSecondElem}\n          theme={Toggle.themes.LightTheme}\n        />\n        <Checkbox\n          onChange={this.handlePositionSecondElem}\n          name=\"secondCheckbox\"\n          checked={this.state.positionSecondElemStatus}\n          label=\"Align: \"\n        />\n        <span style={{ position: 'relative', top: '-4px', fontSize: '14px', paddingRight: '10px' }}>\n          {this.state.positionSecondElem}\n        </span>\n        <Checkbox\n          onChange={this.handleDisabledSecondElem}\n          name=\"thirdCheckbox\"\n          checked={this.state.disabledSecondElem}\n          label=\"Turn on/off disabled value\"\n        />\n        <h3 style={{ margin: '30px 0 0 0' }}>Boxes theme</h3>\n        <Toggle\n          checkedValue=\"Success\"\n          uncheckedValue=\"Denied\"\n          align={this.state.positionThirdElem}\n          checked={this.state.checkedThirdElem}\n          onChange={this.onToggleChangeThirdElem}\n          theme={Toggle.themes.BoxesTheme}\n          disabled={this.state.disabledThirdElem}\n        />\n        <Checkbox\n          onChange={this.handlePositionThirdElem}\n          name=\"forthCheckbox\"\n          checked={this.state.positionThirdElemStatus}\n          label=\"Align: \"\n        />\n        <span style={{ position: 'relative', top: '-4px', fontSize: '14px', paddingRight: '10px' }}>\n          {this.state.positionThirdElem}\n        </span>\n        <Checkbox\n          onChange={this.handleDisabledThirdElem}\n          name=\"fifthCheckbox\"\n          checked={this.state.disabledThirdElem}\n          label=\"Turn on/off disabled value\"\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div>\n            <h3\n                style={{\n                    margin: \"30px 0 0 0\"\n                }}>Light theme</h3>\n            <Toggle\n                checkedValue=\"Yes\"\n                uncheckedValue=\"No\"\n                disabled={this.state.disabledSecondElem}\n                align={this.state.positionSecondElem}\n                checked={this.state.checkedSecondElem}\n                onChange={this.onToggleChangeSecondElem}\n                theme={Toggle.themes.LightTheme} />\n            <Checkbox\n                onChange={this.handlePositionSecondElem}\n                name=\"secondCheckbox\"\n                checked={this.state.positionSecondElemStatus}\n                label=\"Align: \" />\n            <span\n                style={{\n                    position: \"relative\",\n                    top: \"-4px\",\n                    fontSize: \"14px\",\n                    paddingRight: \"10px\"\n                }}>\n                {this.state.positionSecondElem}\n            </span>\n            <Checkbox\n                onChange={this.handleDisabledSecondElem}\n                name=\"thirdCheckbox\"\n                checked={this.state.disabledSecondElem}\n                label=\"Turn on/off disabled value\" />\n            <h3\n                style={{\n                    margin: \"30px 0 0 0\"\n                }}>Boxes theme</h3>\n            <Toggle\n                checkedValue=\"Success\"\n                uncheckedValue=\"Denied\"\n                align={this.state.positionThirdElem}\n                checked={this.state.checkedThirdElem}\n                onChange={this.onToggleChangeThirdElem}\n                theme={Toggle.themes.BoxesTheme}\n                disabled={this.state.disabledThirdElem} />\n            <Checkbox\n                onChange={this.handlePositionThirdElem}\n                name=\"forthCheckbox\"\n                checked={this.state.positionThirdElemStatus}\n                label=\"Align: \" />\n            <span\n                style={{\n                    position: \"relative\",\n                    top: \"-4px\",\n                    fontSize: \"14px\",\n                    paddingRight: \"10px\"\n                }}>\n                {this.state.positionThirdElem}\n            </span>\n            <Checkbox\n                onChange={this.handleDisabledThirdElem}\n                name=\"fifthCheckbox\"\n                checked={this.state.disabledThirdElem}\n                label=\"Turn on/off disabled value\" />\n        </div>\n    );\n}"}]},{"name":"Tooltip","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tooltip/Tooltip","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  /** Tooltip trigger */\n  children: React.Children,\n  /** Text or Custom Component to display in the tooltip */\n  content: string|Object,\n  /** Custom style applied to tooltip container */\n  style: Object,\n  /** className applied to Tooltip */\n  className?: string,\n  /** x, y offset applied to the tooltip */\n  offset: number[],\n  /** The position to display the tooltip */\n  position: 'top'|'right'|'left'|'bottom',\n  /** id applied to Tooltip component */\n  testId?: string,\n  /** theme object for Tooltip */\n  theme: ThemeT,\n};\n\ntype DefaultProps = {\n  offset: number[],\n  position: 'top'|'right'|'left'|'bottom',\n  style: Object,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  offset: [0, 0],\n  position: 'top',\n  style: {\n    marginLeft: 0,\n    marginTop: 0,\n  },\n  theme: {},\n};\n\n\nexport default class Tooltip extends Component {\n  props: Props;\n\n  tooltipInnerEl: any;\n  getClassNames: () => string[];\n  renderTooltip: () => {};\n\n  static defaultProps: DefaultProps = defaultProps;\n  static displayName = 'Tooltip';\n  static defaultSideOffset = 10;\n\n  componentDidMount() {\n    this.correctTooltipPosition();\n  }\n\n  componentDidUpdate() {\n    this.resetTooltipPosition();\n    this.correctTooltipPosition();\n  }\n\n  getClassNames() {\n    const { position, theme } = this.props;\n\n    const classes = classNames(\n      theme.tooltip, /* localized styles */\n      theme[`tooltip-position-${position}`],\n    );\n\n    return classes;\n  }\n\n  resetTooltipPosition() {\n    const { offset, theme } = this.props;\n\n    this.tooltipInnerEl.style.marginLeft = `${offset[0]}px`;\n    this.tooltipInnerEl.style.width = '';\n    this.tooltipInnerEl.classList.remove(theme['tooltip-inner-multi-line']);\n  }\n\n  correctTooltipPosition() {\n    const { theme } = this.props;\n    const tooltipBoundingRect = this.tooltipInnerEl.getBoundingClientRect();\n    const clientWidth = document.documentElement.clientWidth;\n\n    if (tooltipBoundingRect.width + (Tooltip.defaultSideOffset * 2) > clientWidth) {\n      this.tooltipInnerEl.classList.add(theme['tooltip-inner-multi-line']);\n      this.tooltipInnerEl.style.width = `${clientWidth - (Tooltip.defaultSideOffset * 2)}px`;\n      this.tooltipInnerEl.style.marginLeft =\n        `${(tooltipBoundingRect.left * -1)\n        - ((tooltipBoundingRect.width - clientWidth) / 2)}px`;\n    } else if (tooltipBoundingRect.left - Tooltip.defaultSideOffset < 0) {\n      this.tooltipInnerEl.style.marginLeft =\n        `${(tooltipBoundingRect.left * -1) + Tooltip.defaultSideOffset}px`;\n    } else if ((tooltipBoundingRect.right - clientWidth) + Tooltip.defaultSideOffset > 0) {\n      this.tooltipInnerEl.style.marginLeft =\n        `-${(tooltipBoundingRect.right - clientWidth) + Tooltip.defaultSideOffset}px`;\n    }\n  }\n\n  renderTooltip() {\n    const { offset, content, style, testId, theme } = this.props;\n\n    let tooltipContent = '';\n\n    if (typeof content === 'string') {\n      tooltipContent = (\n        <span\n          className={theme['tooltip-text']}\n          data-test-id={testId && `${testId}-text`}\n        >\n          {content}\n        </span>\n      );\n    } else if (content && content.type) {\n      tooltipContent = content;\n    }\n\n    style.marginLeft = offset[0];\n    style.marginTop = offset[1];\n\n    const tooltip = (\n      <div\n        style={style}\n        ref={r => (this.tooltipInnerEl = r)}\n        className={this.getClassNames()}\n        data-test-id={testId && `${testId}-inner`}\n      >\n        {tooltipContent}\n      </div>\n    );\n\n    return tooltip;\n  }\n\n  render() {\n    const { children, testId, className, theme } = this.props;\n\n    return (\n      <span\n        className={\n          classNames(\n            theme['tooltip-wrap'],\n            className\n          )\n        }\n        data-test-id={testId}\n        data-anypoint-component={Tooltip.displayName}\n      >\n        {children}\n        {this.renderTooltip()}\n      </span>\n    );\n  }\n\n}\n","description":"","displayName":"Tooltip","methods":[{"name":"getClassNames","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"resetTooltipPosition","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"correctTooltipPosition","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTooltip","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"flowType":{"name":"unknown"},"required":true,"description":"Tooltip trigger"},"content":{"flowType":{"name":"union","raw":"string|Object","elements":[{"name":"string"},{"name":"Object"}]},"required":true,"description":"Text or Custom Component to display in the tooltip"},"style":{"flowType":{"name":"Object"},"required":true,"description":"Custom style applied to tooltip container","defaultValue":{"value":"{\n  marginLeft: 0,\n  marginTop: 0,\n}","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Tooltip"},"offset":{"flowType":{"name":"unknown"},"required":true,"description":"x, y offset applied to the tooltip","defaultValue":{"value":"[0, 0]","computed":false}},"position":{"flowType":{"name":"union","raw":"'top'|'right'|'left'|'bottom'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'right'"},{"name":"literal","value":"'left'"},{"name":"literal","value":"'bottom'"}]},"required":true,"description":"The position to display the tooltip","defaultValue":{"value":"'top'","computed":false}},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Tooltip component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Tooltip","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tooltip/examples/1_Tooltip_usage.js","requirePath":"../src/components/Tooltip/examples/1_Tooltip_usage.js","description":"","source":"import React from 'react';\nimport { Tooltip } from '../../';\n\n/**\n * @component ../../Tooltip\n */\n\n/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"getExampleReactElement\"] }] */\nexport default class YourApp extends React.Component {\n\n  getExampleReactElement() {\n    return (\n      <div style={{ padding: '20px', border: '1px solid #f1f1f1', background: '#fff' }}>\n        <h1>React component</h1>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'flex-start' }}>\n        <Tooltip\n          content=\"Tooltip content\"\n        >\n          <div>Hover me (default)</div>\n        </Tooltip>\n        <Tooltip\n          content=\"Tooltip content\"\n          position=\"bottom\"\n        >\n          <div>Hover me (bottom position)</div>\n        </Tooltip>\n        <Tooltip\n          content={this.getExampleReactElement()}\n          position=\"bottom\"\n          offset={[0, 20]}\n        >\n          <div>Hover me (with additional offset)</div>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                alignItems: \"flex-start\"\n            }}>\n            <Tooltip content=\"Tooltip content\">\n                <div>Hover me (default)</div>\n            </Tooltip>\n            <Tooltip content=\"Tooltip content\" position=\"bottom\">\n                <div>Hover me (bottom position)</div>\n            </Tooltip>\n            <Tooltip\n                content={this.getExampleReactElement()}\n                position=\"bottom\"\n                offset={[0, 20]}>\n                <div>Hover me (with additional offset)</div>\n            </Tooltip>\n        </div>\n    );\n}"}]},{"name":"Tree","path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tree/Tree","source":"/* @flow */\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport DefaultLeafComponent from './Leaf';\nimport DefaultFolderComponent from './Folder';\nimport DefaultEmptyComponent from './Empty';\n\ntype Props = {\n  nodes: Object[],\n  selected: Object[],\n  expanded: Object[],\n  onSelect: () => void,\n  onToggle: () => void,\n  getId: any,\n  getFolder: any,\n  getLeaf: any,\n  getEmpty: () => string,\n  getChildren: any,\n  isFolder: any,\n  identation: number,\n  maxDepth: number,\n  className: string,\n  leafComponent: any,\n  folderComponent: any,\n  emptyComponent: any,\n  selectedByDefault: [],\n  expandedByDefault: [],\n  /** className applied to Tree component */\n  className?: string,\n  /** id applied to Tree component */\n  testId?: string,\n  /** theme object for Tree */\n  theme: ThemeT,\n};\n\ntype State = {\n  selected: any,\n  expanded: any\n};\n\ntype DefaultProps = {\n  nodes: Object[],\n  getId: any,\n  getFolder: any,\n  getLeaf: any,\n  getEmpty: () => string,\n  getChildren: any,\n  isFolder: any,\n  maxDepth: number,\n  identation: number,\n  leafComponent: any,\n  folderComponent: any,\n  emptyComponent: any,\n  theme: ThemeT,\n};\n\nconst defaultProps = {\n  nodes: [],\n  getId: node => node.id || node.name || node.label || node.description || node.toString(),\n  // eslint-disable-next-line no-unused-vars\n  getFolder: ({ node, path, isSelected, isExpanded }) =>\n    node.label || node.description || node.name || node.toString(),\n  // eslint-disable-next-line no-unused-vars\n  getLeaf: ({ node, path, isSelected }) =>\n    node.label || node.description || node.name || node.toString(),\n  getEmpty: () => 'Empty...',\n  // eslint-disable-next-line no-unused-vars\n  getChildren: ({ node, path }) => node.children,\n  // eslint-disable-next-line no-unused-vars\n  isFolder: ({ node, path }) => node && Array.isArray(node.children),\n  maxDepth: 10,\n  identation: 20,\n  leafComponent: DefaultLeafComponent,\n  folderComponent: DefaultFolderComponent,\n  emptyComponent: DefaultEmptyComponent,\n  theme: {},\n};\n\n/**\n * Describe the purpose of Tree here\n */\nexport default class Tree extends Component {\n  props: Props;\n  state: State;\n\n  getSelected: () => any;\n  getExpanded: () => any;\n  isSelected: () => any;\n  isExpanded: () => any;\n  handleSelect: () => any;\n  handleToggle: () => any;\n  renderNode: () => any;\n\n  static defaultProps: DefaultProps = defaultProps;\n\n  static isChild(parent, path) {\n    return path.substr(0, parent.length) === parent;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.getSelected = this.getSelected.bind(this);\n    this.getExpanded = this.getExpanded.bind(this);\n    this.isSelected = this.isSelected.bind(this);\n    this.isExpanded = this.isExpanded.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.renderNode = this.renderNode.bind(this);\n\n    const selectedByDefault = Array.isArray(this.props.selectedByDefault);\n    const expandedByDefault = Array.isArray(this.props.expandedByDefault);\n\n    this.state = {\n      selected: selectedByDefault\n        ? this.props.selectedByDefault\n        : [],\n      expanded: expandedByDefault\n        ? this.props.expandedByDefault\n        : []\n    };\n  }\n\n  getSelected() {\n    const { selected } = this.props;\n    if (Array.isArray(selected)) {\n      return selected;\n    }\n    return this.state.selected;\n  }\n\n  getExpanded() {\n    const { expanded } = this.props;\n    if (Array.isArray(expanded)) {\n      return expanded;\n    }\n    return this.state.expanded;\n  }\n\n  isSelected(path: string) {\n    return this.getSelected().some(selected => selected === path);\n  }\n\n  isExpanded(path: string) {\n    return this.getExpanded().some(expanded => expanded === path);\n  }\n\n  handleSelect(node: any, path: string, isSelected: boolean = true) {\n    const otherSelected = [];\n    const selected = isSelected\n      ? [...otherSelected, path]\n      : otherSelected;\n    const { onSelect } = this.props;\n    if (typeof onSelect === 'function') {\n      onSelect({ node, path, selected });\n    } else {\n      this.setState({ selected });\n    }\n  }\n\n  handleToggle(node: any, path: string, isExpanded: boolean = true) {\n    const otherExpanded = this.getExpanded().filter(selected => selected !== path);\n    const expanded = isExpanded\n      ? [...otherExpanded, path]\n      : otherExpanded.filter(selected => !Tree.isChild(path, selected)); // close all child paths\n    const { onToggle } = this.props;\n    if (typeof onToggle === 'function') {\n      onToggle({ node, path, expanded });\n    } else {\n      this.setState({ expanded });\n    }\n  }\n\n  renderNode(node: any, parent: any) {\n    const {\n      getId,\n      isFolder,\n      getFolder,\n      getLeaf,\n      getEmpty,\n      getChildren,\n      maxDepth,\n      testId,\n      theme\n      } = this.props;\n\n    const id = encodeURIComponent(getId(node));\n    const path = [parent.path, id].join('/');\n    const isSelected = this.isSelected(path);\n\n    if (parent.depth === maxDepth) {\n      return null;\n    }\n\n    if (isFolder({ node, path })) {\n      const Folder = this.props.folderComponent || DefaultFolderComponent;\n      const Empty = this.props.emptyComponent || DefaultEmptyComponent;\n\n      const children = getChildren({ node, path });\n      const depth = parent.depth + 1;\n      const identation = parent.identation + this.props.identation;\n      const isExpanded = this.isExpanded(path);\n      const label = getFolder({ node, path, isSelected, isExpanded });\n\n      return (\n        <Folder\n          key={path}\n          node={node}\n          path={path}\n          label={label}\n          isSelected={isSelected}\n          isExpanded={isExpanded}\n          onSelect={this.handleSelect}\n          onToggle={this.handleToggle}\n          identation={parent.identation}\n          testId={testId}\n          theme={theme}\n        >\n          {children.length > 0\n            ? children.map(child => this.renderNode(child, { path, depth, identation }))\n            : <Empty theme={theme} testId={testId} identation={identation}>{getEmpty()}</Empty>\n          }\n        </Folder>\n      );\n    }\n\n    const Leaf = this.props.leafComponent || DefaultLeafComponent;\n    const content = getLeaf({ node, path, isSelected });\n\n    return (\n      <Leaf\n        key={path}\n        node={node}\n        path={path}\n        identation={parent.identation}\n        isSelected={isSelected}\n        onSelect={this.handleSelect}\n        theme={theme}\n        testId={testId}\n      >{content}</Leaf>\n    );\n  }\n\n  render() {\n    const {\n      nodes,\n      theme,\n      testId,\n      className,\n      getEmpty,\n      ...other\n      } = this.props;\n\n    const Empty = this.props.emptyComponent || DefaultEmptyComponent;\n\n    const root = {\n      identation: 10,\n      depth: 0,\n      path: ''\n    };\n\n    delete other.selected;\n    delete other.expanded;\n    delete other.onSelect;\n    delete other.onToggle;\n    delete other.getId;\n    delete other.getFolder;\n    delete other.getLeaf;\n    delete other.getChildren;\n    delete other.isFolder;\n    delete other.identation;\n    delete other.maxDepth;\n    delete other.leafComponent;\n    delete other.folderComponent;\n    delete other.emptyComponent;\n    delete other.selectedByDefault;\n    delete other.expandedByDefault;\n\n    return (\n      <div\n        className={classNames(className, theme.tree)}\n        data-test-id={testId}\n        data-anypoint-component=\"Tree\"\n        {...other}\n      >\n        {Array.isArray(nodes)\n          ? nodes.map(node => this.renderNode(node, root))\n          : <Empty testId={testId} theme={theme}>{getEmpty()}</Empty>\n        }\n      </div>\n    );\n  }\n}\n","description":"Describe the purpose of Tree here","methods":[{"name":"isChild","docblock":null,"modifiers":["static"],"params":[{"name":"parent","type":null},{"name":"path","type":null}],"returns":null},{"name":"getSelected","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getExpanded","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"isSelected","docblock":null,"modifiers":[],"params":[{"name":"path","type":{"name":"string"}}],"returns":null},{"name":"isExpanded","docblock":null,"modifiers":[],"params":[{"name":"path","type":{"name":"string"}}],"returns":null},{"name":"handleSelect","docblock":null,"modifiers":[],"params":[{"name":"node","type":{"name":"any"}},{"name":"path","type":{"name":"string"}},{"name":"isSelected","type":null}],"returns":null},{"name":"handleToggle","docblock":null,"modifiers":[],"params":[{"name":"node","type":{"name":"any"}},{"name":"path","type":{"name":"string"}},{"name":"isExpanded","type":null}],"returns":null},{"name":"renderNode","docblock":null,"modifiers":[],"params":[{"name":"node","type":{"name":"any"}},{"name":"parent","type":{"name":"any"}}],"returns":null}],"props":{"nodes":{"flowType":{"name":"unknown"},"required":true,"description":"","defaultValue":{"value":"[]","computed":false}},"selected":{"flowType":{"name":"unknown"},"required":true,"description":""},"expanded":{"flowType":{"name":"unknown"},"required":true,"description":""},"onSelect":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"onToggle":{"flowType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"required":true,"description":""},"getId":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"node => node.id || node.name || node.label || node.description || node.toString()","computed":false}},"getFolder":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"({ node, path, isSelected, isExpanded }) =>\n  node.label || node.description || node.name || node.toString()","computed":false}},"getLeaf":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"({ node, path, isSelected }) =>\n  node.label || node.description || node.name || node.toString()","computed":false}},"getEmpty":{"flowType":{"name":"signature","type":"function","raw":"() => string","signature":{"arguments":[],"return":{"name":"string"}}},"required":true,"description":"","defaultValue":{"value":"() => 'Empty...'","computed":false}},"getChildren":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"({ node, path }) => node.children","computed":false}},"isFolder":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"({ node, path }) => node && Array.isArray(node.children)","computed":false}},"identation":{"flowType":{"name":"number"},"required":true,"description":"","defaultValue":{"value":"20","computed":false}},"maxDepth":{"flowType":{"name":"number"},"required":true,"description":"","defaultValue":{"value":"10","computed":false}},"className":{"flowType":{"name":"string"},"required":false,"description":"className applied to Tree component"},"leafComponent":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"DefaultLeafComponent","computed":true}},"folderComponent":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"DefaultFolderComponent","computed":true}},"emptyComponent":{"flowType":{"name":"any"},"required":true,"description":"","defaultValue":{"value":"DefaultEmptyComponent","computed":true}},"selectedByDefault":{"flowType":{"name":"tuple","raw":"[]","elements":[]},"required":true,"description":""},"expandedByDefault":{"flowType":{"name":"tuple","raw":"[]","elements":[]},"required":true,"description":""},"testId":{"flowType":{"name":"string"},"required":false,"description":"id applied to Tree component"},"theme":{"flowType":{"name":"ThemeT"},"required":true,"description":"theme object for Tree","defaultValue":{"value":"{}","computed":false}}},"examples":[{"path":"/Users/maxim/Projects/Mulesoft/develop/anypoint-components/src/components/Tree/examples/1_Tree_usage.js","requirePath":"../src/components/Tree/examples/1_Tree_usage.js","description":"","source":"import React from 'react';\nimport { Tree } from '../../';\n\n/**\n * @component ../../Tree\n */\n\nconst sidebar = {\n  width: 250,\n  height: 400,\n  backgroundColor: '#f9fafb',\n  overflow: 'auto'\n};\n\nconst nodes = [\n  {\n    name: 'folder',\n    label: 'Folder',\n    children: [\n      {\n        name: 'file',\n        label: 'File',\n      },\n      {\n        name: 'asset',\n        label: 'Asset',\n      },\n      {\n        name: 'subfolder',\n        label: 'Subfolder',\n        children: [\n          {\n            name: 'another-file',\n            label: 'Another file',\n          },\n          {\n            name: 'another-asset',\n            label: 'Another asset',\n          }\n        ]\n      }\n    ]\n  },\n  {\n    name: 'another-folder',\n    label: 'Another folder',\n    children: [\n      {\n        name: 'file',\n        label: 'File',\n      },\n      {\n        name: 'asset',\n        label: 'Asset',\n      }\n    ]\n  },\n  {\n    name: 'empty',\n    label: 'Empty folder',\n    children: []\n  },\n  {\n    name: 'recursive',\n    label: 'Recursive folder',\n    children: [\n      {\n        name: 'file',\n        label: 'File',\n      },\n      {\n        name: 'asset',\n        label: 'Asset',\n      }\n    ]\n  }\n];\n\nnodes[3].children.push(nodes[3]);\n\nexport default class YourApp extends React.Component {\n\n  render() {\n    const expandedByDefault = ['/folder'];\n    const selectedByDefault = ['/folder/file'];\n\n    return (\n      <div style={sidebar}>\n        <Tree\n          nodes={nodes}\n          selectedByDefault={selectedByDefault}\n          expandedByDefault={expandedByDefault}\n        />\n      </div>\n    );\n  }\n}\n","renderSource":"render() {\n    const expandedByDefault = [\"/folder\"];\n    const selectedByDefault = [\"/folder/file\"];\n\n    return (\n        <div style={sidebar}>\n            <Tree\n                nodes={nodes}\n                selectedByDefault={selectedByDefault}\n                expandedByDefault={expandedByDefault} />\n        </div>\n    );\n}"}]}]